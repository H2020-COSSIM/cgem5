Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file
Rule 1     file -> decls
Rule 2     empty -> <empty>
Rule 3     decls -> declsx
Rule 4     declsx -> decl declsx
Rule 5     declsx -> empty
Rule 6     decl -> PROTOCOL STRING SEMI
Rule 7     decl -> INCLUDE STRING SEMI
Rule 8     decl -> MACHINE ( enumeration ) : obj_decls { decls }
Rule 9     decl -> MACHINE ( enumeration pairs ) : obj_decls { decls }
Rule 10    decl -> ACTION ( ident pairs ) statements
Rule 11    decl -> IN_PORT ( ident , type , var pairs ) statements
Rule 12    decl -> OUT_PORT ( ident , type , var pairs ) SEMI
Rule 13    decl -> TRANS ( idents , idents , ident_or_star ) idents
Rule 14    decl -> TRANS ( idents , idents ) idents
Rule 15    decl -> TRANS ( idents , idents , ident_or_star ) idents idents
Rule 16    decl -> TRANS ( idents , idents ) idents idents
Rule 17    decl -> EXTERN_TYPE ( type pairs ) SEMI
Rule 18    decl -> GLOBAL ( type pairs ) { type_members }
Rule 19    decl -> STRUCT ( type pairs ) { type_members }
Rule 20    decl -> ENUM ( type pairs ) { type_enums }
Rule 21    decl -> STATE_DECL ( type pairs ) { type_states }
Rule 22    obj_decls -> obj_decl obj_decls
Rule 23    obj_decls -> empty
Rule 24    type_members -> type_member type_members
Rule 25    type_members -> empty
Rule 26    type_member -> obj_decl
Rule 27    type_member -> func_decl
Rule 28    type_member -> func_def
Rule 29    decl -> obj_decl
Rule 30    obj_decl -> type ident pairs SEMI
Rule 31    obj_decl -> type STAR ident pairs SEMI
Rule 32    obj_decl -> type ident ASSIGN expr SEMI
Rule 33    obj_decl -> type STAR ident ASSIGN expr SEMI
Rule 34    decl -> func_decl
Rule 35    func_decl -> void ident ( params ) pairs SEMI
Rule 36    func_decl -> type ident ( params ) pairs SEMI
Rule 37    func_decl -> void ident ( types ) pairs SEMI
Rule 38    func_decl -> type ident ( types ) pairs SEMI
Rule 39    decl -> func_def
Rule 40    func_def -> void ident ( params ) pairs statements
Rule 41    func_def -> type ident ( params ) pairs statements
Rule 42    type_enums -> type_enum type_enums
Rule 43    type_enums -> empty
Rule 44    type_enum -> ident pairs SEMI
Rule 45    type_states -> type_state type_states
Rule 46    type_states -> empty
Rule 47    type_state -> ident , enumeration pairs SEMI
Rule 48    params -> param , params
Rule 49    params -> param
Rule 50    params -> empty
Rule 51    param -> type ident
Rule 52    param -> type STAR ident
Rule 53    param -> type AMP ident
Rule 54    param -> CONST type AMP ident
Rule 55    param -> type STAR ident ASSIGN STRING
Rule 56    param -> type ident ASSIGN NUMBER
Rule 57    param -> type ident ASSIGN LIT_BOOL
Rule 58    param -> type ident ASSIGN STRING
Rule 59    types -> type , types
Rule 60    types -> type
Rule 61    types -> empty
Rule 62    typestr -> typestr DOUBLE_COLON ident
Rule 63    typestr -> ident
Rule 64    type -> typestr
Rule 65    void -> VOID
Rule 66    idents -> { identx }
Rule 67    idents -> ident
Rule 68    identx -> ident SEMI identx
Rule 69    identx -> ident , identx
Rule 70    identx -> ident identx
Rule 71    identx -> empty
Rule 72    ident -> IDENT
Rule 73    ident_or_star -> ident
Rule 74    ident_or_star -> STAR
Rule 75    pairs -> , pairsx
Rule 76    pairs -> empty
Rule 77    pairsx -> pair , pairsx
Rule 78    pairsx -> pair
Rule 79    pair -> ident = STRING
Rule 80    pair -> ident = ident
Rule 81    pair -> ident = NUMBER
Rule 82    pair -> STRING
Rule 83    statements -> { statements_inner }
Rule 84    statements -> { }
Rule 85    statements_inner -> statement statements_inner
Rule 86    statements_inner -> statement
Rule 87    exprs -> expr , exprs
Rule 88    exprs -> expr
Rule 89    exprs -> empty
Rule 90    statement -> expr SEMI
Rule 91    statement -> expr ASSIGN expr SEMI
Rule 92    statement -> ENQUEUE ( var , type ) statements
Rule 93    statement -> ENQUEUE ( var , type , expr ) statements
Rule 94    statement -> DEFER_ENQUEUEING ( var , type ) statements
Rule 95    statement -> STALL_AND_WAIT ( var , var ) SEMI
Rule 96    statement -> WAKEUP_PORT ( var , var ) SEMI
Rule 97    statement -> PEEK ( var , type pairs ) statements
Rule 98    statement -> CHECK_ALLOCATE ( var ) SEMI
Rule 99    statement -> CHECK_NEXT_CYCLE ( ) SEMI
Rule 100   statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
Rule 101   statement -> CHECK_PROBE ( var , var ) SEMI
Rule 102   statement -> RETURN expr SEMI
Rule 103   statement -> if_statement
Rule 104   if_statement -> IF ( expr ) statements
Rule 105   if_statement -> IF ( expr ) statements ELSE statements
Rule 106   if_statement -> IF ( expr ) statements ELSE if_statement
Rule 107   aexpr -> STATIC_CAST ( type , expr )
Rule 108   aexpr -> STATIC_CAST ( type , STRING , expr )
Rule 109   aexpr -> var
Rule 110   aexpr -> type ident
Rule 111   aexpr -> literal
Rule 112   aexpr -> enumeration
Rule 113   aexpr -> ident ( exprs )
Rule 114   aexpr -> NEW type
Rule 115   aexpr -> OOD
Rule 116   aexpr -> aexpr DOT ident
Rule 117   aexpr -> aexpr DOT ident ( exprs )
Rule 118   aexpr -> aexpr [ exprs ]
Rule 119   aexpr -> type DOUBLE_COLON ident ( exprs )
Rule 120   expr -> aexpr
Rule 121   expr -> expr STAR expr
Rule 122   expr -> expr SLASH expr
Rule 123   expr -> expr MOD expr
Rule 124   expr -> expr PLUS expr
Rule 125   expr -> expr DASH expr
Rule 126   expr -> expr LT expr
Rule 127   expr -> expr GT expr
Rule 128   expr -> expr LE expr
Rule 129   expr -> expr GE expr
Rule 130   expr -> expr EQ expr
Rule 131   expr -> expr NE expr
Rule 132   expr -> expr AND expr
Rule 133   expr -> expr OR expr
Rule 134   expr -> expr RIGHTSHIFT expr
Rule 135   expr -> expr LEFTSHIFT expr
Rule 136   expr -> NOT expr
Rule 137   expr -> INCR expr
Rule 138   expr -> DECR expr
Rule 139   expr -> DASH expr
Rule 140   aexpr -> ( expr )
Rule 141   aexpr -> IS_VALID ( expr )
Rule 142   aexpr -> IS_INVALID ( expr )
Rule 143   literal -> STRING
Rule 144   literal -> NUMBER
Rule 145   literal -> FLOATNUMBER
Rule 146   literal -> LIT_BOOL
Rule 147   enumeration -> ident : ident
Rule 148   var -> ident

Terminals, with rules where they appear

(                    : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 35 36 37 38 40 41 92 93 94 95 96 97 98 99 100 101 104 105 106 107 108 113 117 119 140 141 142
)                    : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 35 36 37 38 40 41 92 93 94 95 96 97 98 99 100 101 104 105 106 107 108 113 117 119 140 141 142
,                    : 11 11 12 12 13 13 14 15 15 16 47 48 59 69 75 77 87 92 93 93 94 95 96 97 100 100 101 107 108 108
:                    : 8 9 147
=                    : 79 80 81
ACTION               : 10
AMP                  : 53 54
AND                  : 132
ASSIGN               : 32 33 55 56 57 58 91
CHECK_ALLOCATE       : 98
CHECK_NEXT_CYCLE     : 99
CHECK_PROBE          : 101
CHECK_STOP_SLOTS     : 100
CONST                : 54
DASH                 : 125 139
DECR                 : 138
DEFER_ENQUEUEING     : 94
DOT                  : 116 117
DOUBLE_COLON         : 62 119
ELSE                 : 105 106
ENQUEUE              : 92 93
ENUM                 : 20
EQ                   : 130
EXTERN_TYPE          : 17
FLOATNUMBER          : 145
GE                   : 129
GLOBAL               : 18
GT                   : 127
IDENT                : 72
IF                   : 104 105 106
INCLUDE              : 7
INCR                 : 137
IN_PORT              : 11
IS_INVALID           : 142
IS_VALID             : 141
LE                   : 128
LEFTSHIFT            : 135
LIT_BOOL             : 57 146
LT                   : 126
MACHINE              : 8 9
MOD                  : 123
NE                   : 131
NEW                  : 114
NOT                  : 136
NUMBER               : 56 81 144
OOD                  : 115
OR                   : 133
OUT_PORT             : 12
PEEK                 : 97
PLUS                 : 124
PROTOCOL             : 6
RETURN               : 102
RIGHTSHIFT           : 134
SEMI                 : 6 7 12 17 30 31 32 33 35 36 37 38 44 47 68 90 91 95 96 98 99 100 101 102
SLASH                : 122
STALL_AND_WAIT       : 95
STAR                 : 31 33 52 55 74 121
STATE_DECL           : 21
STATIC_CAST          : 107 108
STRING               : 6 7 55 58 79 82 100 100 108 143
STRUCT               : 19
TRANS                : 13 14 15 16
VOID                 : 65
WAKEUP_PORT          : 96
[                    : 118
]                    : 118
error                : 
{                    : 8 9 18 19 20 21 66 83 84
}                    : 8 9 18 19 20 21 66 83 84

Nonterminals, with rules where they appear

aexpr                : 116 117 118 120
decl                 : 4
decls                : 1 8 9
declsx               : 3 4
empty                : 5 23 25 43 46 50 61 71 76 89
enumeration          : 8 9 47 112
expr                 : 32 33 87 88 90 91 91 93 102 104 105 106 107 108 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132 133 133 134 134 135 135 136 137 138 139 140 141 142
exprs                : 87 113 117 118 119
file                 : 0
func_decl            : 27 34
func_def             : 28 39
ident                : 10 11 12 30 31 32 33 35 36 37 38 40 41 44 47 51 52 53 54 55 56 57 58 62 63 67 68 69 70 73 79 80 80 81 110 113 116 117 119 147 147 148
ident_or_star        : 13 15
idents               : 13 13 13 14 14 14 15 15 15 15 16 16 16 16
identx               : 66 68 69 70
if_statement         : 103 106
literal              : 111
obj_decl             : 22 26 29
obj_decls            : 8 9 22
pair                 : 77 78
pairs                : 9 10 11 12 17 18 19 20 21 30 31 35 36 37 38 40 41 44 47 97
pairsx               : 75 77
param                : 48 49
params               : 35 36 40 41 48
statement            : 85 86
statements           : 10 11 40 41 92 93 94 97 104 105 105 106
statements_inner     : 83 85
type                 : 11 12 17 18 19 20 21 30 31 32 33 36 38 41 51 52 53 54 55 56 57 58 59 60 92 93 94 97 107 108 110 114 119
type_enum            : 42
type_enums           : 20 42
type_member          : 24
type_members         : 18 19 24
type_state           : 45
type_states          : 21 45
types                : 37 38 59
typestr              : 62 64
var                  : 11 12 92 93 94 95 95 96 96 97 98 100 101 101 109
void                 : 35 37 40

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . decls
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( enumeration ) : obj_decls { decls }
    (9) decl -> . MACHINE ( enumeration pairs ) : obj_decls { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident_or_star ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident_or_star ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (29) decl -> . obj_decl
    (34) decl -> . func_decl
    (39) decl -> . func_def
    (2) empty -> .
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (35) func_decl -> . void ident ( params ) pairs SEMI
    (36) func_decl -> . type ident ( params ) pairs SEMI
    (37) func_decl -> . void ident ( types ) pairs SEMI
    (38) func_decl -> . type ident ( types ) pairs SEMI
    (40) func_def -> . void ident ( params ) pairs statements
    (41) func_def -> . type ident ( params ) pairs statements
    (64) type -> . typestr
    (65) void -> . VOID
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    PROTOCOL        shift and go to state 6
    INCLUDE         shift and go to state 7
    MACHINE         shift and go to state 8
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 11
    OUT_PORT        shift and go to state 13
    TRANS           shift and go to state 14
    EXTERN_TYPE     shift and go to state 15
    GLOBAL          shift and go to state 16
    STRUCT          shift and go to state 17
    ENUM            shift and go to state 18
    STATE_DECL      shift and go to state 19
    $end            reduce using rule 2 (empty -> .)
    VOID            shift and go to state 25
    IDENT           shift and go to state 26

    file                           shift and go to state 1
    decls                          shift and go to state 2
    declsx                         shift and go to state 3
    decl                           shift and go to state 4
    empty                          shift and go to state 5
    ident                          shift and go to state 10
    type                           shift and go to state 12
    obj_decl                       shift and go to state 20
    func_decl                      shift and go to state 21
    func_def                       shift and go to state 22
    void                           shift and go to state 23
    typestr                        shift and go to state 24

state 1

    (0) S' -> file .



state 2

    (1) file -> decls .

    $end            reduce using rule 1 (file -> decls .)


state 3

    (3) decls -> declsx .

    $end            reduce using rule 3 (decls -> declsx .)
    }               reduce using rule 3 (decls -> declsx .)


state 4

    (4) declsx -> decl . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( enumeration ) : obj_decls { decls }
    (9) decl -> . MACHINE ( enumeration pairs ) : obj_decls { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident_or_star ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident_or_star ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (29) decl -> . obj_decl
    (34) decl -> . func_decl
    (39) decl -> . func_def
    (2) empty -> .
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (35) func_decl -> . void ident ( params ) pairs SEMI
    (36) func_decl -> . type ident ( params ) pairs SEMI
    (37) func_decl -> . void ident ( types ) pairs SEMI
    (38) func_decl -> . type ident ( types ) pairs SEMI
    (40) func_def -> . void ident ( params ) pairs statements
    (41) func_def -> . type ident ( params ) pairs statements
    (64) type -> . typestr
    (65) void -> . VOID
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    PROTOCOL        shift and go to state 6
    INCLUDE         shift and go to state 7
    MACHINE         shift and go to state 8
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 11
    OUT_PORT        shift and go to state 13
    TRANS           shift and go to state 14
    EXTERN_TYPE     shift and go to state 15
    GLOBAL          shift and go to state 16
    STRUCT          shift and go to state 17
    ENUM            shift and go to state 18
    STATE_DECL      shift and go to state 19
    $end            reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 25
    IDENT           shift and go to state 26

    decl                           shift and go to state 4
    declsx                         shift and go to state 27
    empty                          shift and go to state 5
    ident                          shift and go to state 10
    type                           shift and go to state 12
    obj_decl                       shift and go to state 20
    func_decl                      shift and go to state 21
    func_def                       shift and go to state 22
    void                           shift and go to state 23
    typestr                        shift and go to state 24

state 5

    (5) declsx -> empty .

    $end            reduce using rule 5 (declsx -> empty .)
    }               reduce using rule 5 (declsx -> empty .)


state 6

    (6) decl -> PROTOCOL . STRING SEMI

    STRING          shift and go to state 28


state 7

    (7) decl -> INCLUDE . STRING SEMI

    STRING          shift and go to state 29


state 8

    (8) decl -> MACHINE . ( enumeration ) : obj_decls { decls }
    (9) decl -> MACHINE . ( enumeration pairs ) : obj_decls { decls }

    (               shift and go to state 30


state 9

    (10) decl -> ACTION . ( ident pairs ) statements

    (               shift and go to state 31


state 10

    (63) typestr -> ident .

    DOUBLE_COLON    reduce using rule 63 (typestr -> ident .)
    STAR            reduce using rule 63 (typestr -> ident .)
    IDENT           reduce using rule 63 (typestr -> ident .)
    ,               reduce using rule 63 (typestr -> ident .)
    )               reduce using rule 63 (typestr -> ident .)
    AMP             reduce using rule 63 (typestr -> ident .)
    DOT             reduce using rule 63 (typestr -> ident .)
    [               reduce using rule 63 (typestr -> ident .)
    SEMI            reduce using rule 63 (typestr -> ident .)
    SLASH           reduce using rule 63 (typestr -> ident .)
    MOD             reduce using rule 63 (typestr -> ident .)
    PLUS            reduce using rule 63 (typestr -> ident .)
    DASH            reduce using rule 63 (typestr -> ident .)
    LT              reduce using rule 63 (typestr -> ident .)
    GT              reduce using rule 63 (typestr -> ident .)
    LE              reduce using rule 63 (typestr -> ident .)
    GE              reduce using rule 63 (typestr -> ident .)
    EQ              reduce using rule 63 (typestr -> ident .)
    NE              reduce using rule 63 (typestr -> ident .)
    AND             reduce using rule 63 (typestr -> ident .)
    OR              reduce using rule 63 (typestr -> ident .)
    RIGHTSHIFT      reduce using rule 63 (typestr -> ident .)
    LEFTSHIFT       reduce using rule 63 (typestr -> ident .)
    ]               reduce using rule 63 (typestr -> ident .)
    ASSIGN          reduce using rule 63 (typestr -> ident .)


state 11

    (11) decl -> IN_PORT . ( ident , type , var pairs ) statements

    (               shift and go to state 32


state 12

    (30) obj_decl -> type . ident pairs SEMI
    (31) obj_decl -> type . STAR ident pairs SEMI
    (32) obj_decl -> type . ident ASSIGN expr SEMI
    (33) obj_decl -> type . STAR ident ASSIGN expr SEMI
    (36) func_decl -> type . ident ( params ) pairs SEMI
    (38) func_decl -> type . ident ( types ) pairs SEMI
    (41) func_def -> type . ident ( params ) pairs statements
    (72) ident -> . IDENT

    STAR            shift and go to state 34
    IDENT           shift and go to state 26

    ident                          shift and go to state 33

state 13

    (12) decl -> OUT_PORT . ( ident , type , var pairs ) SEMI

    (               shift and go to state 35


state 14

    (13) decl -> TRANS . ( idents , idents , ident_or_star ) idents
    (14) decl -> TRANS . ( idents , idents ) idents
    (15) decl -> TRANS . ( idents , idents , ident_or_star ) idents idents
    (16) decl -> TRANS . ( idents , idents ) idents idents

    (               shift and go to state 36


state 15

    (17) decl -> EXTERN_TYPE . ( type pairs ) SEMI

    (               shift and go to state 37


state 16

    (18) decl -> GLOBAL . ( type pairs ) { type_members }

    (               shift and go to state 38


state 17

    (19) decl -> STRUCT . ( type pairs ) { type_members }

    (               shift and go to state 39


state 18

    (20) decl -> ENUM . ( type pairs ) { type_enums }

    (               shift and go to state 40


state 19

    (21) decl -> STATE_DECL . ( type pairs ) { type_states }

    (               shift and go to state 41


state 20

    (29) decl -> obj_decl .

    PROTOCOL        reduce using rule 29 (decl -> obj_decl .)
    INCLUDE         reduce using rule 29 (decl -> obj_decl .)
    MACHINE         reduce using rule 29 (decl -> obj_decl .)
    ACTION          reduce using rule 29 (decl -> obj_decl .)
    IN_PORT         reduce using rule 29 (decl -> obj_decl .)
    OUT_PORT        reduce using rule 29 (decl -> obj_decl .)
    TRANS           reduce using rule 29 (decl -> obj_decl .)
    EXTERN_TYPE     reduce using rule 29 (decl -> obj_decl .)
    GLOBAL          reduce using rule 29 (decl -> obj_decl .)
    STRUCT          reduce using rule 29 (decl -> obj_decl .)
    ENUM            reduce using rule 29 (decl -> obj_decl .)
    STATE_DECL      reduce using rule 29 (decl -> obj_decl .)
    VOID            reduce using rule 29 (decl -> obj_decl .)
    IDENT           reduce using rule 29 (decl -> obj_decl .)
    $end            reduce using rule 29 (decl -> obj_decl .)
    }               reduce using rule 29 (decl -> obj_decl .)


state 21

    (34) decl -> func_decl .

    PROTOCOL        reduce using rule 34 (decl -> func_decl .)
    INCLUDE         reduce using rule 34 (decl -> func_decl .)
    MACHINE         reduce using rule 34 (decl -> func_decl .)
    ACTION          reduce using rule 34 (decl -> func_decl .)
    IN_PORT         reduce using rule 34 (decl -> func_decl .)
    OUT_PORT        reduce using rule 34 (decl -> func_decl .)
    TRANS           reduce using rule 34 (decl -> func_decl .)
    EXTERN_TYPE     reduce using rule 34 (decl -> func_decl .)
    GLOBAL          reduce using rule 34 (decl -> func_decl .)
    STRUCT          reduce using rule 34 (decl -> func_decl .)
    ENUM            reduce using rule 34 (decl -> func_decl .)
    STATE_DECL      reduce using rule 34 (decl -> func_decl .)
    VOID            reduce using rule 34 (decl -> func_decl .)
    IDENT           reduce using rule 34 (decl -> func_decl .)
    $end            reduce using rule 34 (decl -> func_decl .)
    }               reduce using rule 34 (decl -> func_decl .)


state 22

    (39) decl -> func_def .

    PROTOCOL        reduce using rule 39 (decl -> func_def .)
    INCLUDE         reduce using rule 39 (decl -> func_def .)
    MACHINE         reduce using rule 39 (decl -> func_def .)
    ACTION          reduce using rule 39 (decl -> func_def .)
    IN_PORT         reduce using rule 39 (decl -> func_def .)
    OUT_PORT        reduce using rule 39 (decl -> func_def .)
    TRANS           reduce using rule 39 (decl -> func_def .)
    EXTERN_TYPE     reduce using rule 39 (decl -> func_def .)
    GLOBAL          reduce using rule 39 (decl -> func_def .)
    STRUCT          reduce using rule 39 (decl -> func_def .)
    ENUM            reduce using rule 39 (decl -> func_def .)
    STATE_DECL      reduce using rule 39 (decl -> func_def .)
    VOID            reduce using rule 39 (decl -> func_def .)
    IDENT           reduce using rule 39 (decl -> func_def .)
    $end            reduce using rule 39 (decl -> func_def .)
    }               reduce using rule 39 (decl -> func_def .)


state 23

    (35) func_decl -> void . ident ( params ) pairs SEMI
    (37) func_decl -> void . ident ( types ) pairs SEMI
    (40) func_def -> void . ident ( params ) pairs statements
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 42

state 24

    (64) type -> typestr .
    (62) typestr -> typestr . DOUBLE_COLON ident

  ! shift/reduce conflict for DOUBLE_COLON resolved as shift
    STAR            reduce using rule 64 (type -> typestr .)
    IDENT           reduce using rule 64 (type -> typestr .)
    ,               reduce using rule 64 (type -> typestr .)
    )               reduce using rule 64 (type -> typestr .)
    AMP             reduce using rule 64 (type -> typestr .)
    DOT             reduce using rule 64 (type -> typestr .)
    [               reduce using rule 64 (type -> typestr .)
    SEMI            reduce using rule 64 (type -> typestr .)
    SLASH           reduce using rule 64 (type -> typestr .)
    MOD             reduce using rule 64 (type -> typestr .)
    PLUS            reduce using rule 64 (type -> typestr .)
    DASH            reduce using rule 64 (type -> typestr .)
    LT              reduce using rule 64 (type -> typestr .)
    GT              reduce using rule 64 (type -> typestr .)
    LE              reduce using rule 64 (type -> typestr .)
    GE              reduce using rule 64 (type -> typestr .)
    EQ              reduce using rule 64 (type -> typestr .)
    NE              reduce using rule 64 (type -> typestr .)
    AND             reduce using rule 64 (type -> typestr .)
    OR              reduce using rule 64 (type -> typestr .)
    RIGHTSHIFT      reduce using rule 64 (type -> typestr .)
    LEFTSHIFT       reduce using rule 64 (type -> typestr .)
    ]               reduce using rule 64 (type -> typestr .)
    ASSIGN          reduce using rule 64 (type -> typestr .)
    DOUBLE_COLON    shift and go to state 43

  ! DOUBLE_COLON    [ reduce using rule 64 (type -> typestr .) ]


state 25

    (65) void -> VOID .

    IDENT           reduce using rule 65 (void -> VOID .)


state 26

    (72) ident -> IDENT .

    DOUBLE_COLON    reduce using rule 72 (ident -> IDENT .)
    STAR            reduce using rule 72 (ident -> IDENT .)
    IDENT           reduce using rule 72 (ident -> IDENT .)
    ASSIGN          reduce using rule 72 (ident -> IDENT .)
    (               reduce using rule 72 (ident -> IDENT .)
    ,               reduce using rule 72 (ident -> IDENT .)
    SEMI            reduce using rule 72 (ident -> IDENT .)
    :               reduce using rule 72 (ident -> IDENT .)
    )               reduce using rule 72 (ident -> IDENT .)
    AMP             reduce using rule 72 (ident -> IDENT .)
    DOT             reduce using rule 72 (ident -> IDENT .)
    [               reduce using rule 72 (ident -> IDENT .)
    SLASH           reduce using rule 72 (ident -> IDENT .)
    MOD             reduce using rule 72 (ident -> IDENT .)
    PLUS            reduce using rule 72 (ident -> IDENT .)
    DASH            reduce using rule 72 (ident -> IDENT .)
    LT              reduce using rule 72 (ident -> IDENT .)
    GT              reduce using rule 72 (ident -> IDENT .)
    LE              reduce using rule 72 (ident -> IDENT .)
    GE              reduce using rule 72 (ident -> IDENT .)
    EQ              reduce using rule 72 (ident -> IDENT .)
    NE              reduce using rule 72 (ident -> IDENT .)
    AND             reduce using rule 72 (ident -> IDENT .)
    OR              reduce using rule 72 (ident -> IDENT .)
    RIGHTSHIFT      reduce using rule 72 (ident -> IDENT .)
    LEFTSHIFT       reduce using rule 72 (ident -> IDENT .)
    ]               reduce using rule 72 (ident -> IDENT .)
    =               reduce using rule 72 (ident -> IDENT .)
    }               reduce using rule 72 (ident -> IDENT .)
    {               reduce using rule 72 (ident -> IDENT .)
    PROTOCOL        reduce using rule 72 (ident -> IDENT .)
    INCLUDE         reduce using rule 72 (ident -> IDENT .)
    MACHINE         reduce using rule 72 (ident -> IDENT .)
    ACTION          reduce using rule 72 (ident -> IDENT .)
    IN_PORT         reduce using rule 72 (ident -> IDENT .)
    OUT_PORT        reduce using rule 72 (ident -> IDENT .)
    TRANS           reduce using rule 72 (ident -> IDENT .)
    EXTERN_TYPE     reduce using rule 72 (ident -> IDENT .)
    GLOBAL          reduce using rule 72 (ident -> IDENT .)
    STRUCT          reduce using rule 72 (ident -> IDENT .)
    ENUM            reduce using rule 72 (ident -> IDENT .)
    STATE_DECL      reduce using rule 72 (ident -> IDENT .)
    VOID            reduce using rule 72 (ident -> IDENT .)
    $end            reduce using rule 72 (ident -> IDENT .)


state 27

    (4) declsx -> decl declsx .

    $end            reduce using rule 4 (declsx -> decl declsx .)
    }               reduce using rule 4 (declsx -> decl declsx .)


state 28

    (6) decl -> PROTOCOL STRING . SEMI

    SEMI            shift and go to state 44


state 29

    (7) decl -> INCLUDE STRING . SEMI

    SEMI            shift and go to state 45


state 30

    (8) decl -> MACHINE ( . enumeration ) : obj_decls { decls }
    (9) decl -> MACHINE ( . enumeration pairs ) : obj_decls { decls }
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    enumeration                    shift and go to state 46
    ident                          shift and go to state 47

state 31

    (10) decl -> ACTION ( . ident pairs ) statements
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 48

state 32

    (11) decl -> IN_PORT ( . ident , type , var pairs ) statements
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 49

state 33

    (30) obj_decl -> type ident . pairs SEMI
    (32) obj_decl -> type ident . ASSIGN expr SEMI
    (36) func_decl -> type ident . ( params ) pairs SEMI
    (38) func_decl -> type ident . ( types ) pairs SEMI
    (41) func_def -> type ident . ( params ) pairs statements
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ASSIGN          shift and go to state 51
    (               shift and go to state 52
    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 50
    empty                          shift and go to state 54

state 34

    (31) obj_decl -> type STAR . ident pairs SEMI
    (33) obj_decl -> type STAR . ident ASSIGN expr SEMI
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 55

state 35

    (12) decl -> OUT_PORT ( . ident , type , var pairs ) SEMI
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 56

state 36

    (13) decl -> TRANS ( . idents , idents , ident_or_star ) idents
    (14) decl -> TRANS ( . idents , idents ) idents
    (15) decl -> TRANS ( . idents , idents , ident_or_star ) idents idents
    (16) decl -> TRANS ( . idents , idents ) idents idents
    (66) idents -> . { identx }
    (67) idents -> . ident
    (72) ident -> . IDENT

    {               shift and go to state 58
    IDENT           shift and go to state 26

    idents                         shift and go to state 57
    ident                          shift and go to state 59

state 37

    (17) decl -> EXTERN_TYPE ( . type pairs ) SEMI
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 60
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 38

    (18) decl -> GLOBAL ( . type pairs ) { type_members }
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 61
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 39

    (19) decl -> STRUCT ( . type pairs ) { type_members }
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 62
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 40

    (20) decl -> ENUM ( . type pairs ) { type_enums }
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 63
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 41

    (21) decl -> STATE_DECL ( . type pairs ) { type_states }
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 64
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 42

    (35) func_decl -> void ident . ( params ) pairs SEMI
    (37) func_decl -> void ident . ( types ) pairs SEMI
    (40) func_def -> void ident . ( params ) pairs statements

    (               shift and go to state 65


state 43

    (62) typestr -> typestr DOUBLE_COLON . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 66

state 44

    (6) decl -> PROTOCOL STRING SEMI .

    PROTOCOL        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    INCLUDE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    MACHINE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ACTION          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IN_PORT         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    OUT_PORT        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    TRANS           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    EXTERN_TYPE     reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    GLOBAL          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STRUCT          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ENUM            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STATE_DECL      reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    VOID            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IDENT           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    $end            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    }               reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)


state 45

    (7) decl -> INCLUDE STRING SEMI .

    PROTOCOL        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    INCLUDE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    MACHINE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ACTION          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IN_PORT         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    OUT_PORT        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    TRANS           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    EXTERN_TYPE     reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    GLOBAL          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STRUCT          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ENUM            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STATE_DECL      reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    VOID            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IDENT           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    $end            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    }               reduce using rule 7 (decl -> INCLUDE STRING SEMI .)


state 46

    (8) decl -> MACHINE ( enumeration . ) : obj_decls { decls }
    (9) decl -> MACHINE ( enumeration . pairs ) : obj_decls { decls }
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 67
    ,               shift and go to state 53

  ! )               [ reduce using rule 2 (empty -> .) ]

    pairs                          shift and go to state 68
    empty                          shift and go to state 54

state 47

    (147) enumeration -> ident . : ident

    :               shift and go to state 69


state 48

    (10) decl -> ACTION ( ident . pairs ) statements
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 70
    empty                          shift and go to state 54

state 49

    (11) decl -> IN_PORT ( ident . , type , var pairs ) statements

    ,               shift and go to state 71


state 50

    (30) obj_decl -> type ident pairs . SEMI

    SEMI            shift and go to state 72


state 51

    (32) obj_decl -> type ident ASSIGN . expr SEMI
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    type                           shift and go to state 73
    ident                          shift and go to state 74
    expr                           shift and go to state 75
    aexpr                          shift and go to state 76
    var                            shift and go to state 84
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 52

    (36) func_decl -> type ident ( . params ) pairs SEMI
    (38) func_decl -> type ident ( . types ) pairs SEMI
    (41) func_def -> type ident ( . params ) pairs statements
    (48) params -> . param , params
    (49) params -> . param
    (50) params -> . empty
    (59) types -> . type , types
    (60) types -> . type
    (61) types -> . empty
    (51) param -> . type ident
    (52) param -> . type STAR ident
    (53) param -> . type AMP ident
    (54) param -> . CONST type AMP ident
    (55) param -> . type STAR ident ASSIGN STRING
    (56) param -> . type ident ASSIGN NUMBER
    (57) param -> . type ident ASSIGN LIT_BOOL
    (58) param -> . type ident ASSIGN STRING
    (2) empty -> .
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    CONST           shift and go to state 99
    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    type                           shift and go to state 94
    ident                          shift and go to state 10
    params                         shift and go to state 95
    types                          shift and go to state 96
    param                          shift and go to state 97
    empty                          shift and go to state 98
    typestr                        shift and go to state 24

state 53

    (75) pairs -> , . pairsx
    (77) pairsx -> . pair , pairsx
    (78) pairsx -> . pair
    (79) pair -> . ident = STRING
    (80) pair -> . ident = ident
    (81) pair -> . ident = NUMBER
    (82) pair -> . STRING
    (72) ident -> . IDENT

    STRING          shift and go to state 103
    IDENT           shift and go to state 26

    pairsx                         shift and go to state 100
    pair                           shift and go to state 101
    ident                          shift and go to state 102

state 54

    (76) pairs -> empty .

    SEMI            reduce using rule 76 (pairs -> empty .)
    )               reduce using rule 76 (pairs -> empty .)
    {               reduce using rule 76 (pairs -> empty .)


state 55

    (31) obj_decl -> type STAR ident . pairs SEMI
    (33) obj_decl -> type STAR ident . ASSIGN expr SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ASSIGN          shift and go to state 105
    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 104
    empty                          shift and go to state 54

state 56

    (12) decl -> OUT_PORT ( ident . , type , var pairs ) SEMI

    ,               shift and go to state 106


state 57

    (13) decl -> TRANS ( idents . , idents , ident_or_star ) idents
    (14) decl -> TRANS ( idents . , idents ) idents
    (15) decl -> TRANS ( idents . , idents , ident_or_star ) idents idents
    (16) decl -> TRANS ( idents . , idents ) idents idents

    ,               shift and go to state 107


state 58

    (66) idents -> { . identx }
    (68) identx -> . ident SEMI identx
    (69) identx -> . ident , identx
    (70) identx -> . ident identx
    (71) identx -> . empty
    (72) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 26
    }               reduce using rule 2 (empty -> .)

    identx                         shift and go to state 108
    ident                          shift and go to state 109
    empty                          shift and go to state 110

state 59

    (67) idents -> ident .

    ,               reduce using rule 67 (idents -> ident .)
    )               reduce using rule 67 (idents -> ident .)
    {               reduce using rule 67 (idents -> ident .)
    IDENT           reduce using rule 67 (idents -> ident .)
    PROTOCOL        reduce using rule 67 (idents -> ident .)
    INCLUDE         reduce using rule 67 (idents -> ident .)
    MACHINE         reduce using rule 67 (idents -> ident .)
    ACTION          reduce using rule 67 (idents -> ident .)
    IN_PORT         reduce using rule 67 (idents -> ident .)
    OUT_PORT        reduce using rule 67 (idents -> ident .)
    TRANS           reduce using rule 67 (idents -> ident .)
    EXTERN_TYPE     reduce using rule 67 (idents -> ident .)
    GLOBAL          reduce using rule 67 (idents -> ident .)
    STRUCT          reduce using rule 67 (idents -> ident .)
    ENUM            reduce using rule 67 (idents -> ident .)
    STATE_DECL      reduce using rule 67 (idents -> ident .)
    VOID            reduce using rule 67 (idents -> ident .)
    $end            reduce using rule 67 (idents -> ident .)
    }               reduce using rule 67 (idents -> ident .)


state 60

    (17) decl -> EXTERN_TYPE ( type . pairs ) SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 111
    empty                          shift and go to state 54

state 61

    (18) decl -> GLOBAL ( type . pairs ) { type_members }
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 112
    empty                          shift and go to state 54

state 62

    (19) decl -> STRUCT ( type . pairs ) { type_members }
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 113
    empty                          shift and go to state 54

state 63

    (20) decl -> ENUM ( type . pairs ) { type_enums }
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 114
    empty                          shift and go to state 54

state 64

    (21) decl -> STATE_DECL ( type . pairs ) { type_states }
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 115
    empty                          shift and go to state 54

state 65

    (35) func_decl -> void ident ( . params ) pairs SEMI
    (37) func_decl -> void ident ( . types ) pairs SEMI
    (40) func_def -> void ident ( . params ) pairs statements
    (48) params -> . param , params
    (49) params -> . param
    (50) params -> . empty
    (59) types -> . type , types
    (60) types -> . type
    (61) types -> . empty
    (51) param -> . type ident
    (52) param -> . type STAR ident
    (53) param -> . type AMP ident
    (54) param -> . CONST type AMP ident
    (55) param -> . type STAR ident ASSIGN STRING
    (56) param -> . type ident ASSIGN NUMBER
    (57) param -> . type ident ASSIGN LIT_BOOL
    (58) param -> . type ident ASSIGN STRING
    (2) empty -> .
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    CONST           shift and go to state 99
    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    ident                          shift and go to state 10
    params                         shift and go to state 116
    types                          shift and go to state 117
    param                          shift and go to state 97
    empty                          shift and go to state 98
    type                           shift and go to state 94
    typestr                        shift and go to state 24

state 66

    (62) typestr -> typestr DOUBLE_COLON ident .

    DOUBLE_COLON    reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    STAR            reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    IDENT           reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    ,               reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    )               reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    AMP             reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    DOT             reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    [               reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    SEMI            reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    SLASH           reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    MOD             reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    PLUS            reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    DASH            reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    LT              reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    GT              reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    LE              reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    GE              reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    EQ              reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    NE              reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    AND             reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    OR              reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    RIGHTSHIFT      reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    LEFTSHIFT       reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    ]               reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)
    ASSIGN          reduce using rule 62 (typestr -> typestr DOUBLE_COLON ident .)


state 67

    (8) decl -> MACHINE ( enumeration ) . : obj_decls { decls }

    :               shift and go to state 118


state 68

    (9) decl -> MACHINE ( enumeration pairs . ) : obj_decls { decls }

    )               shift and go to state 119


state 69

    (147) enumeration -> ident : . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 120

state 70

    (10) decl -> ACTION ( ident pairs . ) statements

    )               shift and go to state 121


state 71

    (11) decl -> IN_PORT ( ident , . type , var pairs ) statements
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 10
    type                           shift and go to state 122
    typestr                        shift and go to state 24

state 72

    (30) obj_decl -> type ident pairs SEMI .

    PROTOCOL        reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    INCLUDE         reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    MACHINE         reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    ACTION          reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    IN_PORT         reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    OUT_PORT        reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    TRANS           reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    EXTERN_TYPE     reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    GLOBAL          reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    STRUCT          reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    ENUM            reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    STATE_DECL      reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    VOID            reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    IDENT           reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    $end            reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    }               reduce using rule 30 (obj_decl -> type ident pairs SEMI .)
    {               reduce using rule 30 (obj_decl -> type ident pairs SEMI .)


state 73

    (110) aexpr -> type . ident
    (119) aexpr -> type . DOUBLE_COLON ident ( exprs )
    (72) ident -> . IDENT

    DOUBLE_COLON    shift and go to state 124
    IDENT           shift and go to state 26

    ident                          shift and go to state 123

state 74

    (113) aexpr -> ident . ( exprs )
    (148) var -> ident .
    (147) enumeration -> ident . : ident
    (63) typestr -> ident .

    (               shift and go to state 125
    DOT             reduce using rule 148 (var -> ident .)
    [               reduce using rule 148 (var -> ident .)
    SEMI            reduce using rule 148 (var -> ident .)
    STAR            reduce using rule 148 (var -> ident .)
    SLASH           reduce using rule 148 (var -> ident .)
    MOD             reduce using rule 148 (var -> ident .)
    PLUS            reduce using rule 148 (var -> ident .)
    DASH            reduce using rule 148 (var -> ident .)
    LT              reduce using rule 148 (var -> ident .)
    GT              reduce using rule 148 (var -> ident .)
    LE              reduce using rule 148 (var -> ident .)
    GE              reduce using rule 148 (var -> ident .)
    EQ              reduce using rule 148 (var -> ident .)
    NE              reduce using rule 148 (var -> ident .)
    AND             reduce using rule 148 (var -> ident .)
    OR              reduce using rule 148 (var -> ident .)
    RIGHTSHIFT      reduce using rule 148 (var -> ident .)
    LEFTSHIFT       reduce using rule 148 (var -> ident .)
    )               reduce using rule 148 (var -> ident .)
    ,               reduce using rule 148 (var -> ident .)
    ]               reduce using rule 148 (var -> ident .)
    ASSIGN          reduce using rule 148 (var -> ident .)
    :               shift and go to state 69
    DOUBLE_COLON    reduce using rule 63 (typestr -> ident .)
    IDENT           reduce using rule 63 (typestr -> ident .)


state 75

    (32) obj_decl -> type ident ASSIGN expr . SEMI
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 126
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 76

    (120) expr -> aexpr .
    (116) aexpr -> aexpr . DOT ident
    (117) aexpr -> aexpr . DOT ident ( exprs )
    (118) aexpr -> aexpr . [ exprs ]

    SEMI            reduce using rule 120 (expr -> aexpr .)
    STAR            reduce using rule 120 (expr -> aexpr .)
    SLASH           reduce using rule 120 (expr -> aexpr .)
    MOD             reduce using rule 120 (expr -> aexpr .)
    PLUS            reduce using rule 120 (expr -> aexpr .)
    DASH            reduce using rule 120 (expr -> aexpr .)
    LT              reduce using rule 120 (expr -> aexpr .)
    GT              reduce using rule 120 (expr -> aexpr .)
    LE              reduce using rule 120 (expr -> aexpr .)
    GE              reduce using rule 120 (expr -> aexpr .)
    EQ              reduce using rule 120 (expr -> aexpr .)
    NE              reduce using rule 120 (expr -> aexpr .)
    AND             reduce using rule 120 (expr -> aexpr .)
    OR              reduce using rule 120 (expr -> aexpr .)
    RIGHTSHIFT      reduce using rule 120 (expr -> aexpr .)
    LEFTSHIFT       reduce using rule 120 (expr -> aexpr .)
    )               reduce using rule 120 (expr -> aexpr .)
    ,               reduce using rule 120 (expr -> aexpr .)
    ]               reduce using rule 120 (expr -> aexpr .)
    ASSIGN          reduce using rule 120 (expr -> aexpr .)
    DOT             shift and go to state 142
    [               shift and go to state 143


state 77

    (139) expr -> DASH . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 144
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 78

    (136) expr -> NOT . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 145
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 79

    (137) expr -> INCR . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 146
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 80

    (138) expr -> DECR . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 147
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 81

    (107) aexpr -> STATIC_CAST . ( type , expr )
    (108) aexpr -> STATIC_CAST . ( type , STRING , expr )

    (               shift and go to state 148


state 82

    (140) aexpr -> ( . expr )
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 149
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 83

    (143) literal -> STRING .

    DOT             reduce using rule 143 (literal -> STRING .)
    [               reduce using rule 143 (literal -> STRING .)
    SEMI            reduce using rule 143 (literal -> STRING .)
    STAR            reduce using rule 143 (literal -> STRING .)
    SLASH           reduce using rule 143 (literal -> STRING .)
    MOD             reduce using rule 143 (literal -> STRING .)
    PLUS            reduce using rule 143 (literal -> STRING .)
    DASH            reduce using rule 143 (literal -> STRING .)
    LT              reduce using rule 143 (literal -> STRING .)
    GT              reduce using rule 143 (literal -> STRING .)
    LE              reduce using rule 143 (literal -> STRING .)
    GE              reduce using rule 143 (literal -> STRING .)
    EQ              reduce using rule 143 (literal -> STRING .)
    NE              reduce using rule 143 (literal -> STRING .)
    AND             reduce using rule 143 (literal -> STRING .)
    OR              reduce using rule 143 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 143 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 143 (literal -> STRING .)
    )               reduce using rule 143 (literal -> STRING .)
    ,               reduce using rule 143 (literal -> STRING .)
    ]               reduce using rule 143 (literal -> STRING .)
    ASSIGN          reduce using rule 143 (literal -> STRING .)


state 84

    (109) aexpr -> var .

    DOT             reduce using rule 109 (aexpr -> var .)
    [               reduce using rule 109 (aexpr -> var .)
    SEMI            reduce using rule 109 (aexpr -> var .)
    STAR            reduce using rule 109 (aexpr -> var .)
    SLASH           reduce using rule 109 (aexpr -> var .)
    MOD             reduce using rule 109 (aexpr -> var .)
    PLUS            reduce using rule 109 (aexpr -> var .)
    DASH            reduce using rule 109 (aexpr -> var .)
    LT              reduce using rule 109 (aexpr -> var .)
    GT              reduce using rule 109 (aexpr -> var .)
    LE              reduce using rule 109 (aexpr -> var .)
    GE              reduce using rule 109 (aexpr -> var .)
    EQ              reduce using rule 109 (aexpr -> var .)
    NE              reduce using rule 109 (aexpr -> var .)
    AND             reduce using rule 109 (aexpr -> var .)
    OR              reduce using rule 109 (aexpr -> var .)
    RIGHTSHIFT      reduce using rule 109 (aexpr -> var .)
    LEFTSHIFT       reduce using rule 109 (aexpr -> var .)
    )               reduce using rule 109 (aexpr -> var .)
    ,               reduce using rule 109 (aexpr -> var .)
    ]               reduce using rule 109 (aexpr -> var .)
    ASSIGN          reduce using rule 109 (aexpr -> var .)


state 85

    (111) aexpr -> literal .

    DOT             reduce using rule 111 (aexpr -> literal .)
    [               reduce using rule 111 (aexpr -> literal .)
    SEMI            reduce using rule 111 (aexpr -> literal .)
    STAR            reduce using rule 111 (aexpr -> literal .)
    SLASH           reduce using rule 111 (aexpr -> literal .)
    MOD             reduce using rule 111 (aexpr -> literal .)
    PLUS            reduce using rule 111 (aexpr -> literal .)
    DASH            reduce using rule 111 (aexpr -> literal .)
    LT              reduce using rule 111 (aexpr -> literal .)
    GT              reduce using rule 111 (aexpr -> literal .)
    LE              reduce using rule 111 (aexpr -> literal .)
    GE              reduce using rule 111 (aexpr -> literal .)
    EQ              reduce using rule 111 (aexpr -> literal .)
    NE              reduce using rule 111 (aexpr -> literal .)
    AND             reduce using rule 111 (aexpr -> literal .)
    OR              reduce using rule 111 (aexpr -> literal .)
    RIGHTSHIFT      reduce using rule 111 (aexpr -> literal .)
    LEFTSHIFT       reduce using rule 111 (aexpr -> literal .)
    )               reduce using rule 111 (aexpr -> literal .)
    ,               reduce using rule 111 (aexpr -> literal .)
    ]               reduce using rule 111 (aexpr -> literal .)
    ASSIGN          reduce using rule 111 (aexpr -> literal .)


state 86

    (112) aexpr -> enumeration .

    DOT             reduce using rule 112 (aexpr -> enumeration .)
    [               reduce using rule 112 (aexpr -> enumeration .)
    SEMI            reduce using rule 112 (aexpr -> enumeration .)
    STAR            reduce using rule 112 (aexpr -> enumeration .)
    SLASH           reduce using rule 112 (aexpr -> enumeration .)
    MOD             reduce using rule 112 (aexpr -> enumeration .)
    PLUS            reduce using rule 112 (aexpr -> enumeration .)
    DASH            reduce using rule 112 (aexpr -> enumeration .)
    LT              reduce using rule 112 (aexpr -> enumeration .)
    GT              reduce using rule 112 (aexpr -> enumeration .)
    LE              reduce using rule 112 (aexpr -> enumeration .)
    GE              reduce using rule 112 (aexpr -> enumeration .)
    EQ              reduce using rule 112 (aexpr -> enumeration .)
    NE              reduce using rule 112 (aexpr -> enumeration .)
    AND             reduce using rule 112 (aexpr -> enumeration .)
    OR              reduce using rule 112 (aexpr -> enumeration .)
    RIGHTSHIFT      reduce using rule 112 (aexpr -> enumeration .)
    LEFTSHIFT       reduce using rule 112 (aexpr -> enumeration .)
    )               reduce using rule 112 (aexpr -> enumeration .)
    ,               reduce using rule 112 (aexpr -> enumeration .)
    ]               reduce using rule 112 (aexpr -> enumeration .)
    ASSIGN          reduce using rule 112 (aexpr -> enumeration .)


state 87

    (114) aexpr -> NEW . type
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 150
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 88

    (115) aexpr -> OOD .

    DOT             reduce using rule 115 (aexpr -> OOD .)
    [               reduce using rule 115 (aexpr -> OOD .)
    SEMI            reduce using rule 115 (aexpr -> OOD .)
    STAR            reduce using rule 115 (aexpr -> OOD .)
    SLASH           reduce using rule 115 (aexpr -> OOD .)
    MOD             reduce using rule 115 (aexpr -> OOD .)
    PLUS            reduce using rule 115 (aexpr -> OOD .)
    DASH            reduce using rule 115 (aexpr -> OOD .)
    LT              reduce using rule 115 (aexpr -> OOD .)
    GT              reduce using rule 115 (aexpr -> OOD .)
    LE              reduce using rule 115 (aexpr -> OOD .)
    GE              reduce using rule 115 (aexpr -> OOD .)
    EQ              reduce using rule 115 (aexpr -> OOD .)
    NE              reduce using rule 115 (aexpr -> OOD .)
    AND             reduce using rule 115 (aexpr -> OOD .)
    OR              reduce using rule 115 (aexpr -> OOD .)
    RIGHTSHIFT      reduce using rule 115 (aexpr -> OOD .)
    LEFTSHIFT       reduce using rule 115 (aexpr -> OOD .)
    )               reduce using rule 115 (aexpr -> OOD .)
    ,               reduce using rule 115 (aexpr -> OOD .)
    ]               reduce using rule 115 (aexpr -> OOD .)
    ASSIGN          reduce using rule 115 (aexpr -> OOD .)


state 89

    (141) aexpr -> IS_VALID . ( expr )

    (               shift and go to state 151


state 90

    (142) aexpr -> IS_INVALID . ( expr )

    (               shift and go to state 152


state 91

    (144) literal -> NUMBER .

    DOT             reduce using rule 144 (literal -> NUMBER .)
    [               reduce using rule 144 (literal -> NUMBER .)
    SEMI            reduce using rule 144 (literal -> NUMBER .)
    STAR            reduce using rule 144 (literal -> NUMBER .)
    SLASH           reduce using rule 144 (literal -> NUMBER .)
    MOD             reduce using rule 144 (literal -> NUMBER .)
    PLUS            reduce using rule 144 (literal -> NUMBER .)
    DASH            reduce using rule 144 (literal -> NUMBER .)
    LT              reduce using rule 144 (literal -> NUMBER .)
    GT              reduce using rule 144 (literal -> NUMBER .)
    LE              reduce using rule 144 (literal -> NUMBER .)
    GE              reduce using rule 144 (literal -> NUMBER .)
    EQ              reduce using rule 144 (literal -> NUMBER .)
    NE              reduce using rule 144 (literal -> NUMBER .)
    AND             reduce using rule 144 (literal -> NUMBER .)
    OR              reduce using rule 144 (literal -> NUMBER .)
    RIGHTSHIFT      reduce using rule 144 (literal -> NUMBER .)
    LEFTSHIFT       reduce using rule 144 (literal -> NUMBER .)
    )               reduce using rule 144 (literal -> NUMBER .)
    ,               reduce using rule 144 (literal -> NUMBER .)
    ]               reduce using rule 144 (literal -> NUMBER .)
    ASSIGN          reduce using rule 144 (literal -> NUMBER .)


state 92

    (145) literal -> FLOATNUMBER .

    DOT             reduce using rule 145 (literal -> FLOATNUMBER .)
    [               reduce using rule 145 (literal -> FLOATNUMBER .)
    SEMI            reduce using rule 145 (literal -> FLOATNUMBER .)
    STAR            reduce using rule 145 (literal -> FLOATNUMBER .)
    SLASH           reduce using rule 145 (literal -> FLOATNUMBER .)
    MOD             reduce using rule 145 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 145 (literal -> FLOATNUMBER .)
    DASH            reduce using rule 145 (literal -> FLOATNUMBER .)
    LT              reduce using rule 145 (literal -> FLOATNUMBER .)
    GT              reduce using rule 145 (literal -> FLOATNUMBER .)
    LE              reduce using rule 145 (literal -> FLOATNUMBER .)
    GE              reduce using rule 145 (literal -> FLOATNUMBER .)
    EQ              reduce using rule 145 (literal -> FLOATNUMBER .)
    NE              reduce using rule 145 (literal -> FLOATNUMBER .)
    AND             reduce using rule 145 (literal -> FLOATNUMBER .)
    OR              reduce using rule 145 (literal -> FLOATNUMBER .)
    RIGHTSHIFT      reduce using rule 145 (literal -> FLOATNUMBER .)
    LEFTSHIFT       reduce using rule 145 (literal -> FLOATNUMBER .)
    )               reduce using rule 145 (literal -> FLOATNUMBER .)
    ,               reduce using rule 145 (literal -> FLOATNUMBER .)
    ]               reduce using rule 145 (literal -> FLOATNUMBER .)
    ASSIGN          reduce using rule 145 (literal -> FLOATNUMBER .)


state 93

    (146) literal -> LIT_BOOL .

    DOT             reduce using rule 146 (literal -> LIT_BOOL .)
    [               reduce using rule 146 (literal -> LIT_BOOL .)
    SEMI            reduce using rule 146 (literal -> LIT_BOOL .)
    STAR            reduce using rule 146 (literal -> LIT_BOOL .)
    SLASH           reduce using rule 146 (literal -> LIT_BOOL .)
    MOD             reduce using rule 146 (literal -> LIT_BOOL .)
    PLUS            reduce using rule 146 (literal -> LIT_BOOL .)
    DASH            reduce using rule 146 (literal -> LIT_BOOL .)
    LT              reduce using rule 146 (literal -> LIT_BOOL .)
    GT              reduce using rule 146 (literal -> LIT_BOOL .)
    LE              reduce using rule 146 (literal -> LIT_BOOL .)
    GE              reduce using rule 146 (literal -> LIT_BOOL .)
    EQ              reduce using rule 146 (literal -> LIT_BOOL .)
    NE              reduce using rule 146 (literal -> LIT_BOOL .)
    AND             reduce using rule 146 (literal -> LIT_BOOL .)
    OR              reduce using rule 146 (literal -> LIT_BOOL .)
    RIGHTSHIFT      reduce using rule 146 (literal -> LIT_BOOL .)
    LEFTSHIFT       reduce using rule 146 (literal -> LIT_BOOL .)
    )               reduce using rule 146 (literal -> LIT_BOOL .)
    ,               reduce using rule 146 (literal -> LIT_BOOL .)
    ]               reduce using rule 146 (literal -> LIT_BOOL .)
    ASSIGN          reduce using rule 146 (literal -> LIT_BOOL .)


state 94

    (59) types -> type . , types
    (60) types -> type .
    (51) param -> type . ident
    (52) param -> type . STAR ident
    (53) param -> type . AMP ident
    (55) param -> type . STAR ident ASSIGN STRING
    (56) param -> type . ident ASSIGN NUMBER
    (57) param -> type . ident ASSIGN LIT_BOOL
    (58) param -> type . ident ASSIGN STRING
    (72) ident -> . IDENT

    ,               shift and go to state 153
    )               reduce using rule 60 (types -> type .)
    STAR            shift and go to state 155
    AMP             shift and go to state 156
    IDENT           shift and go to state 26

    ident                          shift and go to state 154

state 95

    (36) func_decl -> type ident ( params . ) pairs SEMI
    (41) func_def -> type ident ( params . ) pairs statements

    )               shift and go to state 157


state 96

    (38) func_decl -> type ident ( types . ) pairs SEMI

    )               shift and go to state 158


state 97

    (48) params -> param . , params
    (49) params -> param .

    ,               shift and go to state 159
    )               reduce using rule 49 (params -> param .)


state 98

    (50) params -> empty .
    (61) types -> empty .

  ! reduce/reduce conflict for ) resolved using rule 50 (params -> empty .)
    )               reduce using rule 50 (params -> empty .)

  ! )               [ reduce using rule 61 (types -> empty .) ]


state 99

    (54) param -> CONST . type AMP ident
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 160
    ident                          shift and go to state 10
    typestr                        shift and go to state 24

state 100

    (75) pairs -> , pairsx .

    SEMI            reduce using rule 75 (pairs -> , pairsx .)
    )               reduce using rule 75 (pairs -> , pairsx .)
    {               reduce using rule 75 (pairs -> , pairsx .)


state 101

    (77) pairsx -> pair . , pairsx
    (78) pairsx -> pair .

    ,               shift and go to state 161
    SEMI            reduce using rule 78 (pairsx -> pair .)
    )               reduce using rule 78 (pairsx -> pair .)
    {               reduce using rule 78 (pairsx -> pair .)


state 102

    (79) pair -> ident . = STRING
    (80) pair -> ident . = ident
    (81) pair -> ident . = NUMBER

    =               shift and go to state 162


state 103

    (82) pair -> STRING .

    ,               reduce using rule 82 (pair -> STRING .)
    SEMI            reduce using rule 82 (pair -> STRING .)
    )               reduce using rule 82 (pair -> STRING .)
    {               reduce using rule 82 (pair -> STRING .)


state 104

    (31) obj_decl -> type STAR ident pairs . SEMI

    SEMI            shift and go to state 163


state 105

    (33) obj_decl -> type STAR ident ASSIGN . expr SEMI
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    type                           shift and go to state 73
    ident                          shift and go to state 74
    expr                           shift and go to state 164
    aexpr                          shift and go to state 76
    var                            shift and go to state 84
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 106

    (12) decl -> OUT_PORT ( ident , . type , var pairs ) SEMI
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 10
    type                           shift and go to state 165
    typestr                        shift and go to state 24

state 107

    (13) decl -> TRANS ( idents , . idents , ident_or_star ) idents
    (14) decl -> TRANS ( idents , . idents ) idents
    (15) decl -> TRANS ( idents , . idents , ident_or_star ) idents idents
    (16) decl -> TRANS ( idents , . idents ) idents idents
    (66) idents -> . { identx }
    (67) idents -> . ident
    (72) ident -> . IDENT

    {               shift and go to state 58
    IDENT           shift and go to state 26

    idents                         shift and go to state 166
    ident                          shift and go to state 59

state 108

    (66) idents -> { identx . }

    }               shift and go to state 167


state 109

    (68) identx -> ident . SEMI identx
    (69) identx -> ident . , identx
    (70) identx -> ident . identx
    (68) identx -> . ident SEMI identx
    (69) identx -> . ident , identx
    (70) identx -> . ident identx
    (71) identx -> . empty
    (72) ident -> . IDENT
    (2) empty -> .

    SEMI            shift and go to state 168
    ,               shift and go to state 170
    IDENT           shift and go to state 26
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 109
    identx                         shift and go to state 169
    empty                          shift and go to state 110

state 110

    (71) identx -> empty .

    }               reduce using rule 71 (identx -> empty .)


state 111

    (17) decl -> EXTERN_TYPE ( type pairs . ) SEMI

    )               shift and go to state 171


state 112

    (18) decl -> GLOBAL ( type pairs . ) { type_members }

    )               shift and go to state 172


state 113

    (19) decl -> STRUCT ( type pairs . ) { type_members }

    )               shift and go to state 173


state 114

    (20) decl -> ENUM ( type pairs . ) { type_enums }

    )               shift and go to state 174


state 115

    (21) decl -> STATE_DECL ( type pairs . ) { type_states }

    )               shift and go to state 175


state 116

    (35) func_decl -> void ident ( params . ) pairs SEMI
    (40) func_def -> void ident ( params . ) pairs statements

    )               shift and go to state 176


state 117

    (37) func_decl -> void ident ( types . ) pairs SEMI

    )               shift and go to state 177


state 118

    (8) decl -> MACHINE ( enumeration ) : . obj_decls { decls }
    (22) obj_decls -> . obj_decl obj_decls
    (23) obj_decls -> . empty
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (2) empty -> .
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    obj_decls                      shift and go to state 178
    obj_decl                       shift and go to state 179
    empty                          shift and go to state 180
    type                           shift and go to state 181
    ident                          shift and go to state 10
    typestr                        shift and go to state 24

state 119

    (9) decl -> MACHINE ( enumeration pairs ) . : obj_decls { decls }

    :               shift and go to state 182


state 120

    (147) enumeration -> ident : ident .

    )               reduce using rule 147 (enumeration -> ident : ident .)
    ,               reduce using rule 147 (enumeration -> ident : ident .)
    DOT             reduce using rule 147 (enumeration -> ident : ident .)
    [               reduce using rule 147 (enumeration -> ident : ident .)
    SEMI            reduce using rule 147 (enumeration -> ident : ident .)
    STAR            reduce using rule 147 (enumeration -> ident : ident .)
    SLASH           reduce using rule 147 (enumeration -> ident : ident .)
    MOD             reduce using rule 147 (enumeration -> ident : ident .)
    PLUS            reduce using rule 147 (enumeration -> ident : ident .)
    DASH            reduce using rule 147 (enumeration -> ident : ident .)
    LT              reduce using rule 147 (enumeration -> ident : ident .)
    GT              reduce using rule 147 (enumeration -> ident : ident .)
    LE              reduce using rule 147 (enumeration -> ident : ident .)
    GE              reduce using rule 147 (enumeration -> ident : ident .)
    EQ              reduce using rule 147 (enumeration -> ident : ident .)
    NE              reduce using rule 147 (enumeration -> ident : ident .)
    AND             reduce using rule 147 (enumeration -> ident : ident .)
    OR              reduce using rule 147 (enumeration -> ident : ident .)
    RIGHTSHIFT      reduce using rule 147 (enumeration -> ident : ident .)
    LEFTSHIFT       reduce using rule 147 (enumeration -> ident : ident .)
    ]               reduce using rule 147 (enumeration -> ident : ident .)
    ASSIGN          reduce using rule 147 (enumeration -> ident : ident .)


state 121

    (10) decl -> ACTION ( ident pairs ) . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    {               shift and go to state 184

    statements                     shift and go to state 183

state 122

    (11) decl -> IN_PORT ( ident , type . , var pairs ) statements

    ,               shift and go to state 185


state 123

    (110) aexpr -> type ident .

    DOT             reduce using rule 110 (aexpr -> type ident .)
    [               reduce using rule 110 (aexpr -> type ident .)
    SEMI            reduce using rule 110 (aexpr -> type ident .)
    STAR            reduce using rule 110 (aexpr -> type ident .)
    SLASH           reduce using rule 110 (aexpr -> type ident .)
    MOD             reduce using rule 110 (aexpr -> type ident .)
    PLUS            reduce using rule 110 (aexpr -> type ident .)
    DASH            reduce using rule 110 (aexpr -> type ident .)
    LT              reduce using rule 110 (aexpr -> type ident .)
    GT              reduce using rule 110 (aexpr -> type ident .)
    LE              reduce using rule 110 (aexpr -> type ident .)
    GE              reduce using rule 110 (aexpr -> type ident .)
    EQ              reduce using rule 110 (aexpr -> type ident .)
    NE              reduce using rule 110 (aexpr -> type ident .)
    AND             reduce using rule 110 (aexpr -> type ident .)
    OR              reduce using rule 110 (aexpr -> type ident .)
    RIGHTSHIFT      reduce using rule 110 (aexpr -> type ident .)
    LEFTSHIFT       reduce using rule 110 (aexpr -> type ident .)
    )               reduce using rule 110 (aexpr -> type ident .)
    ,               reduce using rule 110 (aexpr -> type ident .)
    ]               reduce using rule 110 (aexpr -> type ident .)
    ASSIGN          reduce using rule 110 (aexpr -> type ident .)


state 124

    (119) aexpr -> type DOUBLE_COLON . ident ( exprs )
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 186

state 125

    (113) aexpr -> ident ( . exprs )
    (87) exprs -> . expr , exprs
    (88) exprs -> . expr
    (89) exprs -> . empty
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (2) empty -> .
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    ident                          shift and go to state 74
    exprs                          shift and go to state 187
    expr                           shift and go to state 188
    empty                          shift and go to state 189
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 126

    (32) obj_decl -> type ident ASSIGN expr SEMI .

    PROTOCOL        reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    INCLUDE         reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    MACHINE         reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    ACTION          reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    IN_PORT         reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    OUT_PORT        reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    TRANS           reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    EXTERN_TYPE     reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    GLOBAL          reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    STRUCT          reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    ENUM            reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    STATE_DECL      reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    VOID            reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    IDENT           reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    $end            reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    }               reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)
    {               reduce using rule 32 (obj_decl -> type ident ASSIGN expr SEMI .)


state 127

    (121) expr -> expr STAR . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 190
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 128

    (122) expr -> expr SLASH . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 191
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 129

    (123) expr -> expr MOD . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 192
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 130

    (124) expr -> expr PLUS . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 193
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 131

    (125) expr -> expr DASH . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 194
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 132

    (126) expr -> expr LT . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 195
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 133

    (127) expr -> expr GT . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 196
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 134

    (128) expr -> expr LE . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 197
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 135

    (129) expr -> expr GE . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 198
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 136

    (130) expr -> expr EQ . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 199
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 137

    (131) expr -> expr NE . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 200
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 138

    (132) expr -> expr AND . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 201
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 139

    (133) expr -> expr OR . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 202
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 140

    (134) expr -> expr RIGHTSHIFT . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 203
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 141

    (135) expr -> expr LEFTSHIFT . expr
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 204
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 142

    (116) aexpr -> aexpr DOT . ident
    (117) aexpr -> aexpr DOT . ident ( exprs )
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 205

state 143

    (118) aexpr -> aexpr [ . exprs ]
    (87) exprs -> . expr , exprs
    (88) exprs -> . expr
    (89) exprs -> . empty
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (2) empty -> .
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    ]               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    aexpr                          shift and go to state 76
    exprs                          shift and go to state 206
    expr                           shift and go to state 188
    empty                          shift and go to state 189
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 144

    (139) expr -> DASH expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 139 (expr -> DASH expr .)
    STAR            reduce using rule 139 (expr -> DASH expr .)
    SLASH           reduce using rule 139 (expr -> DASH expr .)
    MOD             reduce using rule 139 (expr -> DASH expr .)
    PLUS            reduce using rule 139 (expr -> DASH expr .)
    DASH            reduce using rule 139 (expr -> DASH expr .)
    LT              reduce using rule 139 (expr -> DASH expr .)
    GT              reduce using rule 139 (expr -> DASH expr .)
    LE              reduce using rule 139 (expr -> DASH expr .)
    GE              reduce using rule 139 (expr -> DASH expr .)
    EQ              reduce using rule 139 (expr -> DASH expr .)
    NE              reduce using rule 139 (expr -> DASH expr .)
    AND             reduce using rule 139 (expr -> DASH expr .)
    OR              reduce using rule 139 (expr -> DASH expr .)
    RIGHTSHIFT      reduce using rule 139 (expr -> DASH expr .)
    LEFTSHIFT       reduce using rule 139 (expr -> DASH expr .)
    )               reduce using rule 139 (expr -> DASH expr .)
    ,               reduce using rule 139 (expr -> DASH expr .)
    ]               reduce using rule 139 (expr -> DASH expr .)
    ASSIGN          reduce using rule 139 (expr -> DASH expr .)

  ! STAR            [ shift and go to state 127 ]
  ! SLASH           [ shift and go to state 128 ]
  ! MOD             [ shift and go to state 129 ]
  ! PLUS            [ shift and go to state 130 ]
  ! DASH            [ shift and go to state 131 ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 145

    (136) expr -> NOT expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 136 (expr -> NOT expr .)
    STAR            reduce using rule 136 (expr -> NOT expr .)
    SLASH           reduce using rule 136 (expr -> NOT expr .)
    MOD             reduce using rule 136 (expr -> NOT expr .)
    PLUS            reduce using rule 136 (expr -> NOT expr .)
    DASH            reduce using rule 136 (expr -> NOT expr .)
    LT              reduce using rule 136 (expr -> NOT expr .)
    GT              reduce using rule 136 (expr -> NOT expr .)
    LE              reduce using rule 136 (expr -> NOT expr .)
    GE              reduce using rule 136 (expr -> NOT expr .)
    EQ              reduce using rule 136 (expr -> NOT expr .)
    NE              reduce using rule 136 (expr -> NOT expr .)
    AND             reduce using rule 136 (expr -> NOT expr .)
    OR              reduce using rule 136 (expr -> NOT expr .)
    RIGHTSHIFT      reduce using rule 136 (expr -> NOT expr .)
    LEFTSHIFT       reduce using rule 136 (expr -> NOT expr .)
    )               reduce using rule 136 (expr -> NOT expr .)
    ,               reduce using rule 136 (expr -> NOT expr .)
    ]               reduce using rule 136 (expr -> NOT expr .)
    ASSIGN          reduce using rule 136 (expr -> NOT expr .)

  ! STAR            [ shift and go to state 127 ]
  ! SLASH           [ shift and go to state 128 ]
  ! MOD             [ shift and go to state 129 ]
  ! PLUS            [ shift and go to state 130 ]
  ! DASH            [ shift and go to state 131 ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 146

    (137) expr -> INCR expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 137 (expr -> INCR expr .)
    )               reduce using rule 137 (expr -> INCR expr .)
    ,               reduce using rule 137 (expr -> INCR expr .)
    ]               reduce using rule 137 (expr -> INCR expr .)
    ASSIGN          reduce using rule 137 (expr -> INCR expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 137 (expr -> INCR expr .) ]
  ! SLASH           [ reduce using rule 137 (expr -> INCR expr .) ]
  ! MOD             [ reduce using rule 137 (expr -> INCR expr .) ]
  ! PLUS            [ reduce using rule 137 (expr -> INCR expr .) ]
  ! DASH            [ reduce using rule 137 (expr -> INCR expr .) ]
  ! LT              [ reduce using rule 137 (expr -> INCR expr .) ]
  ! GT              [ reduce using rule 137 (expr -> INCR expr .) ]
  ! LE              [ reduce using rule 137 (expr -> INCR expr .) ]
  ! GE              [ reduce using rule 137 (expr -> INCR expr .) ]
  ! EQ              [ reduce using rule 137 (expr -> INCR expr .) ]
  ! NE              [ reduce using rule 137 (expr -> INCR expr .) ]
  ! AND             [ reduce using rule 137 (expr -> INCR expr .) ]
  ! OR              [ reduce using rule 137 (expr -> INCR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 137 (expr -> INCR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 137 (expr -> INCR expr .) ]


state 147

    (138) expr -> DECR expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 138 (expr -> DECR expr .)
    )               reduce using rule 138 (expr -> DECR expr .)
    ,               reduce using rule 138 (expr -> DECR expr .)
    ]               reduce using rule 138 (expr -> DECR expr .)
    ASSIGN          reduce using rule 138 (expr -> DECR expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 138 (expr -> DECR expr .) ]
  ! SLASH           [ reduce using rule 138 (expr -> DECR expr .) ]
  ! MOD             [ reduce using rule 138 (expr -> DECR expr .) ]
  ! PLUS            [ reduce using rule 138 (expr -> DECR expr .) ]
  ! DASH            [ reduce using rule 138 (expr -> DECR expr .) ]
  ! LT              [ reduce using rule 138 (expr -> DECR expr .) ]
  ! GT              [ reduce using rule 138 (expr -> DECR expr .) ]
  ! LE              [ reduce using rule 138 (expr -> DECR expr .) ]
  ! GE              [ reduce using rule 138 (expr -> DECR expr .) ]
  ! EQ              [ reduce using rule 138 (expr -> DECR expr .) ]
  ! NE              [ reduce using rule 138 (expr -> DECR expr .) ]
  ! AND             [ reduce using rule 138 (expr -> DECR expr .) ]
  ! OR              [ reduce using rule 138 (expr -> DECR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 138 (expr -> DECR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 138 (expr -> DECR expr .) ]


state 148

    (107) aexpr -> STATIC_CAST ( . type , expr )
    (108) aexpr -> STATIC_CAST ( . type , STRING , expr )
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 207
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 149

    (140) aexpr -> ( expr . )
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 208
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 150

    (114) aexpr -> NEW type .

    DOT             reduce using rule 114 (aexpr -> NEW type .)
    [               reduce using rule 114 (aexpr -> NEW type .)
    SEMI            reduce using rule 114 (aexpr -> NEW type .)
    STAR            reduce using rule 114 (aexpr -> NEW type .)
    SLASH           reduce using rule 114 (aexpr -> NEW type .)
    MOD             reduce using rule 114 (aexpr -> NEW type .)
    PLUS            reduce using rule 114 (aexpr -> NEW type .)
    DASH            reduce using rule 114 (aexpr -> NEW type .)
    LT              reduce using rule 114 (aexpr -> NEW type .)
    GT              reduce using rule 114 (aexpr -> NEW type .)
    LE              reduce using rule 114 (aexpr -> NEW type .)
    GE              reduce using rule 114 (aexpr -> NEW type .)
    EQ              reduce using rule 114 (aexpr -> NEW type .)
    NE              reduce using rule 114 (aexpr -> NEW type .)
    AND             reduce using rule 114 (aexpr -> NEW type .)
    OR              reduce using rule 114 (aexpr -> NEW type .)
    RIGHTSHIFT      reduce using rule 114 (aexpr -> NEW type .)
    LEFTSHIFT       reduce using rule 114 (aexpr -> NEW type .)
    )               reduce using rule 114 (aexpr -> NEW type .)
    ,               reduce using rule 114 (aexpr -> NEW type .)
    ]               reduce using rule 114 (aexpr -> NEW type .)
    ASSIGN          reduce using rule 114 (aexpr -> NEW type .)


state 151

    (141) aexpr -> IS_VALID ( . expr )
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 209
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 152

    (142) aexpr -> IS_INVALID ( . expr )
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 210
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 153

    (59) types -> type , . types
    (59) types -> . type , types
    (60) types -> . type
    (61) types -> . empty
    (64) type -> . typestr
    (2) empty -> .
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    type                           shift and go to state 211
    types                          shift and go to state 212
    empty                          shift and go to state 213
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 154

    (51) param -> type ident .
    (56) param -> type ident . ASSIGN NUMBER
    (57) param -> type ident . ASSIGN LIT_BOOL
    (58) param -> type ident . ASSIGN STRING

    ,               reduce using rule 51 (param -> type ident .)
    )               reduce using rule 51 (param -> type ident .)
    ASSIGN          shift and go to state 214


state 155

    (52) param -> type STAR . ident
    (55) param -> type STAR . ident ASSIGN STRING
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 215

state 156

    (53) param -> type AMP . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 216

state 157

    (36) func_decl -> type ident ( params ) . pairs SEMI
    (41) func_def -> type ident ( params ) . pairs statements
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 217
    empty                          shift and go to state 54

state 158

    (38) func_decl -> type ident ( types ) . pairs SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 218
    empty                          shift and go to state 54

state 159

    (48) params -> param , . params
    (48) params -> . param , params
    (49) params -> . param
    (50) params -> . empty
    (51) param -> . type ident
    (52) param -> . type STAR ident
    (53) param -> . type AMP ident
    (54) param -> . CONST type AMP ident
    (55) param -> . type STAR ident ASSIGN STRING
    (56) param -> . type ident ASSIGN NUMBER
    (57) param -> . type ident ASSIGN LIT_BOOL
    (58) param -> . type ident ASSIGN STRING
    (2) empty -> .
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    CONST           shift and go to state 99
    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    param                          shift and go to state 97
    params                         shift and go to state 219
    empty                          shift and go to state 220
    type                           shift and go to state 221
    ident                          shift and go to state 10
    typestr                        shift and go to state 24

state 160

    (54) param -> CONST type . AMP ident

    AMP             shift and go to state 222


state 161

    (77) pairsx -> pair , . pairsx
    (77) pairsx -> . pair , pairsx
    (78) pairsx -> . pair
    (79) pair -> . ident = STRING
    (80) pair -> . ident = ident
    (81) pair -> . ident = NUMBER
    (82) pair -> . STRING
    (72) ident -> . IDENT

    STRING          shift and go to state 103
    IDENT           shift and go to state 26

    pair                           shift and go to state 101
    pairsx                         shift and go to state 223
    ident                          shift and go to state 102

state 162

    (79) pair -> ident = . STRING
    (80) pair -> ident = . ident
    (81) pair -> ident = . NUMBER
    (72) ident -> . IDENT

    STRING          shift and go to state 225
    NUMBER          shift and go to state 226
    IDENT           shift and go to state 26

    ident                          shift and go to state 224

state 163

    (31) obj_decl -> type STAR ident pairs SEMI .

    PROTOCOL        reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    INCLUDE         reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    MACHINE         reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    ACTION          reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    IN_PORT         reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    OUT_PORT        reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    TRANS           reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    EXTERN_TYPE     reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    GLOBAL          reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    STRUCT          reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    ENUM            reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    STATE_DECL      reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    VOID            reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    IDENT           reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    $end            reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    }               reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)
    {               reduce using rule 31 (obj_decl -> type STAR ident pairs SEMI .)


state 164

    (33) obj_decl -> type STAR ident ASSIGN expr . SEMI
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 227
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 165

    (12) decl -> OUT_PORT ( ident , type . , var pairs ) SEMI

    ,               shift and go to state 228


state 166

    (13) decl -> TRANS ( idents , idents . , ident_or_star ) idents
    (14) decl -> TRANS ( idents , idents . ) idents
    (15) decl -> TRANS ( idents , idents . , ident_or_star ) idents idents
    (16) decl -> TRANS ( idents , idents . ) idents idents

    ,               shift and go to state 229
    )               shift and go to state 230


state 167

    (66) idents -> { identx } .

    ,               reduce using rule 66 (idents -> { identx } .)
    )               reduce using rule 66 (idents -> { identx } .)
    {               reduce using rule 66 (idents -> { identx } .)
    IDENT           reduce using rule 66 (idents -> { identx } .)
    PROTOCOL        reduce using rule 66 (idents -> { identx } .)
    INCLUDE         reduce using rule 66 (idents -> { identx } .)
    MACHINE         reduce using rule 66 (idents -> { identx } .)
    ACTION          reduce using rule 66 (idents -> { identx } .)
    IN_PORT         reduce using rule 66 (idents -> { identx } .)
    OUT_PORT        reduce using rule 66 (idents -> { identx } .)
    TRANS           reduce using rule 66 (idents -> { identx } .)
    EXTERN_TYPE     reduce using rule 66 (idents -> { identx } .)
    GLOBAL          reduce using rule 66 (idents -> { identx } .)
    STRUCT          reduce using rule 66 (idents -> { identx } .)
    ENUM            reduce using rule 66 (idents -> { identx } .)
    STATE_DECL      reduce using rule 66 (idents -> { identx } .)
    VOID            reduce using rule 66 (idents -> { identx } .)
    $end            reduce using rule 66 (idents -> { identx } .)
    }               reduce using rule 66 (idents -> { identx } .)


state 168

    (68) identx -> ident SEMI . identx
    (68) identx -> . ident SEMI identx
    (69) identx -> . ident , identx
    (70) identx -> . ident identx
    (71) identx -> . empty
    (72) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 26
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 109
    identx                         shift and go to state 231
    empty                          shift and go to state 110

state 169

    (70) identx -> ident identx .

    }               reduce using rule 70 (identx -> ident identx .)


state 170

    (69) identx -> ident , . identx
    (68) identx -> . ident SEMI identx
    (69) identx -> . ident , identx
    (70) identx -> . ident identx
    (71) identx -> . empty
    (72) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 26
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 109
    identx                         shift and go to state 232
    empty                          shift and go to state 110

state 171

    (17) decl -> EXTERN_TYPE ( type pairs ) . SEMI

    SEMI            shift and go to state 233


state 172

    (18) decl -> GLOBAL ( type pairs ) . { type_members }

    {               shift and go to state 234


state 173

    (19) decl -> STRUCT ( type pairs ) . { type_members }

    {               shift and go to state 235


state 174

    (20) decl -> ENUM ( type pairs ) . { type_enums }

    {               shift and go to state 236


state 175

    (21) decl -> STATE_DECL ( type pairs ) . { type_states }

    {               shift and go to state 237


state 176

    (35) func_decl -> void ident ( params ) . pairs SEMI
    (40) func_def -> void ident ( params ) . pairs statements
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 238
    empty                          shift and go to state 54

state 177

    (37) func_decl -> void ident ( types ) . pairs SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 239
    empty                          shift and go to state 54

state 178

    (8) decl -> MACHINE ( enumeration ) : obj_decls . { decls }

    {               shift and go to state 240


state 179

    (22) obj_decls -> obj_decl . obj_decls
    (22) obj_decls -> . obj_decl obj_decls
    (23) obj_decls -> . empty
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (2) empty -> .
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    obj_decl                       shift and go to state 179
    obj_decls                      shift and go to state 241
    empty                          shift and go to state 180
    type                           shift and go to state 181
    ident                          shift and go to state 10
    typestr                        shift and go to state 24

state 180

    (23) obj_decls -> empty .

    {               reduce using rule 23 (obj_decls -> empty .)


state 181

    (30) obj_decl -> type . ident pairs SEMI
    (31) obj_decl -> type . STAR ident pairs SEMI
    (32) obj_decl -> type . ident ASSIGN expr SEMI
    (33) obj_decl -> type . STAR ident ASSIGN expr SEMI
    (72) ident -> . IDENT

    STAR            shift and go to state 34
    IDENT           shift and go to state 26

    ident                          shift and go to state 242

state 182

    (9) decl -> MACHINE ( enumeration pairs ) : . obj_decls { decls }
    (22) obj_decls -> . obj_decl obj_decls
    (23) obj_decls -> . empty
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (2) empty -> .
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    obj_decls                      shift and go to state 243
    obj_decl                       shift and go to state 179
    empty                          shift and go to state 180
    type                           shift and go to state 181
    ident                          shift and go to state 10
    typestr                        shift and go to state 24

state 183

    (10) decl -> ACTION ( ident pairs ) statements .

    PROTOCOL        reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    INCLUDE         reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    MACHINE         reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    ACTION          reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    IN_PORT         reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    OUT_PORT        reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    TRANS           reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    EXTERN_TYPE     reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    GLOBAL          reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    STRUCT          reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    ENUM            reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    STATE_DECL      reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    VOID            reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    IDENT           reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    $end            reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)
    }               reduce using rule 10 (decl -> ACTION ( ident pairs ) statements .)


state 184

    (83) statements -> { . statements_inner }
    (84) statements -> { . }
    (85) statements_inner -> . statement statements_inner
    (86) statements_inner -> . statement
    (90) statement -> . expr SEMI
    (91) statement -> . expr ASSIGN expr SEMI
    (92) statement -> . ENQUEUE ( var , type ) statements
    (93) statement -> . ENQUEUE ( var , type , expr ) statements
    (94) statement -> . DEFER_ENQUEUEING ( var , type ) statements
    (95) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (96) statement -> . WAKEUP_PORT ( var , var ) SEMI
    (97) statement -> . PEEK ( var , type pairs ) statements
    (98) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (99) statement -> . CHECK_NEXT_CYCLE ( ) SEMI
    (100) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (101) statement -> . CHECK_PROBE ( var , var ) SEMI
    (102) statement -> . RETURN expr SEMI
    (103) statement -> . if_statement
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (104) if_statement -> . IF ( expr ) statements
    (105) if_statement -> . IF ( expr ) statements ELSE statements
    (106) if_statement -> . IF ( expr ) statements ELSE if_statement
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    }               shift and go to state 245
    ENQUEUE         shift and go to state 248
    DEFER_ENQUEUEING shift and go to state 249
    STALL_AND_WAIT  shift and go to state 250
    WAKEUP_PORT     shift and go to state 251
    PEEK            shift and go to state 252
    CHECK_ALLOCATE  shift and go to state 253
    CHECK_NEXT_CYCLE shift and go to state 254
    CHECK_STOP_SLOTS shift and go to state 255
    CHECK_PROBE     shift and go to state 256
    RETURN          shift and go to state 257
    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    IF              shift and go to state 259
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    statements_inner               shift and go to state 244
    statement                      shift and go to state 246
    expr                           shift and go to state 247
    var                            shift and go to state 84
    type                           shift and go to state 73
    if_statement                   shift and go to state 258
    aexpr                          shift and go to state 76
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 185

    (11) decl -> IN_PORT ( ident , type , . var pairs ) statements
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 260
    var                            shift and go to state 261

state 186

    (119) aexpr -> type DOUBLE_COLON ident . ( exprs )

    (               shift and go to state 262


state 187

    (113) aexpr -> ident ( exprs . )

    )               shift and go to state 263


state 188

    (87) exprs -> expr . , exprs
    (88) exprs -> expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    ,               shift and go to state 264
    )               reduce using rule 88 (exprs -> expr .)
    ]               reduce using rule 88 (exprs -> expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 189

    (89) exprs -> empty .

    )               reduce using rule 89 (exprs -> empty .)
    ]               reduce using rule 89 (exprs -> empty .)


state 190

    (121) expr -> expr STAR expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 121 (expr -> expr STAR expr .)
    STAR            reduce using rule 121 (expr -> expr STAR expr .)
    SLASH           reduce using rule 121 (expr -> expr STAR expr .)
    MOD             reduce using rule 121 (expr -> expr STAR expr .)
    PLUS            reduce using rule 121 (expr -> expr STAR expr .)
    DASH            reduce using rule 121 (expr -> expr STAR expr .)
    LT              reduce using rule 121 (expr -> expr STAR expr .)
    GT              reduce using rule 121 (expr -> expr STAR expr .)
    LE              reduce using rule 121 (expr -> expr STAR expr .)
    GE              reduce using rule 121 (expr -> expr STAR expr .)
    EQ              reduce using rule 121 (expr -> expr STAR expr .)
    NE              reduce using rule 121 (expr -> expr STAR expr .)
    AND             reduce using rule 121 (expr -> expr STAR expr .)
    OR              reduce using rule 121 (expr -> expr STAR expr .)
    RIGHTSHIFT      reduce using rule 121 (expr -> expr STAR expr .)
    LEFTSHIFT       reduce using rule 121 (expr -> expr STAR expr .)
    )               reduce using rule 121 (expr -> expr STAR expr .)
    ,               reduce using rule 121 (expr -> expr STAR expr .)
    ]               reduce using rule 121 (expr -> expr STAR expr .)
    ASSIGN          reduce using rule 121 (expr -> expr STAR expr .)

  ! STAR            [ shift and go to state 127 ]
  ! SLASH           [ shift and go to state 128 ]
  ! MOD             [ shift and go to state 129 ]
  ! PLUS            [ shift and go to state 130 ]
  ! DASH            [ shift and go to state 131 ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 191

    (122) expr -> expr SLASH expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 122 (expr -> expr SLASH expr .)
    STAR            reduce using rule 122 (expr -> expr SLASH expr .)
    SLASH           reduce using rule 122 (expr -> expr SLASH expr .)
    MOD             reduce using rule 122 (expr -> expr SLASH expr .)
    PLUS            reduce using rule 122 (expr -> expr SLASH expr .)
    DASH            reduce using rule 122 (expr -> expr SLASH expr .)
    LT              reduce using rule 122 (expr -> expr SLASH expr .)
    GT              reduce using rule 122 (expr -> expr SLASH expr .)
    LE              reduce using rule 122 (expr -> expr SLASH expr .)
    GE              reduce using rule 122 (expr -> expr SLASH expr .)
    EQ              reduce using rule 122 (expr -> expr SLASH expr .)
    NE              reduce using rule 122 (expr -> expr SLASH expr .)
    AND             reduce using rule 122 (expr -> expr SLASH expr .)
    OR              reduce using rule 122 (expr -> expr SLASH expr .)
    RIGHTSHIFT      reduce using rule 122 (expr -> expr SLASH expr .)
    LEFTSHIFT       reduce using rule 122 (expr -> expr SLASH expr .)
    )               reduce using rule 122 (expr -> expr SLASH expr .)
    ,               reduce using rule 122 (expr -> expr SLASH expr .)
    ]               reduce using rule 122 (expr -> expr SLASH expr .)
    ASSIGN          reduce using rule 122 (expr -> expr SLASH expr .)

  ! STAR            [ shift and go to state 127 ]
  ! SLASH           [ shift and go to state 128 ]
  ! MOD             [ shift and go to state 129 ]
  ! PLUS            [ shift and go to state 130 ]
  ! DASH            [ shift and go to state 131 ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 192

    (123) expr -> expr MOD expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 123 (expr -> expr MOD expr .)
    STAR            reduce using rule 123 (expr -> expr MOD expr .)
    SLASH           reduce using rule 123 (expr -> expr MOD expr .)
    MOD             reduce using rule 123 (expr -> expr MOD expr .)
    PLUS            reduce using rule 123 (expr -> expr MOD expr .)
    DASH            reduce using rule 123 (expr -> expr MOD expr .)
    LT              reduce using rule 123 (expr -> expr MOD expr .)
    GT              reduce using rule 123 (expr -> expr MOD expr .)
    LE              reduce using rule 123 (expr -> expr MOD expr .)
    GE              reduce using rule 123 (expr -> expr MOD expr .)
    EQ              reduce using rule 123 (expr -> expr MOD expr .)
    NE              reduce using rule 123 (expr -> expr MOD expr .)
    AND             reduce using rule 123 (expr -> expr MOD expr .)
    OR              reduce using rule 123 (expr -> expr MOD expr .)
    RIGHTSHIFT      reduce using rule 123 (expr -> expr MOD expr .)
    LEFTSHIFT       reduce using rule 123 (expr -> expr MOD expr .)
    )               reduce using rule 123 (expr -> expr MOD expr .)
    ,               reduce using rule 123 (expr -> expr MOD expr .)
    ]               reduce using rule 123 (expr -> expr MOD expr .)
    ASSIGN          reduce using rule 123 (expr -> expr MOD expr .)

  ! STAR            [ shift and go to state 127 ]
  ! SLASH           [ shift and go to state 128 ]
  ! MOD             [ shift and go to state 129 ]
  ! PLUS            [ shift and go to state 130 ]
  ! DASH            [ shift and go to state 131 ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 193

    (124) expr -> expr PLUS expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 124 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 124 (expr -> expr PLUS expr .)
    DASH            reduce using rule 124 (expr -> expr PLUS expr .)
    LT              reduce using rule 124 (expr -> expr PLUS expr .)
    GT              reduce using rule 124 (expr -> expr PLUS expr .)
    LE              reduce using rule 124 (expr -> expr PLUS expr .)
    GE              reduce using rule 124 (expr -> expr PLUS expr .)
    EQ              reduce using rule 124 (expr -> expr PLUS expr .)
    NE              reduce using rule 124 (expr -> expr PLUS expr .)
    AND             reduce using rule 124 (expr -> expr PLUS expr .)
    OR              reduce using rule 124 (expr -> expr PLUS expr .)
    RIGHTSHIFT      reduce using rule 124 (expr -> expr PLUS expr .)
    LEFTSHIFT       reduce using rule 124 (expr -> expr PLUS expr .)
    )               reduce using rule 124 (expr -> expr PLUS expr .)
    ,               reduce using rule 124 (expr -> expr PLUS expr .)
    ]               reduce using rule 124 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 124 (expr -> expr PLUS expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129

  ! STAR            [ reduce using rule 124 (expr -> expr PLUS expr .) ]
  ! SLASH           [ reduce using rule 124 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 124 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 130 ]
  ! DASH            [ shift and go to state 131 ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 194

    (125) expr -> expr DASH expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 125 (expr -> expr DASH expr .)
    PLUS            reduce using rule 125 (expr -> expr DASH expr .)
    DASH            reduce using rule 125 (expr -> expr DASH expr .)
    LT              reduce using rule 125 (expr -> expr DASH expr .)
    GT              reduce using rule 125 (expr -> expr DASH expr .)
    LE              reduce using rule 125 (expr -> expr DASH expr .)
    GE              reduce using rule 125 (expr -> expr DASH expr .)
    EQ              reduce using rule 125 (expr -> expr DASH expr .)
    NE              reduce using rule 125 (expr -> expr DASH expr .)
    AND             reduce using rule 125 (expr -> expr DASH expr .)
    OR              reduce using rule 125 (expr -> expr DASH expr .)
    RIGHTSHIFT      reduce using rule 125 (expr -> expr DASH expr .)
    LEFTSHIFT       reduce using rule 125 (expr -> expr DASH expr .)
    )               reduce using rule 125 (expr -> expr DASH expr .)
    ,               reduce using rule 125 (expr -> expr DASH expr .)
    ]               reduce using rule 125 (expr -> expr DASH expr .)
    ASSIGN          reduce using rule 125 (expr -> expr DASH expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129

  ! STAR            [ reduce using rule 125 (expr -> expr DASH expr .) ]
  ! SLASH           [ reduce using rule 125 (expr -> expr DASH expr .) ]
  ! MOD             [ reduce using rule 125 (expr -> expr DASH expr .) ]
  ! PLUS            [ shift and go to state 130 ]
  ! DASH            [ shift and go to state 131 ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 195

    (126) expr -> expr LT expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 126 (expr -> expr LT expr .)
    LT              reduce using rule 126 (expr -> expr LT expr .)
    GT              reduce using rule 126 (expr -> expr LT expr .)
    LE              reduce using rule 126 (expr -> expr LT expr .)
    GE              reduce using rule 126 (expr -> expr LT expr .)
    EQ              reduce using rule 126 (expr -> expr LT expr .)
    NE              reduce using rule 126 (expr -> expr LT expr .)
    AND             reduce using rule 126 (expr -> expr LT expr .)
    OR              reduce using rule 126 (expr -> expr LT expr .)
    )               reduce using rule 126 (expr -> expr LT expr .)
    ,               reduce using rule 126 (expr -> expr LT expr .)
    ]               reduce using rule 126 (expr -> expr LT expr .)
    ASSIGN          reduce using rule 126 (expr -> expr LT expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 126 (expr -> expr LT expr .) ]
  ! SLASH           [ reduce using rule 126 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 126 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 126 (expr -> expr LT expr .) ]
  ! DASH            [ reduce using rule 126 (expr -> expr LT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 126 (expr -> expr LT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 126 (expr -> expr LT expr .) ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]


state 196

    (127) expr -> expr GT expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 127 (expr -> expr GT expr .)
    LT              reduce using rule 127 (expr -> expr GT expr .)
    GT              reduce using rule 127 (expr -> expr GT expr .)
    LE              reduce using rule 127 (expr -> expr GT expr .)
    GE              reduce using rule 127 (expr -> expr GT expr .)
    EQ              reduce using rule 127 (expr -> expr GT expr .)
    NE              reduce using rule 127 (expr -> expr GT expr .)
    AND             reduce using rule 127 (expr -> expr GT expr .)
    OR              reduce using rule 127 (expr -> expr GT expr .)
    )               reduce using rule 127 (expr -> expr GT expr .)
    ,               reduce using rule 127 (expr -> expr GT expr .)
    ]               reduce using rule 127 (expr -> expr GT expr .)
    ASSIGN          reduce using rule 127 (expr -> expr GT expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 127 (expr -> expr GT expr .) ]
  ! SLASH           [ reduce using rule 127 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 127 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 127 (expr -> expr GT expr .) ]
  ! DASH            [ reduce using rule 127 (expr -> expr GT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 127 (expr -> expr GT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 127 (expr -> expr GT expr .) ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]


state 197

    (128) expr -> expr LE expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 128 (expr -> expr LE expr .)
    LT              reduce using rule 128 (expr -> expr LE expr .)
    GT              reduce using rule 128 (expr -> expr LE expr .)
    LE              reduce using rule 128 (expr -> expr LE expr .)
    GE              reduce using rule 128 (expr -> expr LE expr .)
    EQ              reduce using rule 128 (expr -> expr LE expr .)
    NE              reduce using rule 128 (expr -> expr LE expr .)
    AND             reduce using rule 128 (expr -> expr LE expr .)
    OR              reduce using rule 128 (expr -> expr LE expr .)
    )               reduce using rule 128 (expr -> expr LE expr .)
    ,               reduce using rule 128 (expr -> expr LE expr .)
    ]               reduce using rule 128 (expr -> expr LE expr .)
    ASSIGN          reduce using rule 128 (expr -> expr LE expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 128 (expr -> expr LE expr .) ]
  ! SLASH           [ reduce using rule 128 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 128 (expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 128 (expr -> expr LE expr .) ]
  ! DASH            [ reduce using rule 128 (expr -> expr LE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 128 (expr -> expr LE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 128 (expr -> expr LE expr .) ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]


state 198

    (129) expr -> expr GE expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 129 (expr -> expr GE expr .)
    LT              reduce using rule 129 (expr -> expr GE expr .)
    GT              reduce using rule 129 (expr -> expr GE expr .)
    LE              reduce using rule 129 (expr -> expr GE expr .)
    GE              reduce using rule 129 (expr -> expr GE expr .)
    EQ              reduce using rule 129 (expr -> expr GE expr .)
    NE              reduce using rule 129 (expr -> expr GE expr .)
    AND             reduce using rule 129 (expr -> expr GE expr .)
    OR              reduce using rule 129 (expr -> expr GE expr .)
    )               reduce using rule 129 (expr -> expr GE expr .)
    ,               reduce using rule 129 (expr -> expr GE expr .)
    ]               reduce using rule 129 (expr -> expr GE expr .)
    ASSIGN          reduce using rule 129 (expr -> expr GE expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 129 (expr -> expr GE expr .) ]
  ! SLASH           [ reduce using rule 129 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 129 (expr -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 129 (expr -> expr GE expr .) ]
  ! DASH            [ reduce using rule 129 (expr -> expr GE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 129 (expr -> expr GE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 129 (expr -> expr GE expr .) ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]


state 199

    (130) expr -> expr EQ expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 130 (expr -> expr EQ expr .)
    EQ              reduce using rule 130 (expr -> expr EQ expr .)
    NE              reduce using rule 130 (expr -> expr EQ expr .)
    AND             reduce using rule 130 (expr -> expr EQ expr .)
    OR              reduce using rule 130 (expr -> expr EQ expr .)
    )               reduce using rule 130 (expr -> expr EQ expr .)
    ,               reduce using rule 130 (expr -> expr EQ expr .)
    ]               reduce using rule 130 (expr -> expr EQ expr .)
    ASSIGN          reduce using rule 130 (expr -> expr EQ expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! SLASH           [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! DASH            [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! LEFTSHIFT       [ reduce using rule 130 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]


state 200

    (131) expr -> expr NE expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 131 (expr -> expr NE expr .)
    EQ              reduce using rule 131 (expr -> expr NE expr .)
    NE              reduce using rule 131 (expr -> expr NE expr .)
    AND             reduce using rule 131 (expr -> expr NE expr .)
    OR              reduce using rule 131 (expr -> expr NE expr .)
    )               reduce using rule 131 (expr -> expr NE expr .)
    ,               reduce using rule 131 (expr -> expr NE expr .)
    ]               reduce using rule 131 (expr -> expr NE expr .)
    ASSIGN          reduce using rule 131 (expr -> expr NE expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! SLASH           [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! DASH            [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 131 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]


state 201

    (132) expr -> expr AND expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 132 (expr -> expr AND expr .)
    AND             reduce using rule 132 (expr -> expr AND expr .)
    OR              reduce using rule 132 (expr -> expr AND expr .)
    )               reduce using rule 132 (expr -> expr AND expr .)
    ,               reduce using rule 132 (expr -> expr AND expr .)
    ]               reduce using rule 132 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 132 (expr -> expr AND expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! SLASH           [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! DASH            [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! LEFTSHIFT       [ reduce using rule 132 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]


state 202

    (133) expr -> expr OR expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 133 (expr -> expr OR expr .)
    OR              reduce using rule 133 (expr -> expr OR expr .)
    )               reduce using rule 133 (expr -> expr OR expr .)
    ,               reduce using rule 133 (expr -> expr OR expr .)
    ]               reduce using rule 133 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 133 (expr -> expr OR expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141

  ! STAR            [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! SLASH           [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! DASH            [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 133 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 139 ]


state 203

    (134) expr -> expr RIGHTSHIFT expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    LT              reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    GT              reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    LE              reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    GE              reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    EQ              reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    NE              reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    AND             reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    OR              reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    LEFTSHIFT       reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    )               reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    ,               reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    ]               reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    ASSIGN          reduce using rule 134 (expr -> expr RIGHTSHIFT expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131

  ! STAR            [ reduce using rule 134 (expr -> expr RIGHTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 134 (expr -> expr RIGHTSHIFT expr .) ]
  ! MOD             [ reduce using rule 134 (expr -> expr RIGHTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 134 (expr -> expr RIGHTSHIFT expr .) ]
  ! DASH            [ reduce using rule 134 (expr -> expr RIGHTSHIFT expr .) ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 204

    (135) expr -> expr LEFTSHIFT expr .
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    LT              reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    GT              reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    LE              reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    GE              reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    EQ              reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    NE              reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    AND             reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    OR              reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    LEFTSHIFT       reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    )               reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    ,               reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    ]               reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    ASSIGN          reduce using rule 135 (expr -> expr LEFTSHIFT expr .)
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131

  ! STAR            [ reduce using rule 135 (expr -> expr LEFTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 135 (expr -> expr LEFTSHIFT expr .) ]
  ! MOD             [ reduce using rule 135 (expr -> expr LEFTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 135 (expr -> expr LEFTSHIFT expr .) ]
  ! DASH            [ reduce using rule 135 (expr -> expr LEFTSHIFT expr .) ]
  ! LT              [ shift and go to state 132 ]
  ! GT              [ shift and go to state 133 ]
  ! LE              [ shift and go to state 134 ]
  ! GE              [ shift and go to state 135 ]
  ! EQ              [ shift and go to state 136 ]
  ! NE              [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! RIGHTSHIFT      [ shift and go to state 140 ]
  ! LEFTSHIFT       [ shift and go to state 141 ]


state 205

    (116) aexpr -> aexpr DOT ident .
    (117) aexpr -> aexpr DOT ident . ( exprs )

    DOT             reduce using rule 116 (aexpr -> aexpr DOT ident .)
    [               reduce using rule 116 (aexpr -> aexpr DOT ident .)
    SEMI            reduce using rule 116 (aexpr -> aexpr DOT ident .)
    STAR            reduce using rule 116 (aexpr -> aexpr DOT ident .)
    SLASH           reduce using rule 116 (aexpr -> aexpr DOT ident .)
    MOD             reduce using rule 116 (aexpr -> aexpr DOT ident .)
    PLUS            reduce using rule 116 (aexpr -> aexpr DOT ident .)
    DASH            reduce using rule 116 (aexpr -> aexpr DOT ident .)
    LT              reduce using rule 116 (aexpr -> aexpr DOT ident .)
    GT              reduce using rule 116 (aexpr -> aexpr DOT ident .)
    LE              reduce using rule 116 (aexpr -> aexpr DOT ident .)
    GE              reduce using rule 116 (aexpr -> aexpr DOT ident .)
    EQ              reduce using rule 116 (aexpr -> aexpr DOT ident .)
    NE              reduce using rule 116 (aexpr -> aexpr DOT ident .)
    AND             reduce using rule 116 (aexpr -> aexpr DOT ident .)
    OR              reduce using rule 116 (aexpr -> aexpr DOT ident .)
    RIGHTSHIFT      reduce using rule 116 (aexpr -> aexpr DOT ident .)
    LEFTSHIFT       reduce using rule 116 (aexpr -> aexpr DOT ident .)
    )               reduce using rule 116 (aexpr -> aexpr DOT ident .)
    ,               reduce using rule 116 (aexpr -> aexpr DOT ident .)
    ]               reduce using rule 116 (aexpr -> aexpr DOT ident .)
    ASSIGN          reduce using rule 116 (aexpr -> aexpr DOT ident .)
    (               shift and go to state 265


state 206

    (118) aexpr -> aexpr [ exprs . ]

    ]               shift and go to state 266


state 207

    (107) aexpr -> STATIC_CAST ( type . , expr )
    (108) aexpr -> STATIC_CAST ( type . , STRING , expr )

    ,               shift and go to state 267


state 208

    (140) aexpr -> ( expr ) .

    DOT             reduce using rule 140 (aexpr -> ( expr ) .)
    [               reduce using rule 140 (aexpr -> ( expr ) .)
    SEMI            reduce using rule 140 (aexpr -> ( expr ) .)
    STAR            reduce using rule 140 (aexpr -> ( expr ) .)
    SLASH           reduce using rule 140 (aexpr -> ( expr ) .)
    MOD             reduce using rule 140 (aexpr -> ( expr ) .)
    PLUS            reduce using rule 140 (aexpr -> ( expr ) .)
    DASH            reduce using rule 140 (aexpr -> ( expr ) .)
    LT              reduce using rule 140 (aexpr -> ( expr ) .)
    GT              reduce using rule 140 (aexpr -> ( expr ) .)
    LE              reduce using rule 140 (aexpr -> ( expr ) .)
    GE              reduce using rule 140 (aexpr -> ( expr ) .)
    EQ              reduce using rule 140 (aexpr -> ( expr ) .)
    NE              reduce using rule 140 (aexpr -> ( expr ) .)
    AND             reduce using rule 140 (aexpr -> ( expr ) .)
    OR              reduce using rule 140 (aexpr -> ( expr ) .)
    RIGHTSHIFT      reduce using rule 140 (aexpr -> ( expr ) .)
    LEFTSHIFT       reduce using rule 140 (aexpr -> ( expr ) .)
    )               reduce using rule 140 (aexpr -> ( expr ) .)
    ,               reduce using rule 140 (aexpr -> ( expr ) .)
    ]               reduce using rule 140 (aexpr -> ( expr ) .)
    ASSIGN          reduce using rule 140 (aexpr -> ( expr ) .)


state 209

    (141) aexpr -> IS_VALID ( expr . )
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 268
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 210

    (142) aexpr -> IS_INVALID ( expr . )
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 269
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 211

    (59) types -> type . , types
    (60) types -> type .

    ,               shift and go to state 153
    )               reduce using rule 60 (types -> type .)


state 212

    (59) types -> type , types .

    )               reduce using rule 59 (types -> type , types .)


state 213

    (61) types -> empty .

    )               reduce using rule 61 (types -> empty .)


state 214

    (56) param -> type ident ASSIGN . NUMBER
    (57) param -> type ident ASSIGN . LIT_BOOL
    (58) param -> type ident ASSIGN . STRING

    NUMBER          shift and go to state 270
    LIT_BOOL        shift and go to state 271
    STRING          shift and go to state 272


state 215

    (52) param -> type STAR ident .
    (55) param -> type STAR ident . ASSIGN STRING

    ,               reduce using rule 52 (param -> type STAR ident .)
    )               reduce using rule 52 (param -> type STAR ident .)
    ASSIGN          shift and go to state 273


state 216

    (53) param -> type AMP ident .

    ,               reduce using rule 53 (param -> type AMP ident .)
    )               reduce using rule 53 (param -> type AMP ident .)


state 217

    (36) func_decl -> type ident ( params ) pairs . SEMI
    (41) func_def -> type ident ( params ) pairs . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    SEMI            shift and go to state 274
    {               shift and go to state 184

    statements                     shift and go to state 275

state 218

    (38) func_decl -> type ident ( types ) pairs . SEMI

    SEMI            shift and go to state 276


state 219

    (48) params -> param , params .

    )               reduce using rule 48 (params -> param , params .)


state 220

    (50) params -> empty .

    )               reduce using rule 50 (params -> empty .)


state 221

    (51) param -> type . ident
    (52) param -> type . STAR ident
    (53) param -> type . AMP ident
    (55) param -> type . STAR ident ASSIGN STRING
    (56) param -> type . ident ASSIGN NUMBER
    (57) param -> type . ident ASSIGN LIT_BOOL
    (58) param -> type . ident ASSIGN STRING
    (72) ident -> . IDENT

    STAR            shift and go to state 155
    AMP             shift and go to state 156
    IDENT           shift and go to state 26

    ident                          shift and go to state 154

state 222

    (54) param -> CONST type AMP . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 277

state 223

    (77) pairsx -> pair , pairsx .

    SEMI            reduce using rule 77 (pairsx -> pair , pairsx .)
    )               reduce using rule 77 (pairsx -> pair , pairsx .)
    {               reduce using rule 77 (pairsx -> pair , pairsx .)


state 224

    (80) pair -> ident = ident .

    ,               reduce using rule 80 (pair -> ident = ident .)
    SEMI            reduce using rule 80 (pair -> ident = ident .)
    )               reduce using rule 80 (pair -> ident = ident .)
    {               reduce using rule 80 (pair -> ident = ident .)


state 225

    (79) pair -> ident = STRING .

    ,               reduce using rule 79 (pair -> ident = STRING .)
    SEMI            reduce using rule 79 (pair -> ident = STRING .)
    )               reduce using rule 79 (pair -> ident = STRING .)
    {               reduce using rule 79 (pair -> ident = STRING .)


state 226

    (81) pair -> ident = NUMBER .

    ,               reduce using rule 81 (pair -> ident = NUMBER .)
    SEMI            reduce using rule 81 (pair -> ident = NUMBER .)
    )               reduce using rule 81 (pair -> ident = NUMBER .)
    {               reduce using rule 81 (pair -> ident = NUMBER .)


state 227

    (33) obj_decl -> type STAR ident ASSIGN expr SEMI .

    PROTOCOL        reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    INCLUDE         reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    MACHINE         reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    ACTION          reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    IN_PORT         reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    OUT_PORT        reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    TRANS           reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    EXTERN_TYPE     reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    GLOBAL          reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    STRUCT          reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    ENUM            reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    STATE_DECL      reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    VOID            reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    IDENT           reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    $end            reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    }               reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)
    {               reduce using rule 33 (obj_decl -> type STAR ident ASSIGN expr SEMI .)


state 228

    (12) decl -> OUT_PORT ( ident , type , . var pairs ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 260
    var                            shift and go to state 278

state 229

    (13) decl -> TRANS ( idents , idents , . ident_or_star ) idents
    (15) decl -> TRANS ( idents , idents , . ident_or_star ) idents idents
    (73) ident_or_star -> . ident
    (74) ident_or_star -> . STAR
    (72) ident -> . IDENT

    STAR            shift and go to state 281
    IDENT           shift and go to state 26

    ident_or_star                  shift and go to state 279
    ident                          shift and go to state 280

state 230

    (14) decl -> TRANS ( idents , idents ) . idents
    (16) decl -> TRANS ( idents , idents ) . idents idents
    (66) idents -> . { identx }
    (67) idents -> . ident
    (72) ident -> . IDENT

    {               shift and go to state 58
    IDENT           shift and go to state 26

    idents                         shift and go to state 282
    ident                          shift and go to state 59

state 231

    (68) identx -> ident SEMI identx .

    }               reduce using rule 68 (identx -> ident SEMI identx .)


state 232

    (69) identx -> ident , identx .

    }               reduce using rule 69 (identx -> ident , identx .)


state 233

    (17) decl -> EXTERN_TYPE ( type pairs ) SEMI .

    PROTOCOL        reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    INCLUDE         reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    MACHINE         reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ACTION          reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IN_PORT         reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    OUT_PORT        reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    TRANS           reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    GLOBAL          reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STRUCT          reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ENUM            reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STATE_DECL      reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    VOID            reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IDENT           reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    $end            reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    }               reduce using rule 17 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)


state 234

    (18) decl -> GLOBAL ( type pairs ) { . type_members }
    (24) type_members -> . type_member type_members
    (25) type_members -> . empty
    (26) type_member -> . obj_decl
    (27) type_member -> . func_decl
    (28) type_member -> . func_def
    (2) empty -> .
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (35) func_decl -> . void ident ( params ) pairs SEMI
    (36) func_decl -> . type ident ( params ) pairs SEMI
    (37) func_decl -> . void ident ( types ) pairs SEMI
    (38) func_decl -> . type ident ( types ) pairs SEMI
    (40) func_def -> . void ident ( params ) pairs statements
    (41) func_def -> . type ident ( params ) pairs statements
    (64) type -> . typestr
    (65) void -> . VOID
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 25
    IDENT           shift and go to state 26

    type                           shift and go to state 12
    type_members                   shift and go to state 283
    type_member                    shift and go to state 284
    empty                          shift and go to state 285
    obj_decl                       shift and go to state 286
    func_decl                      shift and go to state 287
    func_def                       shift and go to state 288
    ident                          shift and go to state 10
    void                           shift and go to state 23
    typestr                        shift and go to state 24

state 235

    (19) decl -> STRUCT ( type pairs ) { . type_members }
    (24) type_members -> . type_member type_members
    (25) type_members -> . empty
    (26) type_member -> . obj_decl
    (27) type_member -> . func_decl
    (28) type_member -> . func_def
    (2) empty -> .
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (35) func_decl -> . void ident ( params ) pairs SEMI
    (36) func_decl -> . type ident ( params ) pairs SEMI
    (37) func_decl -> . void ident ( types ) pairs SEMI
    (38) func_decl -> . type ident ( types ) pairs SEMI
    (40) func_def -> . void ident ( params ) pairs statements
    (41) func_def -> . type ident ( params ) pairs statements
    (64) type -> . typestr
    (65) void -> . VOID
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 25
    IDENT           shift and go to state 26

    type                           shift and go to state 12
    type_members                   shift and go to state 289
    type_member                    shift and go to state 284
    empty                          shift and go to state 285
    obj_decl                       shift and go to state 286
    func_decl                      shift and go to state 287
    func_def                       shift and go to state 288
    ident                          shift and go to state 10
    void                           shift and go to state 23
    typestr                        shift and go to state 24

state 236

    (20) decl -> ENUM ( type pairs ) { . type_enums }
    (42) type_enums -> . type_enum type_enums
    (43) type_enums -> . empty
    (44) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (72) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    type_enums                     shift and go to state 290
    type_enum                      shift and go to state 291
    empty                          shift and go to state 292
    ident                          shift and go to state 293

state 237

    (21) decl -> STATE_DECL ( type pairs ) { . type_states }
    (45) type_states -> . type_state type_states
    (46) type_states -> . empty
    (47) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (72) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    type_states                    shift and go to state 294
    type_state                     shift and go to state 295
    empty                          shift and go to state 296
    ident                          shift and go to state 297

state 238

    (35) func_decl -> void ident ( params ) pairs . SEMI
    (40) func_def -> void ident ( params ) pairs . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    SEMI            shift and go to state 298
    {               shift and go to state 184

    statements                     shift and go to state 299

state 239

    (37) func_decl -> void ident ( types ) pairs . SEMI

    SEMI            shift and go to state 300


state 240

    (8) decl -> MACHINE ( enumeration ) : obj_decls { . decls }
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( enumeration ) : obj_decls { decls }
    (9) decl -> . MACHINE ( enumeration pairs ) : obj_decls { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident_or_star ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident_or_star ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (29) decl -> . obj_decl
    (34) decl -> . func_decl
    (39) decl -> . func_def
    (2) empty -> .
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (35) func_decl -> . void ident ( params ) pairs SEMI
    (36) func_decl -> . type ident ( params ) pairs SEMI
    (37) func_decl -> . void ident ( types ) pairs SEMI
    (38) func_decl -> . type ident ( types ) pairs SEMI
    (40) func_def -> . void ident ( params ) pairs statements
    (41) func_def -> . type ident ( params ) pairs statements
    (64) type -> . typestr
    (65) void -> . VOID
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    PROTOCOL        shift and go to state 6
    INCLUDE         shift and go to state 7
    MACHINE         shift and go to state 8
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 11
    OUT_PORT        shift and go to state 13
    TRANS           shift and go to state 14
    EXTERN_TYPE     shift and go to state 15
    GLOBAL          shift and go to state 16
    STRUCT          shift and go to state 17
    ENUM            shift and go to state 18
    STATE_DECL      shift and go to state 19
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 25
    IDENT           shift and go to state 26

    decls                          shift and go to state 301
    declsx                         shift and go to state 3
    decl                           shift and go to state 4
    empty                          shift and go to state 5
    ident                          shift and go to state 10
    type                           shift and go to state 12
    obj_decl                       shift and go to state 20
    func_decl                      shift and go to state 21
    func_def                       shift and go to state 22
    void                           shift and go to state 23
    typestr                        shift and go to state 24

state 241

    (22) obj_decls -> obj_decl obj_decls .

    {               reduce using rule 22 (obj_decls -> obj_decl obj_decls .)


state 242

    (30) obj_decl -> type ident . pairs SEMI
    (32) obj_decl -> type ident . ASSIGN expr SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ASSIGN          shift and go to state 51
    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 50
    empty                          shift and go to state 54

state 243

    (9) decl -> MACHINE ( enumeration pairs ) : obj_decls . { decls }

    {               shift and go to state 302


state 244

    (83) statements -> { statements_inner . }

    }               shift and go to state 303


state 245

    (84) statements -> { } .

    PROTOCOL        reduce using rule 84 (statements -> { } .)
    INCLUDE         reduce using rule 84 (statements -> { } .)
    MACHINE         reduce using rule 84 (statements -> { } .)
    ACTION          reduce using rule 84 (statements -> { } .)
    IN_PORT         reduce using rule 84 (statements -> { } .)
    OUT_PORT        reduce using rule 84 (statements -> { } .)
    TRANS           reduce using rule 84 (statements -> { } .)
    EXTERN_TYPE     reduce using rule 84 (statements -> { } .)
    GLOBAL          reduce using rule 84 (statements -> { } .)
    STRUCT          reduce using rule 84 (statements -> { } .)
    ENUM            reduce using rule 84 (statements -> { } .)
    STATE_DECL      reduce using rule 84 (statements -> { } .)
    VOID            reduce using rule 84 (statements -> { } .)
    IDENT           reduce using rule 84 (statements -> { } .)
    $end            reduce using rule 84 (statements -> { } .)
    }               reduce using rule 84 (statements -> { } .)
    ELSE            reduce using rule 84 (statements -> { } .)
    ENQUEUE         reduce using rule 84 (statements -> { } .)
    DEFER_ENQUEUEING reduce using rule 84 (statements -> { } .)
    STALL_AND_WAIT  reduce using rule 84 (statements -> { } .)
    WAKEUP_PORT     reduce using rule 84 (statements -> { } .)
    PEEK            reduce using rule 84 (statements -> { } .)
    CHECK_ALLOCATE  reduce using rule 84 (statements -> { } .)
    CHECK_NEXT_CYCLE reduce using rule 84 (statements -> { } .)
    CHECK_STOP_SLOTS reduce using rule 84 (statements -> { } .)
    CHECK_PROBE     reduce using rule 84 (statements -> { } .)
    RETURN          reduce using rule 84 (statements -> { } .)
    NOT             reduce using rule 84 (statements -> { } .)
    INCR            reduce using rule 84 (statements -> { } .)
    DECR            reduce using rule 84 (statements -> { } .)
    DASH            reduce using rule 84 (statements -> { } .)
    IF              reduce using rule 84 (statements -> { } .)
    STATIC_CAST     reduce using rule 84 (statements -> { } .)
    NEW             reduce using rule 84 (statements -> { } .)
    OOD             reduce using rule 84 (statements -> { } .)
    (               reduce using rule 84 (statements -> { } .)
    IS_VALID        reduce using rule 84 (statements -> { } .)
    IS_INVALID      reduce using rule 84 (statements -> { } .)
    STRING          reduce using rule 84 (statements -> { } .)
    NUMBER          reduce using rule 84 (statements -> { } .)
    FLOATNUMBER     reduce using rule 84 (statements -> { } .)
    LIT_BOOL        reduce using rule 84 (statements -> { } .)


state 246

    (85) statements_inner -> statement . statements_inner
    (86) statements_inner -> statement .
    (85) statements_inner -> . statement statements_inner
    (86) statements_inner -> . statement
    (90) statement -> . expr SEMI
    (91) statement -> . expr ASSIGN expr SEMI
    (92) statement -> . ENQUEUE ( var , type ) statements
    (93) statement -> . ENQUEUE ( var , type , expr ) statements
    (94) statement -> . DEFER_ENQUEUEING ( var , type ) statements
    (95) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (96) statement -> . WAKEUP_PORT ( var , var ) SEMI
    (97) statement -> . PEEK ( var , type pairs ) statements
    (98) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (99) statement -> . CHECK_NEXT_CYCLE ( ) SEMI
    (100) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (101) statement -> . CHECK_PROBE ( var , var ) SEMI
    (102) statement -> . RETURN expr SEMI
    (103) statement -> . if_statement
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (104) if_statement -> . IF ( expr ) statements
    (105) if_statement -> . IF ( expr ) statements ELSE statements
    (106) if_statement -> . IF ( expr ) statements ELSE if_statement
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    }               reduce using rule 86 (statements_inner -> statement .)
    ENQUEUE         shift and go to state 248
    DEFER_ENQUEUEING shift and go to state 249
    STALL_AND_WAIT  shift and go to state 250
    WAKEUP_PORT     shift and go to state 251
    PEEK            shift and go to state 252
    CHECK_ALLOCATE  shift and go to state 253
    CHECK_NEXT_CYCLE shift and go to state 254
    CHECK_STOP_SLOTS shift and go to state 255
    CHECK_PROBE     shift and go to state 256
    RETURN          shift and go to state 257
    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    IF              shift and go to state 259
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    statement                      shift and go to state 246
    statements_inner               shift and go to state 304
    expr                           shift and go to state 247
    var                            shift and go to state 84
    type                           shift and go to state 73
    if_statement                   shift and go to state 258
    aexpr                          shift and go to state 76
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 247

    (90) statement -> expr . SEMI
    (91) statement -> expr . ASSIGN expr SEMI
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 305
    ASSIGN          shift and go to state 306
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 248

    (92) statement -> ENQUEUE . ( var , type ) statements
    (93) statement -> ENQUEUE . ( var , type , expr ) statements

    (               shift and go to state 307


state 249

    (94) statement -> DEFER_ENQUEUEING . ( var , type ) statements

    (               shift and go to state 308


state 250

    (95) statement -> STALL_AND_WAIT . ( var , var ) SEMI

    (               shift and go to state 309


state 251

    (96) statement -> WAKEUP_PORT . ( var , var ) SEMI

    (               shift and go to state 310


state 252

    (97) statement -> PEEK . ( var , type pairs ) statements

    (               shift and go to state 311


state 253

    (98) statement -> CHECK_ALLOCATE . ( var ) SEMI

    (               shift and go to state 312


state 254

    (99) statement -> CHECK_NEXT_CYCLE . ( ) SEMI

    (               shift and go to state 313


state 255

    (100) statement -> CHECK_STOP_SLOTS . ( var , STRING , STRING ) SEMI

    (               shift and go to state 314


state 256

    (101) statement -> CHECK_PROBE . ( var , var ) SEMI

    (               shift and go to state 315


state 257

    (102) statement -> RETURN . expr SEMI
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 316
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 258

    (103) statement -> if_statement .

    ENQUEUE         reduce using rule 103 (statement -> if_statement .)
    DEFER_ENQUEUEING reduce using rule 103 (statement -> if_statement .)
    STALL_AND_WAIT  reduce using rule 103 (statement -> if_statement .)
    WAKEUP_PORT     reduce using rule 103 (statement -> if_statement .)
    PEEK            reduce using rule 103 (statement -> if_statement .)
    CHECK_ALLOCATE  reduce using rule 103 (statement -> if_statement .)
    CHECK_NEXT_CYCLE reduce using rule 103 (statement -> if_statement .)
    CHECK_STOP_SLOTS reduce using rule 103 (statement -> if_statement .)
    CHECK_PROBE     reduce using rule 103 (statement -> if_statement .)
    RETURN          reduce using rule 103 (statement -> if_statement .)
    NOT             reduce using rule 103 (statement -> if_statement .)
    INCR            reduce using rule 103 (statement -> if_statement .)
    DECR            reduce using rule 103 (statement -> if_statement .)
    DASH            reduce using rule 103 (statement -> if_statement .)
    IF              reduce using rule 103 (statement -> if_statement .)
    STATIC_CAST     reduce using rule 103 (statement -> if_statement .)
    NEW             reduce using rule 103 (statement -> if_statement .)
    OOD             reduce using rule 103 (statement -> if_statement .)
    (               reduce using rule 103 (statement -> if_statement .)
    IS_VALID        reduce using rule 103 (statement -> if_statement .)
    IS_INVALID      reduce using rule 103 (statement -> if_statement .)
    STRING          reduce using rule 103 (statement -> if_statement .)
    NUMBER          reduce using rule 103 (statement -> if_statement .)
    FLOATNUMBER     reduce using rule 103 (statement -> if_statement .)
    LIT_BOOL        reduce using rule 103 (statement -> if_statement .)
    IDENT           reduce using rule 103 (statement -> if_statement .)
    }               reduce using rule 103 (statement -> if_statement .)


state 259

    (104) if_statement -> IF . ( expr ) statements
    (105) if_statement -> IF . ( expr ) statements ELSE statements
    (106) if_statement -> IF . ( expr ) statements ELSE if_statement

    (               shift and go to state 317


state 260

    (148) var -> ident .

    ,               reduce using rule 148 (var -> ident .)
    )               reduce using rule 148 (var -> ident .)


state 261

    (11) decl -> IN_PORT ( ident , type , var . pairs ) statements
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 318
    empty                          shift and go to state 54

state 262

    (119) aexpr -> type DOUBLE_COLON ident ( . exprs )
    (87) exprs -> . expr , exprs
    (88) exprs -> . expr
    (89) exprs -> . empty
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (2) empty -> .
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    type                           shift and go to state 73
    ident                          shift and go to state 74
    exprs                          shift and go to state 319
    expr                           shift and go to state 188
    empty                          shift and go to state 189
    aexpr                          shift and go to state 76
    var                            shift and go to state 84
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 263

    (113) aexpr -> ident ( exprs ) .

    DOT             reduce using rule 113 (aexpr -> ident ( exprs ) .)
    [               reduce using rule 113 (aexpr -> ident ( exprs ) .)
    SEMI            reduce using rule 113 (aexpr -> ident ( exprs ) .)
    STAR            reduce using rule 113 (aexpr -> ident ( exprs ) .)
    SLASH           reduce using rule 113 (aexpr -> ident ( exprs ) .)
    MOD             reduce using rule 113 (aexpr -> ident ( exprs ) .)
    PLUS            reduce using rule 113 (aexpr -> ident ( exprs ) .)
    DASH            reduce using rule 113 (aexpr -> ident ( exprs ) .)
    LT              reduce using rule 113 (aexpr -> ident ( exprs ) .)
    GT              reduce using rule 113 (aexpr -> ident ( exprs ) .)
    LE              reduce using rule 113 (aexpr -> ident ( exprs ) .)
    GE              reduce using rule 113 (aexpr -> ident ( exprs ) .)
    EQ              reduce using rule 113 (aexpr -> ident ( exprs ) .)
    NE              reduce using rule 113 (aexpr -> ident ( exprs ) .)
    AND             reduce using rule 113 (aexpr -> ident ( exprs ) .)
    OR              reduce using rule 113 (aexpr -> ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 113 (aexpr -> ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 113 (aexpr -> ident ( exprs ) .)
    )               reduce using rule 113 (aexpr -> ident ( exprs ) .)
    ,               reduce using rule 113 (aexpr -> ident ( exprs ) .)
    ]               reduce using rule 113 (aexpr -> ident ( exprs ) .)
    ASSIGN          reduce using rule 113 (aexpr -> ident ( exprs ) .)


state 264

    (87) exprs -> expr , . exprs
    (87) exprs -> . expr , exprs
    (88) exprs -> . expr
    (89) exprs -> . empty
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (2) empty -> .
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    )               reduce using rule 2 (empty -> .)
    ]               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 188
    exprs                          shift and go to state 320
    empty                          shift and go to state 189
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 265

    (117) aexpr -> aexpr DOT ident ( . exprs )
    (87) exprs -> . expr , exprs
    (88) exprs -> . expr
    (89) exprs -> . empty
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (2) empty -> .
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    aexpr                          shift and go to state 76
    ident                          shift and go to state 74
    exprs                          shift and go to state 321
    expr                           shift and go to state 188
    empty                          shift and go to state 189
    type                           shift and go to state 73
    var                            shift and go to state 84
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 266

    (118) aexpr -> aexpr [ exprs ] .

    DOT             reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    [               reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    SEMI            reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    STAR            reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    SLASH           reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    MOD             reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    PLUS            reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    DASH            reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    LT              reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    GT              reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    LE              reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    GE              reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    EQ              reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    NE              reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    AND             reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    OR              reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    RIGHTSHIFT      reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    LEFTSHIFT       reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    )               reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    ,               reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    ]               reduce using rule 118 (aexpr -> aexpr [ exprs ] .)
    ASSIGN          reduce using rule 118 (aexpr -> aexpr [ exprs ] .)


state 267

    (107) aexpr -> STATIC_CAST ( type , . expr )
    (108) aexpr -> STATIC_CAST ( type , . STRING , expr )
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    STRING          shift and go to state 323
    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    type                           shift and go to state 73
    expr                           shift and go to state 322
    aexpr                          shift and go to state 76
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 268

    (141) aexpr -> IS_VALID ( expr ) .

    DOT             reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    [               reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    SEMI            reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    STAR            reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    SLASH           reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    MOD             reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    PLUS            reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    DASH            reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    LT              reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    GT              reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    LE              reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    GE              reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    EQ              reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    NE              reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    AND             reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    OR              reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    RIGHTSHIFT      reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    LEFTSHIFT       reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    )               reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    ,               reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    ]               reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)
    ASSIGN          reduce using rule 141 (aexpr -> IS_VALID ( expr ) .)


state 269

    (142) aexpr -> IS_INVALID ( expr ) .

    DOT             reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    [               reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    SEMI            reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    STAR            reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    SLASH           reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    MOD             reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    PLUS            reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    DASH            reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    LT              reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    GT              reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    LE              reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    GE              reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    EQ              reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    NE              reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    AND             reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    OR              reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    RIGHTSHIFT      reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    LEFTSHIFT       reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    )               reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    ,               reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    ]               reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)
    ASSIGN          reduce using rule 142 (aexpr -> IS_INVALID ( expr ) .)


state 270

    (56) param -> type ident ASSIGN NUMBER .

    ,               reduce using rule 56 (param -> type ident ASSIGN NUMBER .)
    )               reduce using rule 56 (param -> type ident ASSIGN NUMBER .)


state 271

    (57) param -> type ident ASSIGN LIT_BOOL .

    ,               reduce using rule 57 (param -> type ident ASSIGN LIT_BOOL .)
    )               reduce using rule 57 (param -> type ident ASSIGN LIT_BOOL .)


state 272

    (58) param -> type ident ASSIGN STRING .

    ,               reduce using rule 58 (param -> type ident ASSIGN STRING .)
    )               reduce using rule 58 (param -> type ident ASSIGN STRING .)


state 273

    (55) param -> type STAR ident ASSIGN . STRING

    STRING          shift and go to state 324


state 274

    (36) func_decl -> type ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    VOID            reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    $end            reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)
    }               reduce using rule 36 (func_decl -> type ident ( params ) pairs SEMI .)


state 275

    (41) func_def -> type ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    MACHINE         reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    ACTION          reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    TRANS           reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    STRUCT          reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    ENUM            reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    VOID            reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    IDENT           reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    $end            reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)
    }               reduce using rule 41 (func_def -> type ident ( params ) pairs statements .)


state 276

    (38) func_decl -> type ident ( types ) pairs SEMI .

    PROTOCOL        reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    INCLUDE         reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    MACHINE         reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    ACTION          reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    IN_PORT         reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    OUT_PORT        reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    TRANS           reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    GLOBAL          reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    STRUCT          reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    ENUM            reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    STATE_DECL      reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    VOID            reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    IDENT           reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    $end            reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)
    }               reduce using rule 38 (func_decl -> type ident ( types ) pairs SEMI .)


state 277

    (54) param -> CONST type AMP ident .

    ,               reduce using rule 54 (param -> CONST type AMP ident .)
    )               reduce using rule 54 (param -> CONST type AMP ident .)


state 278

    (12) decl -> OUT_PORT ( ident , type , var . pairs ) SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 325
    empty                          shift and go to state 54

state 279

    (13) decl -> TRANS ( idents , idents , ident_or_star . ) idents
    (15) decl -> TRANS ( idents , idents , ident_or_star . ) idents idents

    )               shift and go to state 326


state 280

    (73) ident_or_star -> ident .

    )               reduce using rule 73 (ident_or_star -> ident .)


state 281

    (74) ident_or_star -> STAR .

    )               reduce using rule 74 (ident_or_star -> STAR .)


state 282

    (14) decl -> TRANS ( idents , idents ) idents .
    (16) decl -> TRANS ( idents , idents ) idents . idents
    (66) idents -> . { identx }
    (67) idents -> . ident
    (72) ident -> . IDENT

  ! shift/reduce conflict for IDENT resolved as shift
    PROTOCOL        reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    INCLUDE         reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    MACHINE         reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    ACTION          reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    IN_PORT         reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    OUT_PORT        reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    TRANS           reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    EXTERN_TYPE     reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    GLOBAL          reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    STRUCT          reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    ENUM            reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    STATE_DECL      reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    VOID            reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    $end            reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    }               reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .)
    {               shift and go to state 58
    IDENT           shift and go to state 26

  ! IDENT           [ reduce using rule 14 (decl -> TRANS ( idents , idents ) idents .) ]

    idents                         shift and go to state 327
    ident                          shift and go to state 59

state 283

    (18) decl -> GLOBAL ( type pairs ) { type_members . }

    }               shift and go to state 328


state 284

    (24) type_members -> type_member . type_members
    (24) type_members -> . type_member type_members
    (25) type_members -> . empty
    (26) type_member -> . obj_decl
    (27) type_member -> . func_decl
    (28) type_member -> . func_def
    (2) empty -> .
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (35) func_decl -> . void ident ( params ) pairs SEMI
    (36) func_decl -> . type ident ( params ) pairs SEMI
    (37) func_decl -> . void ident ( types ) pairs SEMI
    (38) func_decl -> . type ident ( types ) pairs SEMI
    (40) func_def -> . void ident ( params ) pairs statements
    (41) func_def -> . type ident ( params ) pairs statements
    (64) type -> . typestr
    (65) void -> . VOID
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 25
    IDENT           shift and go to state 26

    type_member                    shift and go to state 284
    type_members                   shift and go to state 329
    empty                          shift and go to state 285
    obj_decl                       shift and go to state 286
    func_decl                      shift and go to state 287
    func_def                       shift and go to state 288
    type                           shift and go to state 12
    ident                          shift and go to state 10
    void                           shift and go to state 23
    typestr                        shift and go to state 24

state 285

    (25) type_members -> empty .

    }               reduce using rule 25 (type_members -> empty .)


state 286

    (26) type_member -> obj_decl .

    VOID            reduce using rule 26 (type_member -> obj_decl .)
    IDENT           reduce using rule 26 (type_member -> obj_decl .)
    }               reduce using rule 26 (type_member -> obj_decl .)


state 287

    (27) type_member -> func_decl .

    VOID            reduce using rule 27 (type_member -> func_decl .)
    IDENT           reduce using rule 27 (type_member -> func_decl .)
    }               reduce using rule 27 (type_member -> func_decl .)


state 288

    (28) type_member -> func_def .

    VOID            reduce using rule 28 (type_member -> func_def .)
    IDENT           reduce using rule 28 (type_member -> func_def .)
    }               reduce using rule 28 (type_member -> func_def .)


state 289

    (19) decl -> STRUCT ( type pairs ) { type_members . }

    }               shift and go to state 330


state 290

    (20) decl -> ENUM ( type pairs ) { type_enums . }

    }               shift and go to state 331


state 291

    (42) type_enums -> type_enum . type_enums
    (42) type_enums -> . type_enum type_enums
    (43) type_enums -> . empty
    (44) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (72) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    type_enum                      shift and go to state 291
    type_enums                     shift and go to state 332
    empty                          shift and go to state 292
    ident                          shift and go to state 293

state 292

    (43) type_enums -> empty .

    }               reduce using rule 43 (type_enums -> empty .)


state 293

    (44) type_enum -> ident . pairs SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 333
    empty                          shift and go to state 54

state 294

    (21) decl -> STATE_DECL ( type pairs ) { type_states . }

    }               shift and go to state 334


state 295

    (45) type_states -> type_state . type_states
    (45) type_states -> . type_state type_states
    (46) type_states -> . empty
    (47) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (72) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 26

    type_state                     shift and go to state 295
    type_states                    shift and go to state 335
    empty                          shift and go to state 296
    ident                          shift and go to state 297

state 296

    (46) type_states -> empty .

    }               reduce using rule 46 (type_states -> empty .)


state 297

    (47) type_state -> ident . , enumeration pairs SEMI

    ,               shift and go to state 336


state 298

    (35) func_decl -> void ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    VOID            reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    $end            reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)
    }               reduce using rule 35 (func_decl -> void ident ( params ) pairs SEMI .)


state 299

    (40) func_def -> void ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    MACHINE         reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    ACTION          reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    TRANS           reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    STRUCT          reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    ENUM            reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    VOID            reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    IDENT           reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    $end            reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)
    }               reduce using rule 40 (func_def -> void ident ( params ) pairs statements .)


state 300

    (37) func_decl -> void ident ( types ) pairs SEMI .

    PROTOCOL        reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    INCLUDE         reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    MACHINE         reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    ACTION          reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    IN_PORT         reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    OUT_PORT        reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    TRANS           reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    GLOBAL          reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    STRUCT          reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    ENUM            reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    STATE_DECL      reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    VOID            reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    IDENT           reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    $end            reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)
    }               reduce using rule 37 (func_decl -> void ident ( types ) pairs SEMI .)


state 301

    (8) decl -> MACHINE ( enumeration ) : obj_decls { decls . }

    }               shift and go to state 337


state 302

    (9) decl -> MACHINE ( enumeration pairs ) : obj_decls { . decls }
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( enumeration ) : obj_decls { decls }
    (9) decl -> . MACHINE ( enumeration pairs ) : obj_decls { decls }
    (10) decl -> . ACTION ( ident pairs ) statements
    (11) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (12) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (13) decl -> . TRANS ( idents , idents , ident_or_star ) idents
    (14) decl -> . TRANS ( idents , idents ) idents
    (15) decl -> . TRANS ( idents , idents , ident_or_star ) idents idents
    (16) decl -> . TRANS ( idents , idents ) idents idents
    (17) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (18) decl -> . GLOBAL ( type pairs ) { type_members }
    (19) decl -> . STRUCT ( type pairs ) { type_members }
    (20) decl -> . ENUM ( type pairs ) { type_enums }
    (21) decl -> . STATE_DECL ( type pairs ) { type_states }
    (29) decl -> . obj_decl
    (34) decl -> . func_decl
    (39) decl -> . func_def
    (2) empty -> .
    (30) obj_decl -> . type ident pairs SEMI
    (31) obj_decl -> . type STAR ident pairs SEMI
    (32) obj_decl -> . type ident ASSIGN expr SEMI
    (33) obj_decl -> . type STAR ident ASSIGN expr SEMI
    (35) func_decl -> . void ident ( params ) pairs SEMI
    (36) func_decl -> . type ident ( params ) pairs SEMI
    (37) func_decl -> . void ident ( types ) pairs SEMI
    (38) func_decl -> . type ident ( types ) pairs SEMI
    (40) func_def -> . void ident ( params ) pairs statements
    (41) func_def -> . type ident ( params ) pairs statements
    (64) type -> . typestr
    (65) void -> . VOID
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    PROTOCOL        shift and go to state 6
    INCLUDE         shift and go to state 7
    MACHINE         shift and go to state 8
    ACTION          shift and go to state 9
    IN_PORT         shift and go to state 11
    OUT_PORT        shift and go to state 13
    TRANS           shift and go to state 14
    EXTERN_TYPE     shift and go to state 15
    GLOBAL          shift and go to state 16
    STRUCT          shift and go to state 17
    ENUM            shift and go to state 18
    STATE_DECL      shift and go to state 19
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 25
    IDENT           shift and go to state 26

    decls                          shift and go to state 338
    declsx                         shift and go to state 3
    decl                           shift and go to state 4
    empty                          shift and go to state 5
    ident                          shift and go to state 10
    type                           shift and go to state 12
    obj_decl                       shift and go to state 20
    func_decl                      shift and go to state 21
    func_def                       shift and go to state 22
    void                           shift and go to state 23
    typestr                        shift and go to state 24

state 303

    (83) statements -> { statements_inner } .

    PROTOCOL        reduce using rule 83 (statements -> { statements_inner } .)
    INCLUDE         reduce using rule 83 (statements -> { statements_inner } .)
    MACHINE         reduce using rule 83 (statements -> { statements_inner } .)
    ACTION          reduce using rule 83 (statements -> { statements_inner } .)
    IN_PORT         reduce using rule 83 (statements -> { statements_inner } .)
    OUT_PORT        reduce using rule 83 (statements -> { statements_inner } .)
    TRANS           reduce using rule 83 (statements -> { statements_inner } .)
    EXTERN_TYPE     reduce using rule 83 (statements -> { statements_inner } .)
    GLOBAL          reduce using rule 83 (statements -> { statements_inner } .)
    STRUCT          reduce using rule 83 (statements -> { statements_inner } .)
    ENUM            reduce using rule 83 (statements -> { statements_inner } .)
    STATE_DECL      reduce using rule 83 (statements -> { statements_inner } .)
    VOID            reduce using rule 83 (statements -> { statements_inner } .)
    IDENT           reduce using rule 83 (statements -> { statements_inner } .)
    $end            reduce using rule 83 (statements -> { statements_inner } .)
    }               reduce using rule 83 (statements -> { statements_inner } .)
    ELSE            reduce using rule 83 (statements -> { statements_inner } .)
    ENQUEUE         reduce using rule 83 (statements -> { statements_inner } .)
    DEFER_ENQUEUEING reduce using rule 83 (statements -> { statements_inner } .)
    STALL_AND_WAIT  reduce using rule 83 (statements -> { statements_inner } .)
    WAKEUP_PORT     reduce using rule 83 (statements -> { statements_inner } .)
    PEEK            reduce using rule 83 (statements -> { statements_inner } .)
    CHECK_ALLOCATE  reduce using rule 83 (statements -> { statements_inner } .)
    CHECK_NEXT_CYCLE reduce using rule 83 (statements -> { statements_inner } .)
    CHECK_STOP_SLOTS reduce using rule 83 (statements -> { statements_inner } .)
    CHECK_PROBE     reduce using rule 83 (statements -> { statements_inner } .)
    RETURN          reduce using rule 83 (statements -> { statements_inner } .)
    NOT             reduce using rule 83 (statements -> { statements_inner } .)
    INCR            reduce using rule 83 (statements -> { statements_inner } .)
    DECR            reduce using rule 83 (statements -> { statements_inner } .)
    DASH            reduce using rule 83 (statements -> { statements_inner } .)
    IF              reduce using rule 83 (statements -> { statements_inner } .)
    STATIC_CAST     reduce using rule 83 (statements -> { statements_inner } .)
    NEW             reduce using rule 83 (statements -> { statements_inner } .)
    OOD             reduce using rule 83 (statements -> { statements_inner } .)
    (               reduce using rule 83 (statements -> { statements_inner } .)
    IS_VALID        reduce using rule 83 (statements -> { statements_inner } .)
    IS_INVALID      reduce using rule 83 (statements -> { statements_inner } .)
    STRING          reduce using rule 83 (statements -> { statements_inner } .)
    NUMBER          reduce using rule 83 (statements -> { statements_inner } .)
    FLOATNUMBER     reduce using rule 83 (statements -> { statements_inner } .)
    LIT_BOOL        reduce using rule 83 (statements -> { statements_inner } .)


state 304

    (85) statements_inner -> statement statements_inner .

    }               reduce using rule 85 (statements_inner -> statement statements_inner .)


state 305

    (90) statement -> expr SEMI .

    ENQUEUE         reduce using rule 90 (statement -> expr SEMI .)
    DEFER_ENQUEUEING reduce using rule 90 (statement -> expr SEMI .)
    STALL_AND_WAIT  reduce using rule 90 (statement -> expr SEMI .)
    WAKEUP_PORT     reduce using rule 90 (statement -> expr SEMI .)
    PEEK            reduce using rule 90 (statement -> expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 90 (statement -> expr SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 90 (statement -> expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 90 (statement -> expr SEMI .)
    CHECK_PROBE     reduce using rule 90 (statement -> expr SEMI .)
    RETURN          reduce using rule 90 (statement -> expr SEMI .)
    NOT             reduce using rule 90 (statement -> expr SEMI .)
    INCR            reduce using rule 90 (statement -> expr SEMI .)
    DECR            reduce using rule 90 (statement -> expr SEMI .)
    DASH            reduce using rule 90 (statement -> expr SEMI .)
    IF              reduce using rule 90 (statement -> expr SEMI .)
    STATIC_CAST     reduce using rule 90 (statement -> expr SEMI .)
    NEW             reduce using rule 90 (statement -> expr SEMI .)
    OOD             reduce using rule 90 (statement -> expr SEMI .)
    (               reduce using rule 90 (statement -> expr SEMI .)
    IS_VALID        reduce using rule 90 (statement -> expr SEMI .)
    IS_INVALID      reduce using rule 90 (statement -> expr SEMI .)
    STRING          reduce using rule 90 (statement -> expr SEMI .)
    NUMBER          reduce using rule 90 (statement -> expr SEMI .)
    FLOATNUMBER     reduce using rule 90 (statement -> expr SEMI .)
    LIT_BOOL        reduce using rule 90 (statement -> expr SEMI .)
    IDENT           reduce using rule 90 (statement -> expr SEMI .)
    }               reduce using rule 90 (statement -> expr SEMI .)


state 306

    (91) statement -> expr ASSIGN . expr SEMI
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 339
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 307

    (92) statement -> ENQUEUE ( . var , type ) statements
    (93) statement -> ENQUEUE ( . var , type , expr ) statements
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 340
    ident                          shift and go to state 260

state 308

    (94) statement -> DEFER_ENQUEUEING ( . var , type ) statements
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 341
    ident                          shift and go to state 260

state 309

    (95) statement -> STALL_AND_WAIT ( . var , var ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 342
    ident                          shift and go to state 260

state 310

    (96) statement -> WAKEUP_PORT ( . var , var ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 343
    ident                          shift and go to state 260

state 311

    (97) statement -> PEEK ( . var , type pairs ) statements
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 344
    ident                          shift and go to state 260

state 312

    (98) statement -> CHECK_ALLOCATE ( . var ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 345
    ident                          shift and go to state 260

state 313

    (99) statement -> CHECK_NEXT_CYCLE ( . ) SEMI

    )               shift and go to state 346


state 314

    (100) statement -> CHECK_STOP_SLOTS ( . var , STRING , STRING ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 347
    ident                          shift and go to state 260

state 315

    (101) statement -> CHECK_PROBE ( . var , var ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 348
    ident                          shift and go to state 260

state 316

    (102) statement -> RETURN expr . SEMI
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 349
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 317

    (104) if_statement -> IF ( . expr ) statements
    (105) if_statement -> IF ( . expr ) statements ELSE statements
    (106) if_statement -> IF ( . expr ) statements ELSE if_statement
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    expr                           shift and go to state 350
    aexpr                          shift and go to state 76
    type                           shift and go to state 73
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 318

    (11) decl -> IN_PORT ( ident , type , var pairs . ) statements

    )               shift and go to state 351


state 319

    (119) aexpr -> type DOUBLE_COLON ident ( exprs . )

    )               shift and go to state 352


state 320

    (87) exprs -> expr , exprs .

    )               reduce using rule 87 (exprs -> expr , exprs .)
    ]               reduce using rule 87 (exprs -> expr , exprs .)


state 321

    (117) aexpr -> aexpr DOT ident ( exprs . )

    )               shift and go to state 353


state 322

    (107) aexpr -> STATIC_CAST ( type , expr . )
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 354
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 323

    (108) aexpr -> STATIC_CAST ( type , STRING . , expr )
    (143) literal -> STRING .

    ,               shift and go to state 355
    DOT             reduce using rule 143 (literal -> STRING .)
    [               reduce using rule 143 (literal -> STRING .)
    )               reduce using rule 143 (literal -> STRING .)
    STAR            reduce using rule 143 (literal -> STRING .)
    SLASH           reduce using rule 143 (literal -> STRING .)
    MOD             reduce using rule 143 (literal -> STRING .)
    PLUS            reduce using rule 143 (literal -> STRING .)
    DASH            reduce using rule 143 (literal -> STRING .)
    LT              reduce using rule 143 (literal -> STRING .)
    GT              reduce using rule 143 (literal -> STRING .)
    LE              reduce using rule 143 (literal -> STRING .)
    GE              reduce using rule 143 (literal -> STRING .)
    EQ              reduce using rule 143 (literal -> STRING .)
    NE              reduce using rule 143 (literal -> STRING .)
    AND             reduce using rule 143 (literal -> STRING .)
    OR              reduce using rule 143 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 143 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 143 (literal -> STRING .)


state 324

    (55) param -> type STAR ident ASSIGN STRING .

    ,               reduce using rule 55 (param -> type STAR ident ASSIGN STRING .)
    )               reduce using rule 55 (param -> type STAR ident ASSIGN STRING .)


state 325

    (12) decl -> OUT_PORT ( ident , type , var pairs . ) SEMI

    )               shift and go to state 356


state 326

    (13) decl -> TRANS ( idents , idents , ident_or_star ) . idents
    (15) decl -> TRANS ( idents , idents , ident_or_star ) . idents idents
    (66) idents -> . { identx }
    (67) idents -> . ident
    (72) ident -> . IDENT

    {               shift and go to state 58
    IDENT           shift and go to state 26

    idents                         shift and go to state 357
    ident                          shift and go to state 59

state 327

    (16) decl -> TRANS ( idents , idents ) idents idents .

    PROTOCOL        reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    INCLUDE         reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    MACHINE         reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    ACTION          reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    IN_PORT         reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    OUT_PORT        reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    TRANS           reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    EXTERN_TYPE     reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    GLOBAL          reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    STRUCT          reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    ENUM            reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    STATE_DECL      reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    VOID            reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    IDENT           reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    $end            reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)
    }               reduce using rule 16 (decl -> TRANS ( idents , idents ) idents idents .)


state 328

    (18) decl -> GLOBAL ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ACTION          reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    TRANS           reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ENUM            reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    VOID            reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IDENT           reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    $end            reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)
    }               reduce using rule 18 (decl -> GLOBAL ( type pairs ) { type_members } .)


state 329

    (24) type_members -> type_member type_members .

    }               reduce using rule 24 (type_members -> type_member type_members .)


state 330

    (19) decl -> STRUCT ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    ACTION          reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    TRANS           reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    ENUM            reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    VOID            reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    IDENT           reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    $end            reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)
    }               reduce using rule 19 (decl -> STRUCT ( type pairs ) { type_members } .)


state 331

    (20) decl -> ENUM ( type pairs ) { type_enums } .

    PROTOCOL        reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    INCLUDE         reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    MACHINE         reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    ACTION          reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    IN_PORT         reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    OUT_PORT        reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    TRANS           reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    EXTERN_TYPE     reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    GLOBAL          reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    STRUCT          reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    ENUM            reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    STATE_DECL      reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    VOID            reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    IDENT           reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    $end            reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)
    }               reduce using rule 20 (decl -> ENUM ( type pairs ) { type_enums } .)


state 332

    (42) type_enums -> type_enum type_enums .

    }               reduce using rule 42 (type_enums -> type_enum type_enums .)


state 333

    (44) type_enum -> ident pairs . SEMI

    SEMI            shift and go to state 358


state 334

    (21) decl -> STATE_DECL ( type pairs ) { type_states } .

    PROTOCOL        reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    INCLUDE         reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    MACHINE         reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ACTION          reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IN_PORT         reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    OUT_PORT        reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    TRANS           reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    EXTERN_TYPE     reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    GLOBAL          reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STRUCT          reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ENUM            reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STATE_DECL      reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    VOID            reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IDENT           reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    $end            reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    }               reduce using rule 21 (decl -> STATE_DECL ( type pairs ) { type_states } .)


state 335

    (45) type_states -> type_state type_states .

    }               reduce using rule 45 (type_states -> type_state type_states .)


state 336

    (47) type_state -> ident , . enumeration pairs SEMI
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    ident                          shift and go to state 47
    enumeration                    shift and go to state 359

state 337

    (8) decl -> MACHINE ( enumeration ) : obj_decls { decls } .

    PROTOCOL        reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    INCLUDE         reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    MACHINE         reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    ACTION          reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    IN_PORT         reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    OUT_PORT        reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    TRANS           reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    EXTERN_TYPE     reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    GLOBAL          reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    STRUCT          reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    ENUM            reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    STATE_DECL      reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    VOID            reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    IDENT           reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    $end            reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)
    }               reduce using rule 8 (decl -> MACHINE ( enumeration ) : obj_decls { decls } .)


state 338

    (9) decl -> MACHINE ( enumeration pairs ) : obj_decls { decls . }

    }               shift and go to state 360


state 339

    (91) statement -> expr ASSIGN expr . SEMI
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 361
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 340

    (92) statement -> ENQUEUE ( var . , type ) statements
    (93) statement -> ENQUEUE ( var . , type , expr ) statements

    ,               shift and go to state 362


state 341

    (94) statement -> DEFER_ENQUEUEING ( var . , type ) statements

    ,               shift and go to state 363


state 342

    (95) statement -> STALL_AND_WAIT ( var . , var ) SEMI

    ,               shift and go to state 364


state 343

    (96) statement -> WAKEUP_PORT ( var . , var ) SEMI

    ,               shift and go to state 365


state 344

    (97) statement -> PEEK ( var . , type pairs ) statements

    ,               shift and go to state 366


state 345

    (98) statement -> CHECK_ALLOCATE ( var . ) SEMI

    )               shift and go to state 367


state 346

    (99) statement -> CHECK_NEXT_CYCLE ( ) . SEMI

    SEMI            shift and go to state 368


state 347

    (100) statement -> CHECK_STOP_SLOTS ( var . , STRING , STRING ) SEMI

    ,               shift and go to state 369


state 348

    (101) statement -> CHECK_PROBE ( var . , var ) SEMI

    ,               shift and go to state 370


state 349

    (102) statement -> RETURN expr SEMI .

    ENQUEUE         reduce using rule 102 (statement -> RETURN expr SEMI .)
    DEFER_ENQUEUEING reduce using rule 102 (statement -> RETURN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 102 (statement -> RETURN expr SEMI .)
    WAKEUP_PORT     reduce using rule 102 (statement -> RETURN expr SEMI .)
    PEEK            reduce using rule 102 (statement -> RETURN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 102 (statement -> RETURN expr SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 102 (statement -> RETURN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 102 (statement -> RETURN expr SEMI .)
    CHECK_PROBE     reduce using rule 102 (statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 102 (statement -> RETURN expr SEMI .)
    NOT             reduce using rule 102 (statement -> RETURN expr SEMI .)
    INCR            reduce using rule 102 (statement -> RETURN expr SEMI .)
    DECR            reduce using rule 102 (statement -> RETURN expr SEMI .)
    DASH            reduce using rule 102 (statement -> RETURN expr SEMI .)
    IF              reduce using rule 102 (statement -> RETURN expr SEMI .)
    STATIC_CAST     reduce using rule 102 (statement -> RETURN expr SEMI .)
    NEW             reduce using rule 102 (statement -> RETURN expr SEMI .)
    OOD             reduce using rule 102 (statement -> RETURN expr SEMI .)
    (               reduce using rule 102 (statement -> RETURN expr SEMI .)
    IS_VALID        reduce using rule 102 (statement -> RETURN expr SEMI .)
    IS_INVALID      reduce using rule 102 (statement -> RETURN expr SEMI .)
    STRING          reduce using rule 102 (statement -> RETURN expr SEMI .)
    NUMBER          reduce using rule 102 (statement -> RETURN expr SEMI .)
    FLOATNUMBER     reduce using rule 102 (statement -> RETURN expr SEMI .)
    LIT_BOOL        reduce using rule 102 (statement -> RETURN expr SEMI .)
    IDENT           reduce using rule 102 (statement -> RETURN expr SEMI .)
    }               reduce using rule 102 (statement -> RETURN expr SEMI .)


state 350

    (104) if_statement -> IF ( expr . ) statements
    (105) if_statement -> IF ( expr . ) statements ELSE statements
    (106) if_statement -> IF ( expr . ) statements ELSE if_statement
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 371
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 351

    (11) decl -> IN_PORT ( ident , type , var pairs ) . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    {               shift and go to state 184

    statements                     shift and go to state 372

state 352

    (119) aexpr -> type DOUBLE_COLON ident ( exprs ) .

    DOT             reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    [               reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SEMI            reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    STAR            reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SLASH           reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    MOD             reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    PLUS            reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    DASH            reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LT              reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GT              reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LE              reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GE              reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    EQ              reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    NE              reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    AND             reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    OR              reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    )               reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ,               reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ]               reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ASSIGN          reduce using rule 119 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)


state 353

    (117) aexpr -> aexpr DOT ident ( exprs ) .

    DOT             reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    [               reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    SEMI            reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    STAR            reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    SLASH           reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    MOD             reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    PLUS            reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    DASH            reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    LT              reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    GT              reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    LE              reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    GE              reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    EQ              reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    NE              reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    AND             reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    OR              reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    )               reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    ,               reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    ]               reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)
    ASSIGN          reduce using rule 117 (aexpr -> aexpr DOT ident ( exprs ) .)


state 354

    (107) aexpr -> STATIC_CAST ( type , expr ) .

    DOT             reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    [               reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    SEMI            reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    STAR            reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    SLASH           reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    MOD             reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    PLUS            reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    DASH            reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    LT              reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    GT              reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    LE              reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    GE              reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    EQ              reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    NE              reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    AND             reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    OR              reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    RIGHTSHIFT      reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    LEFTSHIFT       reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    )               reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    ,               reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    ]               reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)
    ASSIGN          reduce using rule 107 (aexpr -> STATIC_CAST ( type , expr ) .)


state 355

    (108) aexpr -> STATIC_CAST ( type , STRING , . expr )
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    type                           shift and go to state 73
    expr                           shift and go to state 373
    aexpr                          shift and go to state 76
    var                            shift and go to state 84
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 356

    (12) decl -> OUT_PORT ( ident , type , var pairs ) . SEMI

    SEMI            shift and go to state 374


state 357

    (13) decl -> TRANS ( idents , idents , ident_or_star ) idents .
    (15) decl -> TRANS ( idents , idents , ident_or_star ) idents . idents
    (66) idents -> . { identx }
    (67) idents -> . ident
    (72) ident -> . IDENT

  ! shift/reduce conflict for IDENT resolved as shift
    PROTOCOL        reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    INCLUDE         reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    MACHINE         reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    ACTION          reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    IN_PORT         reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    OUT_PORT        reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    TRANS           reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    EXTERN_TYPE     reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    GLOBAL          reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    STRUCT          reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    ENUM            reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    STATE_DECL      reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    VOID            reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    $end            reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    }               reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .)
    {               shift and go to state 58
    IDENT           shift and go to state 26

  ! IDENT           [ reduce using rule 13 (decl -> TRANS ( idents , idents , ident_or_star ) idents .) ]

    idents                         shift and go to state 375
    ident                          shift and go to state 59

state 358

    (44) type_enum -> ident pairs SEMI .

    IDENT           reduce using rule 44 (type_enum -> ident pairs SEMI .)
    }               reduce using rule 44 (type_enum -> ident pairs SEMI .)


state 359

    (47) type_state -> ident , enumeration . pairs SEMI
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 376
    empty                          shift and go to state 54

state 360

    (9) decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .

    PROTOCOL        reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    INCLUDE         reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    MACHINE         reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    ACTION          reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    IN_PORT         reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    OUT_PORT        reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    TRANS           reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    EXTERN_TYPE     reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    GLOBAL          reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    STRUCT          reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    ENUM            reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    STATE_DECL      reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    VOID            reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    IDENT           reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    $end            reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)
    }               reduce using rule 9 (decl -> MACHINE ( enumeration pairs ) : obj_decls { decls } .)


state 361

    (91) statement -> expr ASSIGN expr SEMI .

    ENQUEUE         reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    DEFER_ENQUEUEING reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    WAKEUP_PORT     reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    PEEK            reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    CHECK_PROBE     reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    RETURN          reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    NOT             reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    INCR            reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    DECR            reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    DASH            reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    IF              reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    STATIC_CAST     reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    NEW             reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    OOD             reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    (               reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    IS_VALID        reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    IS_INVALID      reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    STRING          reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    NUMBER          reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    FLOATNUMBER     reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    LIT_BOOL        reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    IDENT           reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)
    }               reduce using rule 91 (statement -> expr ASSIGN expr SEMI .)


state 362

    (92) statement -> ENQUEUE ( var , . type ) statements
    (93) statement -> ENQUEUE ( var , . type , expr ) statements
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 377
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 363

    (94) statement -> DEFER_ENQUEUEING ( var , . type ) statements
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 378
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 364

    (95) statement -> STALL_AND_WAIT ( var , . var ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 379
    ident                          shift and go to state 260

state 365

    (96) statement -> WAKEUP_PORT ( var , . var ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 380
    ident                          shift and go to state 260

state 366

    (97) statement -> PEEK ( var , . type pairs ) statements
    (64) type -> . typestr
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    type                           shift and go to state 381
    typestr                        shift and go to state 24
    ident                          shift and go to state 10

state 367

    (98) statement -> CHECK_ALLOCATE ( var ) . SEMI

    SEMI            shift and go to state 382


state 368

    (99) statement -> CHECK_NEXT_CYCLE ( ) SEMI .

    ENQUEUE         reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    DEFER_ENQUEUEING reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    STALL_AND_WAIT  reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    WAKEUP_PORT     reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    PEEK            reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    CHECK_PROBE     reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    RETURN          reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    NOT             reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    INCR            reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    DECR            reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    DASH            reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    IF              reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    STATIC_CAST     reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    NEW             reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    OOD             reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    (               reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    IS_VALID        reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    IS_INVALID      reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    STRING          reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    NUMBER          reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    FLOATNUMBER     reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    LIT_BOOL        reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    IDENT           reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)
    }               reduce using rule 99 (statement -> CHECK_NEXT_CYCLE ( ) SEMI .)


state 369

    (100) statement -> CHECK_STOP_SLOTS ( var , . STRING , STRING ) SEMI

    STRING          shift and go to state 383


state 370

    (101) statement -> CHECK_PROBE ( var , . var ) SEMI
    (148) var -> . ident
    (72) ident -> . IDENT

    IDENT           shift and go to state 26

    var                            shift and go to state 384
    ident                          shift and go to state 260

state 371

    (104) if_statement -> IF ( expr ) . statements
    (105) if_statement -> IF ( expr ) . statements ELSE statements
    (106) if_statement -> IF ( expr ) . statements ELSE if_statement
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    {               shift and go to state 184

    statements                     shift and go to state 385

state 372

    (11) decl -> IN_PORT ( ident , type , var pairs ) statements .

    PROTOCOL        reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    INCLUDE         reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    MACHINE         reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ACTION          reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IN_PORT         reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    OUT_PORT        reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    TRANS           reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    EXTERN_TYPE     reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    GLOBAL          reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STRUCT          reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ENUM            reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STATE_DECL      reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    VOID            reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IDENT           reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    $end            reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    }               reduce using rule 11 (decl -> IN_PORT ( ident , type , var pairs ) statements .)


state 373

    (108) aexpr -> STATIC_CAST ( type , STRING , expr . )
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 386
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 374

    (12) decl -> OUT_PORT ( ident , type , var pairs ) SEMI .

    PROTOCOL        reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    INCLUDE         reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    MACHINE         reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ACTION          reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IN_PORT         reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    OUT_PORT        reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    TRANS           reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    GLOBAL          reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STRUCT          reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ENUM            reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STATE_DECL      reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    VOID            reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IDENT           reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    $end            reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    }               reduce using rule 12 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)


state 375

    (15) decl -> TRANS ( idents , idents , ident_or_star ) idents idents .

    PROTOCOL        reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    INCLUDE         reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    MACHINE         reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    ACTION          reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    IN_PORT         reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    OUT_PORT        reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    TRANS           reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    EXTERN_TYPE     reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    GLOBAL          reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    STRUCT          reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    ENUM            reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    STATE_DECL      reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    VOID            reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    IDENT           reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    $end            reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)
    }               reduce using rule 15 (decl -> TRANS ( idents , idents , ident_or_star ) idents idents .)


state 376

    (47) type_state -> ident , enumeration pairs . SEMI

    SEMI            shift and go to state 387


state 377

    (92) statement -> ENQUEUE ( var , type . ) statements
    (93) statement -> ENQUEUE ( var , type . , expr ) statements

    )               shift and go to state 389
    ,               shift and go to state 388


state 378

    (94) statement -> DEFER_ENQUEUEING ( var , type . ) statements

    )               shift and go to state 390


state 379

    (95) statement -> STALL_AND_WAIT ( var , var . ) SEMI

    )               shift and go to state 391


state 380

    (96) statement -> WAKEUP_PORT ( var , var . ) SEMI

    )               shift and go to state 392


state 381

    (97) statement -> PEEK ( var , type . pairs ) statements
    (75) pairs -> . , pairsx
    (76) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 53
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 393
    empty                          shift and go to state 54

state 382

    (98) statement -> CHECK_ALLOCATE ( var ) SEMI .

    ENQUEUE         reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    DEFER_ENQUEUEING reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    WAKEUP_PORT     reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    PEEK            reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_PROBE     reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    RETURN          reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NOT             reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    INCR            reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    DECR            reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    DASH            reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IF              reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STATIC_CAST     reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NEW             reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    OOD             reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    (               reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_VALID        reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_INVALID      reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STRING          reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NUMBER          reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    FLOATNUMBER     reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    LIT_BOOL        reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IDENT           reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    }               reduce using rule 98 (statement -> CHECK_ALLOCATE ( var ) SEMI .)


state 383

    (100) statement -> CHECK_STOP_SLOTS ( var , STRING . , STRING ) SEMI

    ,               shift and go to state 394


state 384

    (101) statement -> CHECK_PROBE ( var , var . ) SEMI

    )               shift and go to state 395


state 385

    (104) if_statement -> IF ( expr ) statements .
    (105) if_statement -> IF ( expr ) statements . ELSE statements
    (106) if_statement -> IF ( expr ) statements . ELSE if_statement

    ENQUEUE         reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    DEFER_ENQUEUEING reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    STALL_AND_WAIT  reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    WAKEUP_PORT     reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    PEEK            reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    CHECK_ALLOCATE  reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    CHECK_NEXT_CYCLE reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    CHECK_STOP_SLOTS reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    CHECK_PROBE     reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    RETURN          reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    NOT             reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    INCR            reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    DECR            reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    DASH            reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    IF              reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    STATIC_CAST     reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    NEW             reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    OOD             reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    (               reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    IS_VALID        reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    IS_INVALID      reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    STRING          reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    NUMBER          reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    FLOATNUMBER     reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    LIT_BOOL        reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    IDENT           reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    }               reduce using rule 104 (if_statement -> IF ( expr ) statements .)
    ELSE            shift and go to state 396


state 386

    (108) aexpr -> STATIC_CAST ( type , STRING , expr ) .

    DOT             reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    [               reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SEMI            reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    STAR            reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SLASH           reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    MOD             reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    PLUS            reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    DASH            reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LT              reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GT              reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LE              reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GE              reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    EQ              reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    NE              reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    AND             reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    OR              reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    RIGHTSHIFT      reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LEFTSHIFT       reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    )               reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ,               reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ]               reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ASSIGN          reduce using rule 108 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)


state 387

    (47) type_state -> ident , enumeration pairs SEMI .

    IDENT           reduce using rule 47 (type_state -> ident , enumeration pairs SEMI .)
    }               reduce using rule 47 (type_state -> ident , enumeration pairs SEMI .)


state 388

    (93) statement -> ENQUEUE ( var , type , . expr ) statements
    (120) expr -> . aexpr
    (121) expr -> . expr STAR expr
    (122) expr -> . expr SLASH expr
    (123) expr -> . expr MOD expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr DASH expr
    (126) expr -> . expr LT expr
    (127) expr -> . expr GT expr
    (128) expr -> . expr LE expr
    (129) expr -> . expr GE expr
    (130) expr -> . expr EQ expr
    (131) expr -> . expr NE expr
    (132) expr -> . expr AND expr
    (133) expr -> . expr OR expr
    (134) expr -> . expr RIGHTSHIFT expr
    (135) expr -> . expr LEFTSHIFT expr
    (136) expr -> . NOT expr
    (137) expr -> . INCR expr
    (138) expr -> . DECR expr
    (139) expr -> . DASH expr
    (107) aexpr -> . STATIC_CAST ( type , expr )
    (108) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (109) aexpr -> . var
    (110) aexpr -> . type ident
    (111) aexpr -> . literal
    (112) aexpr -> . enumeration
    (113) aexpr -> . ident ( exprs )
    (114) aexpr -> . NEW type
    (115) aexpr -> . OOD
    (116) aexpr -> . aexpr DOT ident
    (117) aexpr -> . aexpr DOT ident ( exprs )
    (118) aexpr -> . aexpr [ exprs ]
    (119) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (140) aexpr -> . ( expr )
    (141) aexpr -> . IS_VALID ( expr )
    (142) aexpr -> . IS_INVALID ( expr )
    (148) var -> . ident
    (64) type -> . typestr
    (143) literal -> . STRING
    (144) literal -> . NUMBER
    (145) literal -> . FLOATNUMBER
    (146) literal -> . LIT_BOOL
    (147) enumeration -> . ident : ident
    (72) ident -> . IDENT
    (62) typestr -> . typestr DOUBLE_COLON ident
    (63) typestr -> . ident

    NOT             shift and go to state 78
    INCR            shift and go to state 79
    DECR            shift and go to state 80
    DASH            shift and go to state 77
    STATIC_CAST     shift and go to state 81
    NEW             shift and go to state 87
    OOD             shift and go to state 88
    (               shift and go to state 82
    IS_VALID        shift and go to state 89
    IS_INVALID      shift and go to state 90
    STRING          shift and go to state 83
    NUMBER          shift and go to state 91
    FLOATNUMBER     shift and go to state 92
    LIT_BOOL        shift and go to state 93
    IDENT           shift and go to state 26

    var                            shift and go to state 84
    type                           shift and go to state 73
    expr                           shift and go to state 397
    aexpr                          shift and go to state 76
    ident                          shift and go to state 74
    literal                        shift and go to state 85
    enumeration                    shift and go to state 86
    typestr                        shift and go to state 24

state 389

    (92) statement -> ENQUEUE ( var , type ) . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    {               shift and go to state 184

    statements                     shift and go to state 398

state 390

    (94) statement -> DEFER_ENQUEUEING ( var , type ) . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    {               shift and go to state 184

    statements                     shift and go to state 399

state 391

    (95) statement -> STALL_AND_WAIT ( var , var ) . SEMI

    SEMI            shift and go to state 400


state 392

    (96) statement -> WAKEUP_PORT ( var , var ) . SEMI

    SEMI            shift and go to state 401


state 393

    (97) statement -> PEEK ( var , type pairs . ) statements

    )               shift and go to state 402


state 394

    (100) statement -> CHECK_STOP_SLOTS ( var , STRING , . STRING ) SEMI

    STRING          shift and go to state 403


state 395

    (101) statement -> CHECK_PROBE ( var , var ) . SEMI

    SEMI            shift and go to state 404


state 396

    (105) if_statement -> IF ( expr ) statements ELSE . statements
    (106) if_statement -> IF ( expr ) statements ELSE . if_statement
    (83) statements -> . { statements_inner }
    (84) statements -> . { }
    (104) if_statement -> . IF ( expr ) statements
    (105) if_statement -> . IF ( expr ) statements ELSE statements
    (106) if_statement -> . IF ( expr ) statements ELSE if_statement

    {               shift and go to state 184
    IF              shift and go to state 259

    statements                     shift and go to state 405
    if_statement                   shift and go to state 406

state 397

    (93) statement -> ENQUEUE ( var , type , expr . ) statements
    (121) expr -> expr . STAR expr
    (122) expr -> expr . SLASH expr
    (123) expr -> expr . MOD expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . DASH expr
    (126) expr -> expr . LT expr
    (127) expr -> expr . GT expr
    (128) expr -> expr . LE expr
    (129) expr -> expr . GE expr
    (130) expr -> expr . EQ expr
    (131) expr -> expr . NE expr
    (132) expr -> expr . AND expr
    (133) expr -> expr . OR expr
    (134) expr -> expr . RIGHTSHIFT expr
    (135) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 407
    STAR            shift and go to state 127
    SLASH           shift and go to state 128
    MOD             shift and go to state 129
    PLUS            shift and go to state 130
    DASH            shift and go to state 131
    LT              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    GE              shift and go to state 135
    EQ              shift and go to state 136
    NE              shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    RIGHTSHIFT      shift and go to state 140
    LEFTSHIFT       shift and go to state 141


state 398

    (92) statement -> ENQUEUE ( var , type ) statements .

    ENQUEUE         reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    DEFER_ENQUEUEING reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    STALL_AND_WAIT  reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    WAKEUP_PORT     reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    PEEK            reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    CHECK_ALLOCATE  reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    CHECK_NEXT_CYCLE reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    CHECK_STOP_SLOTS reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    CHECK_PROBE     reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    RETURN          reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    NOT             reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    INCR            reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    DECR            reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    DASH            reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    IF              reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    STATIC_CAST     reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    NEW             reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    OOD             reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    (               reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    IS_VALID        reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    IS_INVALID      reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    STRING          reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    NUMBER          reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    FLOATNUMBER     reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    LIT_BOOL        reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    IDENT           reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)
    }               reduce using rule 92 (statement -> ENQUEUE ( var , type ) statements .)


state 399

    (94) statement -> DEFER_ENQUEUEING ( var , type ) statements .

    ENQUEUE         reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    DEFER_ENQUEUEING reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    STALL_AND_WAIT  reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    WAKEUP_PORT     reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    PEEK            reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    CHECK_ALLOCATE  reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    CHECK_NEXT_CYCLE reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    CHECK_STOP_SLOTS reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    CHECK_PROBE     reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    RETURN          reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    NOT             reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    INCR            reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    DECR            reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    DASH            reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    IF              reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    STATIC_CAST     reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    NEW             reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    OOD             reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    (               reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    IS_VALID        reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    IS_INVALID      reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    STRING          reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    NUMBER          reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    FLOATNUMBER     reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    LIT_BOOL        reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    IDENT           reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)
    }               reduce using rule 94 (statement -> DEFER_ENQUEUEING ( var , type ) statements .)


state 400

    (95) statement -> STALL_AND_WAIT ( var , var ) SEMI .

    ENQUEUE         reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    DEFER_ENQUEUEING reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    WAKEUP_PORT     reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    PEEK            reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_PROBE     reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    RETURN          reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NOT             reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    INCR            reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    DECR            reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    DASH            reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IF              reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STATIC_CAST     reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NEW             reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    OOD             reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    (               reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_VALID        reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_INVALID      reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STRING          reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NUMBER          reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    FLOATNUMBER     reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    LIT_BOOL        reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IDENT           reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    }               reduce using rule 95 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)


state 401

    (96) statement -> WAKEUP_PORT ( var , var ) SEMI .

    ENQUEUE         reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    DEFER_ENQUEUEING reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    WAKEUP_PORT     reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    PEEK            reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    CHECK_PROBE     reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    RETURN          reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    NOT             reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    INCR            reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    DECR            reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    DASH            reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    IF              reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    STATIC_CAST     reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    NEW             reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    OOD             reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    (               reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    IS_VALID        reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    IS_INVALID      reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    STRING          reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    NUMBER          reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    FLOATNUMBER     reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    LIT_BOOL        reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    IDENT           reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)
    }               reduce using rule 96 (statement -> WAKEUP_PORT ( var , var ) SEMI .)


state 402

    (97) statement -> PEEK ( var , type pairs ) . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    {               shift and go to state 184

    statements                     shift and go to state 408

state 403

    (100) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING . ) SEMI

    )               shift and go to state 409


state 404

    (101) statement -> CHECK_PROBE ( var , var ) SEMI .

    ENQUEUE         reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    DEFER_ENQUEUEING reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    WAKEUP_PORT     reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    PEEK            reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    CHECK_PROBE     reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    RETURN          reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    NOT             reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    INCR            reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    DECR            reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    DASH            reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    IF              reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    STATIC_CAST     reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    NEW             reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    OOD             reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    (               reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    IS_VALID        reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    IS_INVALID      reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    STRING          reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    NUMBER          reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    FLOATNUMBER     reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    LIT_BOOL        reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    IDENT           reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)
    }               reduce using rule 101 (statement -> CHECK_PROBE ( var , var ) SEMI .)


state 405

    (105) if_statement -> IF ( expr ) statements ELSE statements .

    ENQUEUE         reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    DEFER_ENQUEUEING reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    STALL_AND_WAIT  reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    WAKEUP_PORT     reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    PEEK            reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_ALLOCATE  reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_NEXT_CYCLE reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_STOP_SLOTS reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_PROBE     reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    RETURN          reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    NOT             reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    INCR            reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    DECR            reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    DASH            reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    IF              reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    STATIC_CAST     reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    NEW             reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    OOD             reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    (               reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_VALID        reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_INVALID      reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    STRING          reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    NUMBER          reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    FLOATNUMBER     reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    LIT_BOOL        reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    IDENT           reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)
    }               reduce using rule 105 (if_statement -> IF ( expr ) statements ELSE statements .)


state 406

    (106) if_statement -> IF ( expr ) statements ELSE if_statement .

    ENQUEUE         reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    DEFER_ENQUEUEING reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STALL_AND_WAIT  reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    WAKEUP_PORT     reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    PEEK            reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_ALLOCATE  reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_NEXT_CYCLE reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_STOP_SLOTS reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_PROBE     reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    RETURN          reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NOT             reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    INCR            reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    DECR            reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    DASH            reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IF              reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STATIC_CAST     reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NEW             reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    OOD             reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    (               reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_VALID        reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_INVALID      reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STRING          reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NUMBER          reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    FLOATNUMBER     reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    LIT_BOOL        reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IDENT           reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    }               reduce using rule 106 (if_statement -> IF ( expr ) statements ELSE if_statement .)


state 407

    (93) statement -> ENQUEUE ( var , type , expr ) . statements
    (83) statements -> . { statements_inner }
    (84) statements -> . { }

    {               shift and go to state 184

    statements                     shift and go to state 410

state 408

    (97) statement -> PEEK ( var , type pairs ) statements .

    ENQUEUE         reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    DEFER_ENQUEUEING reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    STALL_AND_WAIT  reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    WAKEUP_PORT     reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    PEEK            reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_ALLOCATE  reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_NEXT_CYCLE reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_STOP_SLOTS reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_PROBE     reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    RETURN          reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    NOT             reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    INCR            reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    DECR            reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    DASH            reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    IF              reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    STATIC_CAST     reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    NEW             reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    OOD             reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    (               reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    IS_VALID        reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    IS_INVALID      reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    STRING          reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    NUMBER          reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    FLOATNUMBER     reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    LIT_BOOL        reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    IDENT           reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)
    }               reduce using rule 97 (statement -> PEEK ( var , type pairs ) statements .)


state 409

    (100) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) . SEMI

    SEMI            shift and go to state 411


state 410

    (93) statement -> ENQUEUE ( var , type , expr ) statements .

    ENQUEUE         reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    DEFER_ENQUEUEING reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    STALL_AND_WAIT  reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    WAKEUP_PORT     reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    PEEK            reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    CHECK_ALLOCATE  reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    CHECK_NEXT_CYCLE reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    CHECK_STOP_SLOTS reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    CHECK_PROBE     reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    RETURN          reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    NOT             reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    INCR            reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    DECR            reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    DASH            reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IF              reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    STATIC_CAST     reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    NEW             reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    OOD             reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    (               reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IS_VALID        reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IS_INVALID      reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    STRING          reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    NUMBER          reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    FLOATNUMBER     reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    LIT_BOOL        reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    IDENT           reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)
    }               reduce using rule 93 (statement -> ENQUEUE ( var , type , expr ) statements .)


state 411

    (100) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .

    ENQUEUE         reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    DEFER_ENQUEUEING reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STALL_AND_WAIT  reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    WAKEUP_PORT     reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    PEEK            reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_NEXT_CYCLE reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_PROBE     reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    RETURN          reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NOT             reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    INCR            reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    DECR            reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    DASH            reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IF              reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STATIC_CAST     reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NEW             reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    OOD             reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    (               reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_VALID        reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_INVALID      reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STRING          reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NUMBER          reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    FLOATNUMBER     reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    LIT_BOOL        reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IDENT           reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    }               reduce using rule 100 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOUBLE_COLON in state 24 resolved as shift
WARNING: shift/reduce conflict for ) in state 46 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 282 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 357 resolved as shift
WARNING: reduce/reduce conflict in state 98 resolved using rule (params -> empty)
WARNING: rejected rule (types -> empty) in state 98
