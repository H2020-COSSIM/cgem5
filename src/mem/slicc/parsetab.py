
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftINCRDECRleftORleftANDleftEQNEleftLTGTLEGEleftRIGHTSHIFTLEFTSHIFTleftPLUSDASHleftSTARSLASHMODrightNOTUMINUSACTION AMP AND ASSIGN CHECK_ALLOCATE CHECK_NEXT_CYCLE CHECK_PROBE CHECK_STOP_SLOTS CONST DASH DECR DEFER_ENQUEUEING DOT DOUBLE_COLON ELSE ENQUEUE ENUM EQ EXTERN_TYPE FLOATNUMBER GE GLOBAL GT IDENT IF INCLUDE INCR IN_PORT IS_INVALID IS_VALID LE LEFTSHIFT LIT_BOOL LT MACHINE MOD NE NEW NOT NUMBER OOD OR OUT_PORT PEEK PLUS PROTOCOL RETURN RIGHTSHIFT SEMI SLASH STALL_AND_WAIT STAR STATE_DECL STATIC_CAST STRING STRUCT TRANS VOID WAKEUP_PORTfile : declsempty :decls : declsxdeclsx : decl declsxdeclsx : emptydecl : PROTOCOL STRING SEMIdecl : INCLUDE STRING SEMIdecl : MACHINE '(' enumeration ')' ':' obj_decls '{' decls '}'decl : MACHINE '(' enumeration pairs ')' ':' obj_decls '{' decls '}'decl : ACTION '(' ident pairs ')' statementsdecl : IN_PORT '(' ident ',' type ',' var pairs ')' statementsdecl : OUT_PORT '(' ident ',' type ',' var pairs ')' SEMIdecl : TRANS '(' idents ',' idents ',' ident_or_star ')' identsdecl : TRANS '(' idents ',' idents ')' identsdecl : TRANS '(' idents ',' idents ',' ident_or_star ')' idents identsdecl : TRANS '(' idents ',' idents ')' idents identsdecl : EXTERN_TYPE '(' type pairs ')' SEMIdecl : GLOBAL '(' type pairs ')' '{' type_members '}'decl : STRUCT '(' type pairs ')' '{' type_members '}'decl : ENUM '(' type pairs ')' '{' type_enums   '}'decl : STATE_DECL '(' type pairs ')' '{' type_states   '}'obj_decls : obj_decl obj_declsobj_decls : emptytype_members : type_member type_memberstype_members : emptytype_member : obj_decl\n        | func_decl\n        | func_defdecl : obj_declobj_decl : type ident pairs SEMIobj_decl : type STAR ident pairs SEMIobj_decl : type ident ASSIGN expr SEMIobj_decl : type STAR ident ASSIGN expr SEMIdecl : func_declfunc_decl :  void ident '(' params ')' pairs SEMI\n        | type ident '(' params ')' pairs SEMIfunc_decl :  void ident '(' types ')' pairs SEMI\n        | type ident '(' types ')' pairs SEMIdecl : func_deffunc_def : void ident '(' params ')' pairs statements\n        | type ident '(' params ')' pairs statementstype_enums : type_enum type_enumstype_enums : emptytype_enum : ident pairs SEMItype_states : type_state type_statestype_states : emptytype_state : ident ',' enumeration pairs SEMIparams : param ',' paramsparams : paramparams : emptyparam : type identparam : type STAR identparam : type AMP identparam : CONST type AMP identparam : type STAR ident ASSIGN STRINGparam : type ident ASSIGN NUMBERparam : type ident ASSIGN LIT_BOOLparam : type ident ASSIGN STRINGtypes : type ',' typestypes : typetypes : emptytypestr : typestr DOUBLE_COLON identtypestr : identtype : typestrvoid : VOIDidents : '{' identx '}'idents : identidentx : ident SEMI identx\n        | ident ',' identxidentx : ident identxidentx : emptyident : IDENTident_or_star : ident\n        | STARpairs : ',' pairsxpairs : emptypairsx : pair ',' pairsxpairsx : pairpair : ident '=' STRING\n        | ident '=' ident\n        | ident '=' NUMBERpair : STRINGstatements : '{' statements_inner '}'statements : '{' '}'statements_inner : statement statements_innerstatements_inner : statementexprs : expr ',' exprsexprs : exprexprs : emptystatement : expr SEMIstatement : expr ASSIGN expr SEMIstatement : ENQUEUE '(' var ',' type ')' statementsstatement : ENQUEUE '(' var ',' type ',' expr ')' statementsstatement : DEFER_ENQUEUEING '(' var ',' type ')' statementsstatement : STALL_AND_WAIT '(' var ',' var ')' SEMIstatement : WAKEUP_PORT '(' var ',' var ')' SEMIstatement : PEEK '(' var ',' type pairs ')' statementsstatement : CHECK_ALLOCATE '(' var ')' SEMIstatement : CHECK_NEXT_CYCLE '(' ')' SEMIstatement : CHECK_STOP_SLOTS '(' var ',' STRING ',' STRING ')' SEMIstatement : CHECK_PROBE '(' var ',' var ')' SEMIstatement : RETURN expr SEMIstatement : if_statementif_statement : IF '(' expr ')' statementsif_statement : IF '(' expr ')' statements ELSE statementsif_statement : IF '(' expr ')' statements ELSE if_statementaexpr : STATIC_CAST '(' type ',' expr ')'aexpr : STATIC_CAST '(' type ',' STRING ',' expr ')'aexpr : varaexpr : type identaexpr : literalaexpr : enumerationaexpr : ident '(' exprs ')'aexpr : NEW typeaexpr : OODaexpr : aexpr DOT identaexpr : aexpr DOT ident '(' exprs ')'aexpr : aexpr '[' exprs ']'aexpr : type DOUBLE_COLON ident '(' exprs ')'expr : aexprexpr : expr STAR  expr\n        | expr SLASH expr\n        | expr MOD   expr\n        | expr PLUS  expr\n        | expr DASH  expr\n        | expr LT    expr\n        | expr GT    expr\n        | expr LE    expr\n        | expr GE    expr\n        | expr EQ    expr\n        | expr NE    expr\n        | expr AND   expr\n        | expr OR    expr\n        | expr RIGHTSHIFT expr\n        | expr LEFTSHIFT  exprexpr : NOT expr\n        | INCR expr\n        | DECR expr\n        | DASH expr %prec UMINUSaexpr : '(' expr ')'aexpr : IS_VALID '(' expr ')'aexpr : IS_INVALID '(' expr ')'literal : STRINGliteral : NUMBERliteral : FLOATNUMBERliteral : LIT_BOOLenumeration : ident ':' identvar : ident"
    
_lr_action_items = {'PROTOCOL':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[6,6,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,6,-84,-36,-41,-38,-14,-35,-40,-37,6,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'INCLUDE':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[7,7,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,7,-84,-36,-41,-38,-14,-35,-40,-37,7,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'MACHINE':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[8,8,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,8,-84,-36,-41,-38,-14,-35,-40,-37,8,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'ACTION':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[9,9,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,9,-84,-36,-41,-38,-14,-35,-40,-37,9,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'IN_PORT':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[11,11,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,11,-84,-36,-41,-38,-14,-35,-40,-37,11,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'OUT_PORT':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[13,13,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,13,-84,-36,-41,-38,-14,-35,-40,-37,13,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'TRANS':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[14,14,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,14,-84,-36,-41,-38,-14,-35,-40,-37,14,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'EXTERN_TYPE':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[15,15,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,15,-84,-36,-41,-38,-14,-35,-40,-37,15,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'GLOBAL':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[16,16,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,16,-84,-36,-41,-38,-14,-35,-40,-37,16,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'STRUCT':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[17,17,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,17,-84,-36,-41,-38,-14,-35,-40,-37,17,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'ENUM':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[18,18,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,18,-84,-36,-41,-38,-14,-35,-40,-37,18,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'STATE_DECL':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,240,245,274,275,276,282,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[19,19,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,19,-84,-36,-41,-38,-14,-35,-40,-37,19,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'$end':([0,1,2,3,4,5,20,21,22,26,27,44,45,59,72,126,163,167,183,227,233,245,274,275,276,282,298,299,300,303,327,328,330,331,334,337,357,360,372,374,375,],[-2,0,-1,-3,-2,-5,-29,-34,-39,-72,-4,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,-84,-36,-41,-38,-14,-35,-40,-37,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'VOID':([0,4,20,21,22,26,44,45,59,72,126,163,167,183,227,233,234,235,240,245,274,275,276,282,284,286,287,288,298,299,300,302,303,327,328,330,331,334,337,357,360,372,374,375,],[25,25,-29,-34,-39,-72,-6,-7,-67,-30,-32,-31,-66,-10,-33,-17,25,25,25,-84,-36,-41,-38,-14,25,-26,-27,-28,-35,-40,-37,25,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'IDENT':([0,4,10,12,20,21,22,23,24,25,26,30,31,32,34,35,36,37,38,39,40,41,43,44,45,51,52,53,58,59,65,66,69,71,72,73,74,77,78,79,80,82,87,94,99,105,106,107,109,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,151,152,153,155,156,159,161,162,163,167,168,170,179,181,182,183,184,185,221,222,227,228,229,230,233,234,235,236,237,240,245,246,257,258,262,264,265,267,274,275,276,282,284,286,287,288,291,295,298,299,300,302,303,305,306,307,308,309,310,311,312,314,315,317,326,327,328,330,331,334,336,337,349,355,357,358,360,361,362,363,364,365,366,368,370,372,374,375,382,385,387,388,398,399,400,401,404,405,406,408,410,411,],[26,26,-63,26,-29,-34,-39,26,-64,-65,-72,26,26,26,26,26,26,26,26,26,26,26,26,-6,-7,26,26,26,26,-67,26,-62,26,26,-30,26,-63,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-32,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-31,-66,26,26,26,26,26,-10,26,26,26,26,-33,26,26,26,-17,26,26,26,26,26,-84,26,26,-103,26,26,26,26,-36,-41,-38,26,26,-26,-27,-28,26,26,-35,-40,-37,26,-83,-90,26,26,26,26,26,26,26,26,26,26,26,-16,-18,-19,-20,-21,26,-8,-102,26,26,-44,-9,-91,26,26,26,26,26,-99,26,-11,-12,-15,-98,-104,-47,26,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'}':([3,4,5,20,21,22,26,27,44,45,58,59,72,108,109,110,126,163,167,168,169,170,183,184,227,231,232,233,234,235,236,237,240,244,245,246,258,274,275,276,282,283,284,285,286,287,288,289,290,291,292,294,295,296,298,299,300,301,302,303,304,305,327,328,329,330,331,332,334,335,337,338,349,357,358,360,361,368,372,374,375,382,385,387,398,399,400,401,404,405,406,408,410,411,],[-3,-2,-5,-29,-34,-39,-72,-4,-6,-7,-2,-67,-30,167,-2,-71,-32,-31,-66,-2,-70,-2,-10,245,-33,-68,-69,-17,-2,-2,-2,-2,-2,303,-84,-86,-103,-36,-41,-38,-14,328,-2,-25,-26,-27,-28,330,331,-2,-43,334,-2,-46,-35,-40,-37,337,-2,-83,-85,-90,-16,-18,-24,-19,-20,-42,-21,-45,-8,360,-102,-13,-44,-9,-91,-99,-11,-12,-15,-98,-104,-47,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'STRING':([6,7,51,53,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,161,162,184,214,245,246,257,258,262,264,265,267,273,303,305,306,317,349,355,361,368,369,382,385,388,394,398,399,400,401,404,405,406,408,410,411,],[28,29,83,103,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,103,225,83,272,-84,83,83,-103,83,83,83,323,324,-83,-90,83,83,-102,83,-91,-99,383,-98,-104,83,403,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'(':([8,9,11,13,14,15,16,17,18,19,26,33,42,51,74,77,78,79,80,81,82,89,90,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,186,205,245,246,248,249,250,251,252,253,254,255,256,257,258,259,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[30,31,32,35,36,37,38,39,40,41,-72,52,65,82,125,82,82,82,82,148,82,151,152,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,262,265,-84,82,307,308,309,310,311,312,313,314,315,82,-103,317,82,82,82,82,-83,-90,82,82,-102,82,-91,-99,-98,-104,82,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'DOUBLE_COLON':([10,24,26,66,73,74,],[-63,43,-72,-62,124,-63,]),'STAR':([10,12,24,26,66,74,75,76,83,84,85,86,88,91,92,93,94,120,123,144,145,146,147,149,150,164,181,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,221,229,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,34,-64,-72,-62,-148,127,-120,-143,-109,-111,-112,-115,-144,-145,-146,155,-147,-110,-139,-136,127,127,127,-114,127,34,127,-121,-122,-123,127,127,127,127,127,127,127,127,127,127,127,127,-116,-140,127,127,155,281,127,-113,-118,-141,-142,127,127,-143,127,127,-119,-117,-107,127,-108,127,]),',':([10,24,26,33,46,48,49,55,56,57,59,60,61,62,63,64,66,74,76,83,84,85,86,88,91,92,93,94,97,101,103,109,120,122,123,144,145,146,147,150,154,157,158,165,166,167,176,177,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,208,211,215,216,224,225,226,242,260,261,263,266,268,269,270,271,272,277,278,293,297,323,324,340,341,342,343,344,347,348,352,353,354,359,377,381,383,386,],[-63,-64,-72,53,53,53,71,53,106,107,-67,53,53,53,53,53,-62,-148,-120,-143,-109,-111,-112,-115,-144,-145,-146,153,159,161,-82,170,-147,185,-110,-139,-136,-137,-138,-114,-51,53,53,228,229,-66,53,53,264,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-116,267,-140,153,-52,-53,-80,-79,-81,53,-148,53,-113,-118,-141,-142,-56,-57,-58,-54,53,53,336,355,-55,362,363,364,365,366,369,370,-119,-117,-107,53,388,53,394,-108,]),')':([10,24,26,46,48,52,54,59,60,61,62,63,64,65,66,68,70,74,76,83,84,85,86,88,91,92,93,94,95,96,97,98,100,101,103,111,112,113,114,115,116,117,120,123,125,144,145,146,147,149,150,153,154,159,166,167,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,211,212,213,215,216,219,220,223,224,225,226,260,261,262,263,264,265,266,268,269,270,271,272,277,278,279,280,281,313,318,319,320,321,322,323,324,325,345,350,352,353,354,373,377,378,379,380,381,384,386,393,397,403,],[-63,-64,-72,67,-2,-2,-76,-67,-2,-2,-2,-2,-2,-2,-62,119,121,-148,-120,-143,-109,-111,-112,-115,-144,-145,-146,-60,157,158,-49,-50,-75,-78,-82,171,172,173,174,175,176,177,-147,-110,-2,-139,-136,-137,-138,208,-114,-2,-51,-2,230,-66,263,-88,-89,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-116,-140,268,269,-60,-59,-61,-52,-53,-48,-50,-77,-80,-79,-81,-148,-2,-2,-113,-2,-2,-118,-141,-142,-56,-57,-58,-54,-2,326,-73,-74,346,351,352,-87,353,354,-143,-55,356,367,371,-119,-117,-107,386,389,390,391,392,-2,395,-108,402,407,409,]),'AMP':([10,24,26,66,94,160,221,],[-63,-64,-72,-62,156,222,156,]),'DOT':([10,24,26,66,74,76,83,84,85,86,88,91,92,93,120,123,150,205,208,263,266,268,269,323,352,353,354,386,],[-63,-64,-72,-62,-148,142,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-114,-116,-140,-113,-118,-141,-142,-143,-119,-117,-107,-108,]),'[':([10,24,26,66,74,76,83,84,85,86,88,91,92,93,120,123,150,205,208,263,266,268,269,323,352,353,354,386,],[-63,-64,-72,-62,-148,143,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-114,-116,-140,-113,-118,-141,-142,-143,-119,-117,-107,-108,]),'SEMI':([10,24,26,28,29,33,50,54,55,66,74,75,76,83,84,85,86,88,91,92,93,100,101,103,104,109,120,123,144,145,146,147,150,157,158,164,171,176,177,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,217,218,223,224,225,226,238,239,242,247,263,266,268,269,293,316,333,339,346,352,353,354,356,359,367,376,386,391,392,395,409,],[-63,-64,-72,44,45,-2,72,-76,-2,-62,-148,126,-120,-143,-109,-111,-112,-115,-144,-145,-146,-75,-78,-82,163,168,-147,-110,-139,-136,-137,-138,-114,-2,-2,227,233,-2,-2,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-116,-140,274,276,-77,-80,-79,-81,298,300,-2,305,-113,-118,-141,-142,-2,349,358,361,368,-119,-117,-107,374,-2,382,387,-108,400,401,404,411,]),'SLASH':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,128,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,128,128,128,-114,128,128,-121,-122,-123,128,128,128,128,128,128,128,128,128,128,128,128,-116,-140,128,128,128,-113,-118,-141,-142,128,128,-143,128,128,-119,-117,-107,128,-108,128,]),'MOD':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,129,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,129,129,129,-114,129,129,-121,-122,-123,129,129,129,129,129,129,129,129,129,129,129,129,-116,-140,129,129,129,-113,-118,-141,-142,129,129,-143,129,129,-119,-117,-107,129,-108,129,]),'PLUS':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,130,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,130,130,130,-114,130,130,-121,-122,-123,-124,-125,130,130,130,130,130,130,130,130,130,130,-116,-140,130,130,130,-113,-118,-141,-142,130,130,-143,130,130,-119,-117,-107,130,-108,130,]),'DASH':([10,24,26,51,66,74,75,76,77,78,79,80,82,83,84,85,86,88,91,92,93,105,120,123,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,145,146,147,149,150,151,152,164,184,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,245,246,247,257,258,262,263,264,265,266,267,268,269,303,305,306,316,317,322,323,339,349,350,352,353,354,355,361,368,373,382,385,386,388,397,398,399,400,401,404,405,406,408,410,411,],[-63,-64,-72,77,-62,-148,131,-120,77,77,77,77,77,-143,-109,-111,-112,-115,-144,-145,-146,77,-147,-110,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-139,-136,131,131,131,-114,77,77,131,77,131,-121,-122,-123,-124,-125,131,131,131,131,131,131,131,131,131,131,-116,-140,131,131,-84,77,131,77,-103,77,-113,77,77,-118,77,-141,-142,-83,-90,77,131,77,131,-143,131,-102,131,-119,-117,-107,77,-91,-99,131,-98,-104,-108,77,131,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'LT':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,132,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,132,132,132,-114,132,132,-121,-122,-123,-124,-125,-126,-127,-128,-129,132,132,132,132,-134,-135,-116,-140,132,132,132,-113,-118,-141,-142,132,132,-143,132,132,-119,-117,-107,132,-108,132,]),'GT':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,133,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,133,133,133,-114,133,133,-121,-122,-123,-124,-125,-126,-127,-128,-129,133,133,133,133,-134,-135,-116,-140,133,133,133,-113,-118,-141,-142,133,133,-143,133,133,-119,-117,-107,133,-108,133,]),'LE':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,134,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,134,134,134,-114,134,134,-121,-122,-123,-124,-125,-126,-127,-128,-129,134,134,134,134,-134,-135,-116,-140,134,134,134,-113,-118,-141,-142,134,134,-143,134,134,-119,-117,-107,134,-108,134,]),'GE':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,135,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,135,135,135,-114,135,135,-121,-122,-123,-124,-125,-126,-127,-128,-129,135,135,135,135,-134,-135,-116,-140,135,135,135,-113,-118,-141,-142,135,135,-143,135,135,-119,-117,-107,135,-108,135,]),'EQ':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,136,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,136,136,136,-114,136,136,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,136,136,-134,-135,-116,-140,136,136,136,-113,-118,-141,-142,136,136,-143,136,136,-119,-117,-107,136,-108,136,]),'NE':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,137,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,137,137,137,-114,137,137,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,137,137,-134,-135,-116,-140,137,137,137,-113,-118,-141,-142,137,137,-143,137,137,-119,-117,-107,137,-108,137,]),'AND':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,138,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,138,138,138,-114,138,138,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,138,-134,-135,-116,-140,138,138,138,-113,-118,-141,-142,138,138,-143,138,138,-119,-117,-107,138,-108,138,]),'OR':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,139,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,139,139,139,-114,139,139,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-116,-140,139,139,139,-113,-118,-141,-142,139,139,-143,139,139,-119,-117,-107,139,-108,139,]),'RIGHTSHIFT':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,140,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,140,140,140,-114,140,140,-121,-122,-123,-124,-125,140,140,140,140,140,140,140,140,-134,-135,-116,-140,140,140,140,-113,-118,-141,-142,140,140,-143,140,140,-119,-117,-107,140,-108,140,]),'LEFTSHIFT':([10,24,26,66,74,75,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,149,150,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,209,210,247,263,266,268,269,316,322,323,339,350,352,353,354,373,386,397,],[-63,-64,-72,-62,-148,141,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,141,141,141,-114,141,141,-121,-122,-123,-124,-125,141,141,141,141,141,141,141,141,-134,-135,-116,-140,141,141,141,-113,-118,-141,-142,141,141,-143,141,141,-119,-117,-107,141,-108,141,]),']':([10,24,26,66,74,76,83,84,85,86,88,91,92,93,120,123,143,144,145,146,147,150,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,263,264,266,268,269,320,352,353,354,386,],[-63,-64,-72,-62,-148,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-2,-139,-136,-137,-138,-114,-88,-89,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-116,266,-140,-113,-2,-118,-141,-142,-87,-119,-117,-107,-108,]),'ASSIGN':([10,24,26,33,55,66,74,76,83,84,85,86,88,91,92,93,120,123,144,145,146,147,150,154,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,208,215,242,247,263,266,268,269,352,353,354,386,],[-63,-64,-72,51,105,-62,-148,-120,-143,-109,-111,-112,-115,-144,-145,-146,-147,-110,-139,-136,-137,-138,-114,214,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-116,-140,273,51,306,-113,-118,-141,-142,-119,-117,-107,-108,]),':':([26,47,67,74,119,],[-72,69,118,69,182,]),'=':([26,102,],[-72,162,]),'{':([26,36,54,59,72,100,101,103,107,118,121,126,157,163,167,172,173,174,175,176,178,179,180,182,217,223,224,225,226,227,230,238,241,243,282,326,351,357,371,389,390,396,402,407,],[-72,58,-76,-67,-30,-75,-78,-82,58,-2,184,-32,-2,-31,-66,234,235,236,237,-2,240,-2,-23,-2,184,-77,-80,-79,-81,-33,58,184,-22,302,58,58,184,58,184,184,184,184,184,184,]),'NOT':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-84,78,78,-103,78,78,78,78,-83,-90,78,78,-102,78,-91,-99,-98,-104,78,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'INCR':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-84,79,79,-103,79,79,79,79,-83,-90,79,79,-102,79,-91,-99,-98,-104,79,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'DECR':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-84,80,80,-103,80,80,80,80,-83,-90,80,80,-102,80,-91,-99,-98,-104,80,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'STATIC_CAST':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-84,81,81,-103,81,81,81,81,-83,-90,81,81,-102,81,-91,-99,-98,-104,81,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'NEW':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-84,87,87,-103,87,87,87,87,-83,-90,87,87,-102,87,-91,-99,-98,-104,87,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'OOD':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-84,88,88,-103,88,88,88,88,-83,-90,88,88,-102,88,-91,-99,-98,-104,88,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'IS_VALID':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-84,89,89,-103,89,89,89,89,-83,-90,89,89,-102,89,-91,-99,-98,-104,89,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'IS_INVALID':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-84,90,90,-103,90,90,90,90,-83,-90,90,90,-102,90,-91,-99,-98,-104,90,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'NUMBER':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,162,184,214,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,226,91,270,-84,91,91,-103,91,91,91,91,-83,-90,91,91,-102,91,-91,-99,-98,-104,91,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'FLOATNUMBER':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-84,92,92,-103,92,92,92,92,-83,-90,92,92,-102,92,-91,-99,-98,-104,92,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'LIT_BOOL':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,214,245,246,257,258,262,264,265,267,303,305,306,317,349,355,361,368,382,385,388,398,399,400,401,404,405,406,408,410,411,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,271,-84,93,93,-103,93,93,93,93,-83,-90,93,93,-102,93,-91,-99,-98,-104,93,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'CONST':([52,65,159,],[99,99,99,]),'ENQUEUE':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[248,-84,248,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'DEFER_ENQUEUEING':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[249,-84,249,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'STALL_AND_WAIT':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[250,-84,250,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'WAKEUP_PORT':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[251,-84,251,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'PEEK':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[252,-84,252,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'CHECK_ALLOCATE':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[253,-84,253,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'CHECK_NEXT_CYCLE':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[254,-84,254,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'CHECK_STOP_SLOTS':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[255,-84,255,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'CHECK_PROBE':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[256,-84,256,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'RETURN':([184,245,246,258,303,305,349,361,368,382,385,398,399,400,401,404,405,406,408,410,411,],[257,-84,257,-103,-83,-90,-102,-91,-99,-98,-104,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'IF':([184,245,246,258,303,305,349,361,368,382,385,396,398,399,400,401,404,405,406,408,410,411,],[259,-84,259,-103,-83,-90,-102,-91,-99,-98,-104,259,-92,-94,-95,-96,-101,-105,-106,-97,-93,-100,]),'ELSE':([245,303,385,],[-84,-83,396,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'decls':([0,240,302,],[2,301,338,]),'declsx':([0,4,240,302,],[3,27,3,3,]),'decl':([0,4,240,302,],[4,4,4,4,]),'empty':([0,4,33,46,48,52,55,58,60,61,62,63,64,65,109,118,125,143,153,157,158,159,168,170,176,177,179,182,234,235,236,237,240,242,261,262,264,265,278,284,291,293,295,302,359,381,],[5,5,54,54,54,98,54,110,54,54,54,54,54,98,110,180,189,189,213,54,54,220,110,110,54,54,180,180,285,285,292,296,5,54,54,189,189,189,54,285,292,54,296,5,54,54,]),'ident':([0,4,12,23,30,31,32,34,35,36,37,38,39,40,41,43,51,52,53,58,65,69,71,73,77,78,79,80,82,87,94,99,105,106,107,109,118,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,151,152,153,155,156,159,161,162,168,170,179,181,182,184,185,221,222,228,229,230,234,235,236,237,240,246,257,262,264,265,267,282,284,291,295,302,306,307,308,309,310,311,312,314,315,317,326,336,355,357,362,363,364,365,366,370,388,],[10,10,33,42,47,48,49,55,56,59,10,10,10,10,10,66,74,10,102,109,10,120,10,123,74,74,74,74,74,10,154,10,74,10,59,109,10,186,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,205,74,10,74,74,10,215,216,10,102,224,109,109,10,242,10,74,260,154,277,260,280,59,10,10,293,297,10,74,74,74,74,74,74,59,10,293,297,10,74,260,260,260,260,260,260,260,260,74,59,47,74,59,10,10,260,260,10,260,74,]),'type':([0,4,37,38,39,40,41,51,52,65,71,77,78,79,80,82,87,99,105,106,118,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,148,151,152,153,159,179,182,184,234,235,240,246,257,262,264,265,267,284,302,306,317,355,362,363,366,388,],[12,12,60,61,62,63,64,73,94,94,122,73,73,73,73,73,150,160,73,165,181,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,207,73,73,211,221,181,181,73,12,12,12,73,73,73,73,73,73,12,12,73,73,73,377,378,381,73,]),'obj_decl':([0,4,118,179,182,234,235,240,284,302,],[20,20,179,179,179,286,286,20,286,20,]),'func_decl':([0,4,234,235,240,284,302,],[21,21,287,287,21,287,21,]),'func_def':([0,4,234,235,240,284,302,],[22,22,288,288,22,288,22,]),'void':([0,4,234,235,240,284,302,],[23,23,23,23,23,23,23,]),'typestr':([0,4,37,38,39,40,41,51,52,65,71,77,78,79,80,82,87,99,105,106,118,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,148,151,152,153,159,179,182,184,234,235,240,246,257,262,264,265,267,284,302,306,317,355,362,363,366,388,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'enumeration':([30,51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,246,257,262,264,265,267,306,317,336,355,388,],[46,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,359,86,86,]),'pairs':([33,46,48,55,60,61,62,63,64,157,158,176,177,242,261,278,293,359,381,],[50,68,70,104,111,112,113,114,115,217,218,238,239,50,318,325,333,376,393,]),'idents':([36,107,230,282,326,357,],[57,166,282,327,357,375,]),'expr':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,246,257,262,264,265,267,306,317,355,388,],[75,144,145,146,147,149,164,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,188,209,210,247,247,316,188,188,188,322,339,350,373,397,]),'aexpr':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,246,257,262,264,265,267,306,317,355,388,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'var':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,185,228,246,257,262,264,265,267,306,307,308,309,310,311,312,314,315,317,355,364,365,370,388,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,261,278,84,84,84,84,84,84,84,340,341,342,343,344,345,347,348,84,84,379,380,384,84,]),'literal':([51,77,78,79,80,82,105,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,151,152,184,246,257,262,264,265,267,306,317,355,388,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'params':([52,65,159,],[95,116,219,]),'types':([52,65,153,],[96,117,212,]),'param':([52,65,159,],[97,97,97,]),'pairsx':([53,161,],[100,223,]),'pair':([53,161,],[101,101,]),'identx':([58,109,168,170,],[108,169,231,232,]),'obj_decls':([118,179,182,],[178,241,243,]),'statements':([121,217,238,351,371,389,390,396,402,407,],[183,275,299,372,385,398,399,405,408,410,]),'exprs':([125,143,262,264,265,],[187,206,319,320,321,]),'statements_inner':([184,246,],[244,304,]),'statement':([184,246,],[246,246,]),'if_statement':([184,246,396,],[258,258,406,]),'ident_or_star':([229,],[279,]),'type_members':([234,235,284,],[283,289,329,]),'type_member':([234,235,284,],[284,284,284,]),'type_enums':([236,291,],[290,332,]),'type_enum':([236,291,],[291,291,]),'type_states':([237,295,],[294,335,]),'type_state':([237,295,],[295,295,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> decls','file',1,'p_file','parser.py',260),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',264),
  ('decls -> declsx','decls',1,'p_decls','parser.py',267),
  ('declsx -> decl declsx','declsx',2,'p_declsx__list','parser.py',271),
  ('declsx -> empty','declsx',1,'p_declsx__none','parser.py',281),
  ('decl -> PROTOCOL STRING SEMI','decl',3,'p_decl__protocol','parser.py',285),
  ('decl -> INCLUDE STRING SEMI','decl',3,'p_decl__include','parser.py',296),
  ('decl -> MACHINE ( enumeration ) : obj_decls { decls }','decl',9,'p_decl__machine0','parser.py',305),
  ('decl -> MACHINE ( enumeration pairs ) : obj_decls { decls }','decl',10,'p_decl__machine1','parser.py',309),
  ('decl -> ACTION ( ident pairs ) statements','decl',6,'p_decl__action','parser.py',313),
  ('decl -> IN_PORT ( ident , type , var pairs ) statements','decl',10,'p_decl__in_port','parser.py',317),
  ('decl -> OUT_PORT ( ident , type , var pairs ) SEMI','decl',10,'p_decl__out_port','parser.py',321),
  ('decl -> TRANS ( idents , idents , ident_or_star ) idents','decl',9,'p_decl__trans0','parser.py',325),
  ('decl -> TRANS ( idents , idents ) idents','decl',7,'p_decl__trans1','parser.py',329),
  ('decl -> TRANS ( idents , idents , ident_or_star ) idents idents','decl',10,'p_decl__trans2','parser.py',333),
  ('decl -> TRANS ( idents , idents ) idents idents','decl',8,'p_decl__trans3','parser.py',337),
  ('decl -> EXTERN_TYPE ( type pairs ) SEMI','decl',6,'p_decl__extern0','parser.py',341),
  ('decl -> GLOBAL ( type pairs ) { type_members }','decl',8,'p_decl__global','parser.py',346),
  ('decl -> STRUCT ( type pairs ) { type_members }','decl',8,'p_decl__struct','parser.py',351),
  ('decl -> ENUM ( type pairs ) { type_enums }','decl',8,'p_decl__enum','parser.py',355),
  ('decl -> STATE_DECL ( type pairs ) { type_states }','decl',8,'p_decl__state_decl','parser.py',360),
  ('obj_decls -> obj_decl obj_decls','obj_decls',2,'p_obj_decls__list','parser.py',367),
  ('obj_decls -> empty','obj_decls',1,'p_obj_decls__empty','parser.py',371),
  ('type_members -> type_member type_members','type_members',2,'p_type_members__list','parser.py',375),
  ('type_members -> empty','type_members',1,'p_type_members__empty','parser.py',379),
  ('type_member -> obj_decl','type_member',1,'p_type_member__0','parser.py',383),
  ('type_member -> func_decl','type_member',1,'p_type_member__0','parser.py',384),
  ('type_member -> func_def','type_member',1,'p_type_member__0','parser.py',385),
  ('decl -> obj_decl','decl',1,'p_decl__obj_decl','parser.py',390),
  ('obj_decl -> type ident pairs SEMI','obj_decl',4,'p_obj_decl__0','parser.py',394),
  ('obj_decl -> type STAR ident pairs SEMI','obj_decl',5,'p_obj_decl__1','parser.py',398),
  ('obj_decl -> type ident ASSIGN expr SEMI','obj_decl',5,'p_obj_decl__2','parser.py',402),
  ('obj_decl -> type STAR ident ASSIGN expr SEMI','obj_decl',6,'p_obj_decl__3','parser.py',408),
  ('decl -> func_decl','decl',1,'p_decl__func_decl','parser.py',415),
  ('func_decl -> void ident ( params ) pairs SEMI','func_decl',7,'p_func_decl__0','parser.py',419),
  ('func_decl -> type ident ( params ) pairs SEMI','func_decl',7,'p_func_decl__0','parser.py',420),
  ('func_decl -> void ident ( types ) pairs SEMI','func_decl',7,'p_func_decl__1','parser.py',424),
  ('func_decl -> type ident ( types ) pairs SEMI','func_decl',7,'p_func_decl__1','parser.py',425),
  ('decl -> func_def','decl',1,'p_decl__func_def','parser.py',429),
  ('func_def -> void ident ( params ) pairs statements','func_def',7,'p_func_def__0','parser.py',433),
  ('func_def -> type ident ( params ) pairs statements','func_def',7,'p_func_def__0','parser.py',434),
  ('type_enums -> type_enum type_enums','type_enums',2,'p_type_enums__list','parser.py',439),
  ('type_enums -> empty','type_enums',1,'p_type_enums__empty','parser.py',443),
  ('type_enum -> ident pairs SEMI','type_enum',3,'p_type_enum','parser.py',447),
  ('type_states -> type_state type_states','type_states',2,'p_type_states__list','parser.py',452),
  ('type_states -> empty','type_states',1,'p_type_states__empty','parser.py',456),
  ('type_state -> ident , enumeration pairs SEMI','type_state',5,'p_type_state','parser.py',460),
  ('params -> param , params','params',3,'p_params__many','parser.py',465),
  ('params -> param','params',1,'p_params__one','parser.py',469),
  ('params -> empty','params',1,'p_params__none','parser.py',473),
  ('param -> type ident','param',2,'p_param','parser.py',477),
  ('param -> type STAR ident','param',3,'p_param__pointer','parser.py',481),
  ('param -> type AMP ident','param',3,'p_param__ref','parser.py',485),
  ('param -> CONST type AMP ident','param',4,'p_param__const_ref','parser.py',489),
  ('param -> type STAR ident ASSIGN STRING','param',5,'p_param__pointer_default','parser.py',493),
  ('param -> type ident ASSIGN NUMBER','param',4,'p_param__default_number','parser.py',497),
  ('param -> type ident ASSIGN LIT_BOOL','param',4,'p_param__default_bool','parser.py',501),
  ('param -> type ident ASSIGN STRING','param',4,'p_param__default_string','parser.py',505),
  ('types -> type , types','types',3,'p_types__multiple','parser.py',510),
  ('types -> type','types',1,'p_types__one','parser.py',514),
  ('types -> empty','types',1,'p_types__empty','parser.py',518),
  ('typestr -> typestr DOUBLE_COLON ident','typestr',3,'p_typestr__multi','parser.py',522),
  ('typestr -> ident','typestr',1,'p_typestr__single','parser.py',526),
  ('type -> typestr','type',1,'p_type__one','parser.py',530),
  ('void -> VOID','void',1,'p_void','parser.py',534),
  ('idents -> { identx }','idents',3,'p_idents__braced','parser.py',539),
  ('idents -> ident','idents',1,'p_idents__bare','parser.py',543),
  ('identx -> ident SEMI identx','identx',3,'p_identx__multiple_1','parser.py',547),
  ('identx -> ident , identx','identx',3,'p_identx__multiple_1','parser.py',548),
  ('identx -> ident identx','identx',2,'p_identx__multiple_2','parser.py',552),
  ('identx -> empty','identx',1,'p_identx__single','parser.py',556),
  ('ident -> IDENT','ident',1,'p_ident','parser.py',560),
  ('ident_or_star -> ident','ident_or_star',1,'p_ident_or_star','parser.py',564),
  ('ident_or_star -> STAR','ident_or_star',1,'p_ident_or_star','parser.py',565),
  ('pairs -> , pairsx','pairs',2,'p_pairs__list','parser.py',570),
  ('pairs -> empty','pairs',1,'p_pairs__empty','parser.py',574),
  ('pairsx -> pair , pairsx','pairsx',3,'p_pairsx__many','parser.py',578),
  ('pairsx -> pair','pairsx',1,'p_pairsx__one','parser.py',583),
  ('pair -> ident = STRING','pair',3,'p_pair__assign','parser.py',588),
  ('pair -> ident = ident','pair',3,'p_pair__assign','parser.py',589),
  ('pair -> ident = NUMBER','pair',3,'p_pair__assign','parser.py',590),
  ('pair -> STRING','pair',1,'p_pair__literal','parser.py',594),
  ('statements -> { statements_inner }','statements',3,'p_statements__inner','parser.py',599),
  ('statements -> { }','statements',2,'p_statements__none','parser.py',603),
  ('statements_inner -> statement statements_inner','statements_inner',2,'p_statements_inner__many','parser.py',607),
  ('statements_inner -> statement','statements_inner',1,'p_statements_inner__one','parser.py',611),
  ('exprs -> expr , exprs','exprs',3,'p_exprs__multiple','parser.py',615),
  ('exprs -> expr','exprs',1,'p_exprs__one','parser.py',619),
  ('exprs -> empty','exprs',1,'p_exprs__empty','parser.py',623),
  ('statement -> expr SEMI','statement',2,'p_statement__expression','parser.py',627),
  ('statement -> expr ASSIGN expr SEMI','statement',4,'p_statement__assign','parser.py',631),
  ('statement -> ENQUEUE ( var , type ) statements','statement',7,'p_statement__enqueue','parser.py',635),
  ('statement -> ENQUEUE ( var , type , expr ) statements','statement',9,'p_statement__enqueue_latency','parser.py',639),
  ('statement -> DEFER_ENQUEUEING ( var , type ) statements','statement',7,'p_statement__defer_enqueueing','parser.py',643),
  ('statement -> STALL_AND_WAIT ( var , var ) SEMI','statement',7,'p_statement__stall_and_wait','parser.py',647),
  ('statement -> WAKEUP_PORT ( var , var ) SEMI','statement',7,'p_statement__wakeup_port','parser.py',651),
  ('statement -> PEEK ( var , type pairs ) statements','statement',8,'p_statement__peek','parser.py',655),
  ('statement -> CHECK_ALLOCATE ( var ) SEMI','statement',5,'p_statement__check_allocate','parser.py',659),
  ('statement -> CHECK_NEXT_CYCLE ( ) SEMI','statement',4,'p_statement__check_next_cycle','parser.py',663),
  ('statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI','statement',9,'p_statement__check_stop','parser.py',667),
  ('statement -> CHECK_PROBE ( var , var ) SEMI','statement',7,'p_statement__check_probe','parser.py',671),
  ('statement -> RETURN expr SEMI','statement',3,'p_statement__return','parser.py',675),
  ('statement -> if_statement','statement',1,'p_statement__if','parser.py',679),
  ('if_statement -> IF ( expr ) statements','if_statement',5,'p_if_statement__if','parser.py',683),
  ('if_statement -> IF ( expr ) statements ELSE statements','if_statement',7,'p_if_statement__if_else','parser.py',687),
  ('if_statement -> IF ( expr ) statements ELSE if_statement','if_statement',7,'p_statement__if_else_if','parser.py',691),
  ('aexpr -> STATIC_CAST ( type , expr )','aexpr',6,'p_expr__static_cast','parser.py',697),
  ('aexpr -> STATIC_CAST ( type , STRING , expr )','aexpr',8,'p_expr__static_cast_ptr','parser.py',701),
  ('aexpr -> var','aexpr',1,'p_expr__var','parser.py',705),
  ('aexpr -> type ident','aexpr',2,'p_expr__localvar','parser.py',709),
  ('aexpr -> literal','aexpr',1,'p_expr__literal','parser.py',713),
  ('aexpr -> enumeration','aexpr',1,'p_expr__enumeration','parser.py',717),
  ('aexpr -> ident ( exprs )','aexpr',4,'p_expr__func_call','parser.py',721),
  ('aexpr -> NEW type','aexpr',2,'p_expr__new','parser.py',725),
  ('aexpr -> OOD','aexpr',1,'p_expr__null','parser.py',729),
  ('aexpr -> aexpr DOT ident','aexpr',3,'p_expr__member','parser.py',733),
  ('aexpr -> aexpr DOT ident ( exprs )','aexpr',6,'p_expr__member_method_call','parser.py',737),
  ('aexpr -> aexpr [ exprs ]','aexpr',4,'p_expr__member_method_call_lookup','parser.py',743),
  ('aexpr -> type DOUBLE_COLON ident ( exprs )','aexpr',6,'p_expr__class_method_call','parser.py',749),
  ('expr -> aexpr','expr',1,'p_expr__aexpr','parser.py',755),
  ('expr -> expr STAR expr','expr',3,'p_expr__binary_op','parser.py',759),
  ('expr -> expr SLASH expr','expr',3,'p_expr__binary_op','parser.py',760),
  ('expr -> expr MOD expr','expr',3,'p_expr__binary_op','parser.py',761),
  ('expr -> expr PLUS expr','expr',3,'p_expr__binary_op','parser.py',762),
  ('expr -> expr DASH expr','expr',3,'p_expr__binary_op','parser.py',763),
  ('expr -> expr LT expr','expr',3,'p_expr__binary_op','parser.py',764),
  ('expr -> expr GT expr','expr',3,'p_expr__binary_op','parser.py',765),
  ('expr -> expr LE expr','expr',3,'p_expr__binary_op','parser.py',766),
  ('expr -> expr GE expr','expr',3,'p_expr__binary_op','parser.py',767),
  ('expr -> expr EQ expr','expr',3,'p_expr__binary_op','parser.py',768),
  ('expr -> expr NE expr','expr',3,'p_expr__binary_op','parser.py',769),
  ('expr -> expr AND expr','expr',3,'p_expr__binary_op','parser.py',770),
  ('expr -> expr OR expr','expr',3,'p_expr__binary_op','parser.py',771),
  ('expr -> expr RIGHTSHIFT expr','expr',3,'p_expr__binary_op','parser.py',772),
  ('expr -> expr LEFTSHIFT expr','expr',3,'p_expr__binary_op','parser.py',773),
  ('expr -> NOT expr','expr',2,'p_expr__unary_op','parser.py',778),
  ('expr -> INCR expr','expr',2,'p_expr__unary_op','parser.py',779),
  ('expr -> DECR expr','expr',2,'p_expr__unary_op','parser.py',780),
  ('expr -> DASH expr','expr',2,'p_expr__unary_op','parser.py',781),
  ('aexpr -> ( expr )','aexpr',3,'p_expr__parens','parser.py',785),
  ('aexpr -> IS_VALID ( expr )','aexpr',4,'p_expr__is_valid_ptr','parser.py',789),
  ('aexpr -> IS_INVALID ( expr )','aexpr',4,'p_expr__is_invalid_ptr','parser.py',793),
  ('literal -> STRING','literal',1,'p_literal__string','parser.py',797),
  ('literal -> NUMBER','literal',1,'p_literal__number','parser.py',801),
  ('literal -> FLOATNUMBER','literal',1,'p_literal__float','parser.py',805),
  ('literal -> LIT_BOOL','literal',1,'p_literal__bool','parser.py',809),
  ('enumeration -> ident : ident','enumeration',3,'p_enumeration','parser.py',813),
  ('var -> ident','var',1,'p_var','parser.py',817),
]
