Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> specification
Rule 1     specification -> opt_defs_and_outputs top_level_decode_block
Rule 2     opt_defs_and_outputs -> empty
Rule 3     opt_defs_and_outputs -> defs_and_outputs
Rule 4     defs_and_outputs -> def_or_output
Rule 5     defs_and_outputs -> defs_and_outputs def_or_output
Rule 6     def_or_output -> name_decl
Rule 7     def_or_output -> def_format
Rule 8     def_or_output -> def_bitfield
Rule 9     def_or_output -> def_bitfield_struct
Rule 10    def_or_output -> def_template
Rule 11    def_or_output -> def_operand_types
Rule 12    def_or_output -> def_operands
Rule 13    def_or_output -> output
Rule 14    def_or_output -> global_let
Rule 15    def_or_output -> split
Rule 16    split -> SPLIT output_type SEMI
Rule 17    output_type -> DECODER
Rule 18    output_type -> HEADER
Rule 19    output_type -> EXEC
Rule 20    name_decl -> NAMESPACE ID SEMI
Rule 21    output -> OUTPUT output_type CODELIT SEMI
Rule 22    global_let -> LET CODELIT SEMI
Rule 23    def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI
Rule 24    def_operands -> DEF OPERANDS CODELIT SEMI
Rule 25    def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI
Rule 26    def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI
Rule 27    def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI
Rule 28    id_with_dot -> ID
Rule 29    id_with_dot -> ID DOT id_with_dot
Rule 30    opt_signed -> SIGNED
Rule 31    opt_signed -> empty
Rule 32    def_template -> DEF TEMPLATE ID CODELIT SEMI
Rule 33    def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI
Rule 34    param_list -> positional_param_list COMMA nonpositional_param_list
Rule 35    param_list -> positional_param_list
Rule 36    param_list -> nonpositional_param_list
Rule 37    positional_param_list -> empty
Rule 38    positional_param_list -> ID
Rule 39    positional_param_list -> positional_param_list COMMA ID
Rule 40    nonpositional_param_list -> keyword_param_list COMMA excess_args_param
Rule 41    nonpositional_param_list -> keyword_param_list
Rule 42    nonpositional_param_list -> excess_args_param
Rule 43    keyword_param_list -> keyword_param
Rule 44    keyword_param_list -> keyword_param_list COMMA keyword_param
Rule 45    keyword_param -> ID EQUALS expr
Rule 46    excess_args_param -> ASTERISK ID
Rule 47    top_level_decode_block -> decode_block
Rule 48    decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE
Rule 49    opt_default -> empty
Rule 50    opt_default -> DEFAULT inst
Rule 51    decode_stmt_list -> decode_stmt
Rule 52    decode_stmt_list -> decode_stmt decode_stmt_list
Rule 53    decode_stmt -> CPPDIRECTIVE
Rule 54    decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE
Rule 55    push_format_id -> ID
Rule 56    decode_stmt -> case_list COLON decode_block
Rule 57    decode_stmt -> case_list COLON inst SEMI
Rule 58    case_list -> DEFAULT
Rule 59    case_list -> INTLIT
Rule 60    case_list -> STRLIT
Rule 61    case_list -> case_list COMMA INTLIT
Rule 62    case_list -> case_list COMMA STRLIT
Rule 63    inst -> ID LPAREN arg_list RPAREN
Rule 64    inst -> ID DBLCOLON ID LPAREN arg_list RPAREN
Rule 65    arg_list -> positional_arg_list COMMA keyword_arg_list
Rule 66    arg_list -> positional_arg_list
Rule 67    arg_list -> keyword_arg_list
Rule 68    positional_arg_list -> empty
Rule 69    positional_arg_list -> expr
Rule 70    positional_arg_list -> positional_arg_list COMMA expr
Rule 71    keyword_arg_list -> keyword_arg
Rule 72    keyword_arg_list -> keyword_arg_list COMMA keyword_arg
Rule 73    keyword_arg -> ID EQUALS expr
Rule 74    expr -> ID
Rule 75    expr -> INTLIT
Rule 76    expr -> STRLIT
Rule 77    expr -> CODELIT
Rule 78    expr -> LBRACKET list_expr RBRACKET
Rule 79    list_expr -> expr
Rule 80    list_expr -> list_expr COMMA expr
Rule 81    list_expr -> empty
Rule 82    empty -> <empty>

Terminals, with rules where they appear

ASTERISK             : 46
BITFIELD             : 25 26 27
CODELIT              : 21 22 23 24 32 33 77
COLON                : 25 56 57
COMMA                : 34 39 40 44 61 62 65 70 72 80
CPPDIRECTIVE         : 53
DBLCOLON             : 64
DECODE               : 48
DECODER              : 17
DEF                  : 23 24 25 26 27 32 33
DEFAULT              : 50 58
DOT                  : 29
EQUALS               : 45 73
EXEC                 : 19
FORMAT               : 33 54
GREATER              : 25 26
HEADER               : 18
ID                   : 20 25 26 27 28 29 32 33 38 39 45 46 48 55 63 64 64 73 74
INTLIT               : 25 25 26 59 61 75
LBRACE               : 48 54
LBRACKET             : 78
LESS                 : 25 26
LET                  : 22
LPAREN               : 33 63 64
NAMESPACE            : 20
OPERANDS             : 24
OPERAND_TYPES        : 23
OUTPUT               : 21
RBRACE               : 48 54
RBRACKET             : 78
RPAREN               : 33 63 64
SEMI                 : 16 20 21 22 23 24 25 26 27 32 33 57
SIGNED               : 30
SPLIT                : 16
STRLIT               : 60 62 76
TEMPLATE             : 32
error                : 

Nonterminals, with rules where they appear

arg_list             : 63 64
case_list            : 56 57 61 62
decode_block         : 47 56
decode_stmt          : 51 52
decode_stmt_list     : 48 52 54
def_bitfield         : 8
def_bitfield_struct  : 9
def_format           : 7
def_operand_types    : 11
def_operands         : 12
def_or_output        : 4 5
def_template         : 10
defs_and_outputs     : 3 5
empty                : 2 31 37 49 68 81
excess_args_param    : 40 42
expr                 : 45 69 70 73 79 80
global_let           : 14
id_with_dot          : 27 29
inst                 : 50 57
keyword_arg          : 71 72
keyword_arg_list     : 65 67 72
keyword_param        : 43 44
keyword_param_list   : 40 41 44
list_expr            : 78 80
name_decl            : 6
nonpositional_param_list : 34 36
opt_default          : 48
opt_defs_and_outputs : 1
opt_signed           : 25 26 27
output               : 13
output_type          : 16 21
param_list           : 33
positional_arg_list  : 65 66 70
positional_param_list : 34 35 39
push_format_id       : 54
specification        : 0
split                : 15
top_level_decode_block : 1

Parsing method: LALR

state 0

    (0) S' -> . specification
    (1) specification -> . opt_defs_and_outputs top_level_decode_block
    (2) opt_defs_and_outputs -> . empty
    (3) opt_defs_and_outputs -> . defs_and_outputs
    (82) empty -> .
    (4) defs_and_outputs -> . def_or_output
    (5) defs_and_outputs -> . defs_and_outputs def_or_output
    (6) def_or_output -> . name_decl
    (7) def_or_output -> . def_format
    (8) def_or_output -> . def_bitfield
    (9) def_or_output -> . def_bitfield_struct
    (10) def_or_output -> . def_template
    (11) def_or_output -> . def_operand_types
    (12) def_or_output -> . def_operands
    (13) def_or_output -> . output
    (14) def_or_output -> . global_let
    (15) def_or_output -> . split
    (20) name_decl -> . NAMESPACE ID SEMI
    (33) def_format -> . DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI
    (25) def_bitfield -> . DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI
    (26) def_bitfield -> . DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI
    (27) def_bitfield_struct -> . DEF opt_signed BITFIELD ID id_with_dot SEMI
    (32) def_template -> . DEF TEMPLATE ID CODELIT SEMI
    (23) def_operand_types -> . DEF OPERAND_TYPES CODELIT SEMI
    (24) def_operands -> . DEF OPERANDS CODELIT SEMI
    (21) output -> . OUTPUT output_type CODELIT SEMI
    (22) global_let -> . LET CODELIT SEMI
    (16) split -> . SPLIT output_type SEMI

    DECODE          reduce using rule 82 (empty -> .)
    NAMESPACE       shift and go to state 16
    DEF             shift and go to state 17
    OUTPUT          shift and go to state 18
    LET             shift and go to state 19
    SPLIT           shift and go to state 20

    specification                  shift and go to state 1
    opt_defs_and_outputs           shift and go to state 2
    empty                          shift and go to state 3
    defs_and_outputs               shift and go to state 4
    def_or_output                  shift and go to state 5
    name_decl                      shift and go to state 6
    def_format                     shift and go to state 7
    def_bitfield                   shift and go to state 8
    def_bitfield_struct            shift and go to state 9
    def_template                   shift and go to state 10
    def_operand_types              shift and go to state 11
    def_operands                   shift and go to state 12
    output                         shift and go to state 13
    global_let                     shift and go to state 14
    split                          shift and go to state 15

state 1

    (0) S' -> specification .



state 2

    (1) specification -> opt_defs_and_outputs . top_level_decode_block
    (47) top_level_decode_block -> . decode_block
    (48) decode_block -> . DECODE ID opt_default LBRACE decode_stmt_list RBRACE

    DECODE          shift and go to state 23

    top_level_decode_block         shift and go to state 21
    decode_block                   shift and go to state 22

state 3

    (2) opt_defs_and_outputs -> empty .

    DECODE          reduce using rule 2 (opt_defs_and_outputs -> empty .)


state 4

    (3) opt_defs_and_outputs -> defs_and_outputs .
    (5) defs_and_outputs -> defs_and_outputs . def_or_output
    (6) def_or_output -> . name_decl
    (7) def_or_output -> . def_format
    (8) def_or_output -> . def_bitfield
    (9) def_or_output -> . def_bitfield_struct
    (10) def_or_output -> . def_template
    (11) def_or_output -> . def_operand_types
    (12) def_or_output -> . def_operands
    (13) def_or_output -> . output
    (14) def_or_output -> . global_let
    (15) def_or_output -> . split
    (20) name_decl -> . NAMESPACE ID SEMI
    (33) def_format -> . DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI
    (25) def_bitfield -> . DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI
    (26) def_bitfield -> . DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI
    (27) def_bitfield_struct -> . DEF opt_signed BITFIELD ID id_with_dot SEMI
    (32) def_template -> . DEF TEMPLATE ID CODELIT SEMI
    (23) def_operand_types -> . DEF OPERAND_TYPES CODELIT SEMI
    (24) def_operands -> . DEF OPERANDS CODELIT SEMI
    (21) output -> . OUTPUT output_type CODELIT SEMI
    (22) global_let -> . LET CODELIT SEMI
    (16) split -> . SPLIT output_type SEMI

    DECODE          reduce using rule 3 (opt_defs_and_outputs -> defs_and_outputs .)
    NAMESPACE       shift and go to state 16
    DEF             shift and go to state 17
    OUTPUT          shift and go to state 18
    LET             shift and go to state 19
    SPLIT           shift and go to state 20

    def_or_output                  shift and go to state 24
    name_decl                      shift and go to state 6
    def_format                     shift and go to state 7
    def_bitfield                   shift and go to state 8
    def_bitfield_struct            shift and go to state 9
    def_template                   shift and go to state 10
    def_operand_types              shift and go to state 11
    def_operands                   shift and go to state 12
    output                         shift and go to state 13
    global_let                     shift and go to state 14
    split                          shift and go to state 15

state 5

    (4) defs_and_outputs -> def_or_output .

    NAMESPACE       reduce using rule 4 (defs_and_outputs -> def_or_output .)
    DEF             reduce using rule 4 (defs_and_outputs -> def_or_output .)
    OUTPUT          reduce using rule 4 (defs_and_outputs -> def_or_output .)
    LET             reduce using rule 4 (defs_and_outputs -> def_or_output .)
    SPLIT           reduce using rule 4 (defs_and_outputs -> def_or_output .)
    DECODE          reduce using rule 4 (defs_and_outputs -> def_or_output .)


state 6

    (6) def_or_output -> name_decl .

    NAMESPACE       reduce using rule 6 (def_or_output -> name_decl .)
    DEF             reduce using rule 6 (def_or_output -> name_decl .)
    OUTPUT          reduce using rule 6 (def_or_output -> name_decl .)
    LET             reduce using rule 6 (def_or_output -> name_decl .)
    SPLIT           reduce using rule 6 (def_or_output -> name_decl .)
    DECODE          reduce using rule 6 (def_or_output -> name_decl .)


state 7

    (7) def_or_output -> def_format .

    NAMESPACE       reduce using rule 7 (def_or_output -> def_format .)
    DEF             reduce using rule 7 (def_or_output -> def_format .)
    OUTPUT          reduce using rule 7 (def_or_output -> def_format .)
    LET             reduce using rule 7 (def_or_output -> def_format .)
    SPLIT           reduce using rule 7 (def_or_output -> def_format .)
    DECODE          reduce using rule 7 (def_or_output -> def_format .)


state 8

    (8) def_or_output -> def_bitfield .

    NAMESPACE       reduce using rule 8 (def_or_output -> def_bitfield .)
    DEF             reduce using rule 8 (def_or_output -> def_bitfield .)
    OUTPUT          reduce using rule 8 (def_or_output -> def_bitfield .)
    LET             reduce using rule 8 (def_or_output -> def_bitfield .)
    SPLIT           reduce using rule 8 (def_or_output -> def_bitfield .)
    DECODE          reduce using rule 8 (def_or_output -> def_bitfield .)


state 9

    (9) def_or_output -> def_bitfield_struct .

    NAMESPACE       reduce using rule 9 (def_or_output -> def_bitfield_struct .)
    DEF             reduce using rule 9 (def_or_output -> def_bitfield_struct .)
    OUTPUT          reduce using rule 9 (def_or_output -> def_bitfield_struct .)
    LET             reduce using rule 9 (def_or_output -> def_bitfield_struct .)
    SPLIT           reduce using rule 9 (def_or_output -> def_bitfield_struct .)
    DECODE          reduce using rule 9 (def_or_output -> def_bitfield_struct .)


state 10

    (10) def_or_output -> def_template .

    NAMESPACE       reduce using rule 10 (def_or_output -> def_template .)
    DEF             reduce using rule 10 (def_or_output -> def_template .)
    OUTPUT          reduce using rule 10 (def_or_output -> def_template .)
    LET             reduce using rule 10 (def_or_output -> def_template .)
    SPLIT           reduce using rule 10 (def_or_output -> def_template .)
    DECODE          reduce using rule 10 (def_or_output -> def_template .)


state 11

    (11) def_or_output -> def_operand_types .

    NAMESPACE       reduce using rule 11 (def_or_output -> def_operand_types .)
    DEF             reduce using rule 11 (def_or_output -> def_operand_types .)
    OUTPUT          reduce using rule 11 (def_or_output -> def_operand_types .)
    LET             reduce using rule 11 (def_or_output -> def_operand_types .)
    SPLIT           reduce using rule 11 (def_or_output -> def_operand_types .)
    DECODE          reduce using rule 11 (def_or_output -> def_operand_types .)


state 12

    (12) def_or_output -> def_operands .

    NAMESPACE       reduce using rule 12 (def_or_output -> def_operands .)
    DEF             reduce using rule 12 (def_or_output -> def_operands .)
    OUTPUT          reduce using rule 12 (def_or_output -> def_operands .)
    LET             reduce using rule 12 (def_or_output -> def_operands .)
    SPLIT           reduce using rule 12 (def_or_output -> def_operands .)
    DECODE          reduce using rule 12 (def_or_output -> def_operands .)


state 13

    (13) def_or_output -> output .

    NAMESPACE       reduce using rule 13 (def_or_output -> output .)
    DEF             reduce using rule 13 (def_or_output -> output .)
    OUTPUT          reduce using rule 13 (def_or_output -> output .)
    LET             reduce using rule 13 (def_or_output -> output .)
    SPLIT           reduce using rule 13 (def_or_output -> output .)
    DECODE          reduce using rule 13 (def_or_output -> output .)


state 14

    (14) def_or_output -> global_let .

    NAMESPACE       reduce using rule 14 (def_or_output -> global_let .)
    DEF             reduce using rule 14 (def_or_output -> global_let .)
    OUTPUT          reduce using rule 14 (def_or_output -> global_let .)
    LET             reduce using rule 14 (def_or_output -> global_let .)
    SPLIT           reduce using rule 14 (def_or_output -> global_let .)
    DECODE          reduce using rule 14 (def_or_output -> global_let .)


state 15

    (15) def_or_output -> split .

    NAMESPACE       reduce using rule 15 (def_or_output -> split .)
    DEF             reduce using rule 15 (def_or_output -> split .)
    OUTPUT          reduce using rule 15 (def_or_output -> split .)
    LET             reduce using rule 15 (def_or_output -> split .)
    SPLIT           reduce using rule 15 (def_or_output -> split .)
    DECODE          reduce using rule 15 (def_or_output -> split .)


state 16

    (20) name_decl -> NAMESPACE . ID SEMI

    ID              shift and go to state 25


state 17

    (33) def_format -> DEF . FORMAT ID LPAREN param_list RPAREN CODELIT SEMI
    (25) def_bitfield -> DEF . opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI
    (26) def_bitfield -> DEF . opt_signed BITFIELD ID LESS INTLIT GREATER SEMI
    (27) def_bitfield_struct -> DEF . opt_signed BITFIELD ID id_with_dot SEMI
    (32) def_template -> DEF . TEMPLATE ID CODELIT SEMI
    (23) def_operand_types -> DEF . OPERAND_TYPES CODELIT SEMI
    (24) def_operands -> DEF . OPERANDS CODELIT SEMI
    (30) opt_signed -> . SIGNED
    (31) opt_signed -> . empty
    (82) empty -> .

    FORMAT          shift and go to state 26
    TEMPLATE        shift and go to state 28
    OPERAND_TYPES   shift and go to state 29
    OPERANDS        shift and go to state 30
    SIGNED          shift and go to state 31
    BITFIELD        reduce using rule 82 (empty -> .)

    opt_signed                     shift and go to state 27
    empty                          shift and go to state 32

state 18

    (21) output -> OUTPUT . output_type CODELIT SEMI
    (17) output_type -> . DECODER
    (18) output_type -> . HEADER
    (19) output_type -> . EXEC

    DECODER         shift and go to state 34
    HEADER          shift and go to state 35
    EXEC            shift and go to state 36

    output_type                    shift and go to state 33

state 19

    (22) global_let -> LET . CODELIT SEMI

    CODELIT         shift and go to state 37


state 20

    (16) split -> SPLIT . output_type SEMI
    (17) output_type -> . DECODER
    (18) output_type -> . HEADER
    (19) output_type -> . EXEC

    DECODER         shift and go to state 34
    HEADER          shift and go to state 35
    EXEC            shift and go to state 36

    output_type                    shift and go to state 38

state 21

    (1) specification -> opt_defs_and_outputs top_level_decode_block .

    $end            reduce using rule 1 (specification -> opt_defs_and_outputs top_level_decode_block .)


state 22

    (47) top_level_decode_block -> decode_block .

    $end            reduce using rule 47 (top_level_decode_block -> decode_block .)


state 23

    (48) decode_block -> DECODE . ID opt_default LBRACE decode_stmt_list RBRACE

    ID              shift and go to state 39


state 24

    (5) defs_and_outputs -> defs_and_outputs def_or_output .

    NAMESPACE       reduce using rule 5 (defs_and_outputs -> defs_and_outputs def_or_output .)
    DEF             reduce using rule 5 (defs_and_outputs -> defs_and_outputs def_or_output .)
    OUTPUT          reduce using rule 5 (defs_and_outputs -> defs_and_outputs def_or_output .)
    LET             reduce using rule 5 (defs_and_outputs -> defs_and_outputs def_or_output .)
    SPLIT           reduce using rule 5 (defs_and_outputs -> defs_and_outputs def_or_output .)
    DECODE          reduce using rule 5 (defs_and_outputs -> defs_and_outputs def_or_output .)


state 25

    (20) name_decl -> NAMESPACE ID . SEMI

    SEMI            shift and go to state 40


state 26

    (33) def_format -> DEF FORMAT . ID LPAREN param_list RPAREN CODELIT SEMI

    ID              shift and go to state 41


state 27

    (25) def_bitfield -> DEF opt_signed . BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI
    (26) def_bitfield -> DEF opt_signed . BITFIELD ID LESS INTLIT GREATER SEMI
    (27) def_bitfield_struct -> DEF opt_signed . BITFIELD ID id_with_dot SEMI

    BITFIELD        shift and go to state 42


state 28

    (32) def_template -> DEF TEMPLATE . ID CODELIT SEMI

    ID              shift and go to state 43


state 29

    (23) def_operand_types -> DEF OPERAND_TYPES . CODELIT SEMI

    CODELIT         shift and go to state 44


state 30

    (24) def_operands -> DEF OPERANDS . CODELIT SEMI

    CODELIT         shift and go to state 45


state 31

    (30) opt_signed -> SIGNED .

    BITFIELD        reduce using rule 30 (opt_signed -> SIGNED .)


state 32

    (31) opt_signed -> empty .

    BITFIELD        reduce using rule 31 (opt_signed -> empty .)


state 33

    (21) output -> OUTPUT output_type . CODELIT SEMI

    CODELIT         shift and go to state 46


state 34

    (17) output_type -> DECODER .

    CODELIT         reduce using rule 17 (output_type -> DECODER .)
    SEMI            reduce using rule 17 (output_type -> DECODER .)


state 35

    (18) output_type -> HEADER .

    CODELIT         reduce using rule 18 (output_type -> HEADER .)
    SEMI            reduce using rule 18 (output_type -> HEADER .)


state 36

    (19) output_type -> EXEC .

    CODELIT         reduce using rule 19 (output_type -> EXEC .)
    SEMI            reduce using rule 19 (output_type -> EXEC .)


state 37

    (22) global_let -> LET CODELIT . SEMI

    SEMI            shift and go to state 47


state 38

    (16) split -> SPLIT output_type . SEMI

    SEMI            shift and go to state 48


state 39

    (48) decode_block -> DECODE ID . opt_default LBRACE decode_stmt_list RBRACE
    (49) opt_default -> . empty
    (50) opt_default -> . DEFAULT inst
    (82) empty -> .

    DEFAULT         shift and go to state 51
    LBRACE          reduce using rule 82 (empty -> .)

    opt_default                    shift and go to state 49
    empty                          shift and go to state 50

state 40

    (20) name_decl -> NAMESPACE ID SEMI .

    NAMESPACE       reduce using rule 20 (name_decl -> NAMESPACE ID SEMI .)
    DEF             reduce using rule 20 (name_decl -> NAMESPACE ID SEMI .)
    OUTPUT          reduce using rule 20 (name_decl -> NAMESPACE ID SEMI .)
    LET             reduce using rule 20 (name_decl -> NAMESPACE ID SEMI .)
    SPLIT           reduce using rule 20 (name_decl -> NAMESPACE ID SEMI .)
    DECODE          reduce using rule 20 (name_decl -> NAMESPACE ID SEMI .)


state 41

    (33) def_format -> DEF FORMAT ID . LPAREN param_list RPAREN CODELIT SEMI

    LPAREN          shift and go to state 52


state 42

    (25) def_bitfield -> DEF opt_signed BITFIELD . ID LESS INTLIT COLON INTLIT GREATER SEMI
    (26) def_bitfield -> DEF opt_signed BITFIELD . ID LESS INTLIT GREATER SEMI
    (27) def_bitfield_struct -> DEF opt_signed BITFIELD . ID id_with_dot SEMI

    ID              shift and go to state 53


state 43

    (32) def_template -> DEF TEMPLATE ID . CODELIT SEMI

    CODELIT         shift and go to state 54


state 44

    (23) def_operand_types -> DEF OPERAND_TYPES CODELIT . SEMI

    SEMI            shift and go to state 55


state 45

    (24) def_operands -> DEF OPERANDS CODELIT . SEMI

    SEMI            shift and go to state 56


state 46

    (21) output -> OUTPUT output_type CODELIT . SEMI

    SEMI            shift and go to state 57


state 47

    (22) global_let -> LET CODELIT SEMI .

    NAMESPACE       reduce using rule 22 (global_let -> LET CODELIT SEMI .)
    DEF             reduce using rule 22 (global_let -> LET CODELIT SEMI .)
    OUTPUT          reduce using rule 22 (global_let -> LET CODELIT SEMI .)
    LET             reduce using rule 22 (global_let -> LET CODELIT SEMI .)
    SPLIT           reduce using rule 22 (global_let -> LET CODELIT SEMI .)
    DECODE          reduce using rule 22 (global_let -> LET CODELIT SEMI .)


state 48

    (16) split -> SPLIT output_type SEMI .

    NAMESPACE       reduce using rule 16 (split -> SPLIT output_type SEMI .)
    DEF             reduce using rule 16 (split -> SPLIT output_type SEMI .)
    OUTPUT          reduce using rule 16 (split -> SPLIT output_type SEMI .)
    LET             reduce using rule 16 (split -> SPLIT output_type SEMI .)
    SPLIT           reduce using rule 16 (split -> SPLIT output_type SEMI .)
    DECODE          reduce using rule 16 (split -> SPLIT output_type SEMI .)


state 49

    (48) decode_block -> DECODE ID opt_default . LBRACE decode_stmt_list RBRACE

    LBRACE          shift and go to state 58


state 50

    (49) opt_default -> empty .

    LBRACE          reduce using rule 49 (opt_default -> empty .)


state 51

    (50) opt_default -> DEFAULT . inst
    (63) inst -> . ID LPAREN arg_list RPAREN
    (64) inst -> . ID DBLCOLON ID LPAREN arg_list RPAREN

    ID              shift and go to state 60

    inst                           shift and go to state 59

state 52

    (33) def_format -> DEF FORMAT ID LPAREN . param_list RPAREN CODELIT SEMI
    (34) param_list -> . positional_param_list COMMA nonpositional_param_list
    (35) param_list -> . positional_param_list
    (36) param_list -> . nonpositional_param_list
    (37) positional_param_list -> . empty
    (38) positional_param_list -> . ID
    (39) positional_param_list -> . positional_param_list COMMA ID
    (40) nonpositional_param_list -> . keyword_param_list COMMA excess_args_param
    (41) nonpositional_param_list -> . keyword_param_list
    (42) nonpositional_param_list -> . excess_args_param
    (82) empty -> .
    (43) keyword_param_list -> . keyword_param
    (44) keyword_param_list -> . keyword_param_list COMMA keyword_param
    (46) excess_args_param -> . ASTERISK ID
    (45) keyword_param -> . ID EQUALS expr

    ID              shift and go to state 61
    COMMA           reduce using rule 82 (empty -> .)
    RPAREN          reduce using rule 82 (empty -> .)
    ASTERISK        shift and go to state 69

    param_list                     shift and go to state 62
    positional_param_list          shift and go to state 63
    nonpositional_param_list       shift and go to state 64
    empty                          shift and go to state 65
    keyword_param_list             shift and go to state 66
    excess_args_param              shift and go to state 67
    keyword_param                  shift and go to state 68

state 53

    (25) def_bitfield -> DEF opt_signed BITFIELD ID . LESS INTLIT COLON INTLIT GREATER SEMI
    (26) def_bitfield -> DEF opt_signed BITFIELD ID . LESS INTLIT GREATER SEMI
    (27) def_bitfield_struct -> DEF opt_signed BITFIELD ID . id_with_dot SEMI
    (28) id_with_dot -> . ID
    (29) id_with_dot -> . ID DOT id_with_dot

    LESS            shift and go to state 71
    ID              shift and go to state 70

    id_with_dot                    shift and go to state 72

state 54

    (32) def_template -> DEF TEMPLATE ID CODELIT . SEMI

    SEMI            shift and go to state 73


state 55

    (23) def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI .

    NAMESPACE       reduce using rule 23 (def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI .)
    DEF             reduce using rule 23 (def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI .)
    OUTPUT          reduce using rule 23 (def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI .)
    LET             reduce using rule 23 (def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI .)
    SPLIT           reduce using rule 23 (def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI .)
    DECODE          reduce using rule 23 (def_operand_types -> DEF OPERAND_TYPES CODELIT SEMI .)


state 56

    (24) def_operands -> DEF OPERANDS CODELIT SEMI .

    NAMESPACE       reduce using rule 24 (def_operands -> DEF OPERANDS CODELIT SEMI .)
    DEF             reduce using rule 24 (def_operands -> DEF OPERANDS CODELIT SEMI .)
    OUTPUT          reduce using rule 24 (def_operands -> DEF OPERANDS CODELIT SEMI .)
    LET             reduce using rule 24 (def_operands -> DEF OPERANDS CODELIT SEMI .)
    SPLIT           reduce using rule 24 (def_operands -> DEF OPERANDS CODELIT SEMI .)
    DECODE          reduce using rule 24 (def_operands -> DEF OPERANDS CODELIT SEMI .)


state 57

    (21) output -> OUTPUT output_type CODELIT SEMI .

    NAMESPACE       reduce using rule 21 (output -> OUTPUT output_type CODELIT SEMI .)
    DEF             reduce using rule 21 (output -> OUTPUT output_type CODELIT SEMI .)
    OUTPUT          reduce using rule 21 (output -> OUTPUT output_type CODELIT SEMI .)
    LET             reduce using rule 21 (output -> OUTPUT output_type CODELIT SEMI .)
    SPLIT           reduce using rule 21 (output -> OUTPUT output_type CODELIT SEMI .)
    DECODE          reduce using rule 21 (output -> OUTPUT output_type CODELIT SEMI .)


state 58

    (48) decode_block -> DECODE ID opt_default LBRACE . decode_stmt_list RBRACE
    (51) decode_stmt_list -> . decode_stmt
    (52) decode_stmt_list -> . decode_stmt decode_stmt_list
    (53) decode_stmt -> . CPPDIRECTIVE
    (54) decode_stmt -> . FORMAT push_format_id LBRACE decode_stmt_list RBRACE
    (56) decode_stmt -> . case_list COLON decode_block
    (57) decode_stmt -> . case_list COLON inst SEMI
    (58) case_list -> . DEFAULT
    (59) case_list -> . INTLIT
    (60) case_list -> . STRLIT
    (61) case_list -> . case_list COMMA INTLIT
    (62) case_list -> . case_list COMMA STRLIT

    CPPDIRECTIVE    shift and go to state 76
    FORMAT          shift and go to state 77
    DEFAULT         shift and go to state 79
    INTLIT          shift and go to state 80
    STRLIT          shift and go to state 81

    decode_stmt_list               shift and go to state 74
    decode_stmt                    shift and go to state 75
    case_list                      shift and go to state 78

state 59

    (50) opt_default -> DEFAULT inst .

    LBRACE          reduce using rule 50 (opt_default -> DEFAULT inst .)


state 60

    (63) inst -> ID . LPAREN arg_list RPAREN
    (64) inst -> ID . DBLCOLON ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 82
    DBLCOLON        shift and go to state 83


state 61

    (38) positional_param_list -> ID .
    (45) keyword_param -> ID . EQUALS expr

    COMMA           reduce using rule 38 (positional_param_list -> ID .)
    RPAREN          reduce using rule 38 (positional_param_list -> ID .)
    EQUALS          shift and go to state 84


state 62

    (33) def_format -> DEF FORMAT ID LPAREN param_list . RPAREN CODELIT SEMI

    RPAREN          shift and go to state 85


state 63

    (34) param_list -> positional_param_list . COMMA nonpositional_param_list
    (35) param_list -> positional_param_list .
    (39) positional_param_list -> positional_param_list . COMMA ID

    COMMA           shift and go to state 86
    RPAREN          reduce using rule 35 (param_list -> positional_param_list .)


state 64

    (36) param_list -> nonpositional_param_list .

    RPAREN          reduce using rule 36 (param_list -> nonpositional_param_list .)


state 65

    (37) positional_param_list -> empty .

    COMMA           reduce using rule 37 (positional_param_list -> empty .)
    RPAREN          reduce using rule 37 (positional_param_list -> empty .)


state 66

    (40) nonpositional_param_list -> keyword_param_list . COMMA excess_args_param
    (41) nonpositional_param_list -> keyword_param_list .
    (44) keyword_param_list -> keyword_param_list . COMMA keyword_param

    COMMA           shift and go to state 87
    RPAREN          reduce using rule 41 (nonpositional_param_list -> keyword_param_list .)


state 67

    (42) nonpositional_param_list -> excess_args_param .

    RPAREN          reduce using rule 42 (nonpositional_param_list -> excess_args_param .)


state 68

    (43) keyword_param_list -> keyword_param .

    COMMA           reduce using rule 43 (keyword_param_list -> keyword_param .)
    RPAREN          reduce using rule 43 (keyword_param_list -> keyword_param .)


state 69

    (46) excess_args_param -> ASTERISK . ID

    ID              shift and go to state 88


state 70

    (28) id_with_dot -> ID .
    (29) id_with_dot -> ID . DOT id_with_dot

    SEMI            reduce using rule 28 (id_with_dot -> ID .)
    DOT             shift and go to state 89


state 71

    (25) def_bitfield -> DEF opt_signed BITFIELD ID LESS . INTLIT COLON INTLIT GREATER SEMI
    (26) def_bitfield -> DEF opt_signed BITFIELD ID LESS . INTLIT GREATER SEMI

    INTLIT          shift and go to state 90


state 72

    (27) def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot . SEMI

    SEMI            shift and go to state 91


state 73

    (32) def_template -> DEF TEMPLATE ID CODELIT SEMI .

    NAMESPACE       reduce using rule 32 (def_template -> DEF TEMPLATE ID CODELIT SEMI .)
    DEF             reduce using rule 32 (def_template -> DEF TEMPLATE ID CODELIT SEMI .)
    OUTPUT          reduce using rule 32 (def_template -> DEF TEMPLATE ID CODELIT SEMI .)
    LET             reduce using rule 32 (def_template -> DEF TEMPLATE ID CODELIT SEMI .)
    SPLIT           reduce using rule 32 (def_template -> DEF TEMPLATE ID CODELIT SEMI .)
    DECODE          reduce using rule 32 (def_template -> DEF TEMPLATE ID CODELIT SEMI .)


state 74

    (48) decode_block -> DECODE ID opt_default LBRACE decode_stmt_list . RBRACE

    RBRACE          shift and go to state 92


state 75

    (51) decode_stmt_list -> decode_stmt .
    (52) decode_stmt_list -> decode_stmt . decode_stmt_list
    (51) decode_stmt_list -> . decode_stmt
    (52) decode_stmt_list -> . decode_stmt decode_stmt_list
    (53) decode_stmt -> . CPPDIRECTIVE
    (54) decode_stmt -> . FORMAT push_format_id LBRACE decode_stmt_list RBRACE
    (56) decode_stmt -> . case_list COLON decode_block
    (57) decode_stmt -> . case_list COLON inst SEMI
    (58) case_list -> . DEFAULT
    (59) case_list -> . INTLIT
    (60) case_list -> . STRLIT
    (61) case_list -> . case_list COMMA INTLIT
    (62) case_list -> . case_list COMMA STRLIT

    RBRACE          reduce using rule 51 (decode_stmt_list -> decode_stmt .)
    CPPDIRECTIVE    shift and go to state 76
    FORMAT          shift and go to state 77
    DEFAULT         shift and go to state 79
    INTLIT          shift and go to state 80
    STRLIT          shift and go to state 81

    decode_stmt                    shift and go to state 75
    decode_stmt_list               shift and go to state 93
    case_list                      shift and go to state 78

state 76

    (53) decode_stmt -> CPPDIRECTIVE .

    CPPDIRECTIVE    reduce using rule 53 (decode_stmt -> CPPDIRECTIVE .)
    FORMAT          reduce using rule 53 (decode_stmt -> CPPDIRECTIVE .)
    DEFAULT         reduce using rule 53 (decode_stmt -> CPPDIRECTIVE .)
    INTLIT          reduce using rule 53 (decode_stmt -> CPPDIRECTIVE .)
    STRLIT          reduce using rule 53 (decode_stmt -> CPPDIRECTIVE .)
    RBRACE          reduce using rule 53 (decode_stmt -> CPPDIRECTIVE .)


state 77

    (54) decode_stmt -> FORMAT . push_format_id LBRACE decode_stmt_list RBRACE
    (55) push_format_id -> . ID

    ID              shift and go to state 95

    push_format_id                 shift and go to state 94

state 78

    (56) decode_stmt -> case_list . COLON decode_block
    (57) decode_stmt -> case_list . COLON inst SEMI
    (61) case_list -> case_list . COMMA INTLIT
    (62) case_list -> case_list . COMMA STRLIT

    COLON           shift and go to state 96
    COMMA           shift and go to state 97


state 79

    (58) case_list -> DEFAULT .

    COLON           reduce using rule 58 (case_list -> DEFAULT .)
    COMMA           reduce using rule 58 (case_list -> DEFAULT .)


state 80

    (59) case_list -> INTLIT .

    COLON           reduce using rule 59 (case_list -> INTLIT .)
    COMMA           reduce using rule 59 (case_list -> INTLIT .)


state 81

    (60) case_list -> STRLIT .

    COLON           reduce using rule 60 (case_list -> STRLIT .)
    COMMA           reduce using rule 60 (case_list -> STRLIT .)


state 82

    (63) inst -> ID LPAREN . arg_list RPAREN
    (65) arg_list -> . positional_arg_list COMMA keyword_arg_list
    (66) arg_list -> . positional_arg_list
    (67) arg_list -> . keyword_arg_list
    (68) positional_arg_list -> . empty
    (69) positional_arg_list -> . expr
    (70) positional_arg_list -> . positional_arg_list COMMA expr
    (71) keyword_arg_list -> . keyword_arg
    (72) keyword_arg_list -> . keyword_arg_list COMMA keyword_arg
    (82) empty -> .
    (74) expr -> . ID
    (75) expr -> . INTLIT
    (76) expr -> . STRLIT
    (77) expr -> . CODELIT
    (78) expr -> . LBRACKET list_expr RBRACKET
    (73) keyword_arg -> . ID EQUALS expr

    COMMA           reduce using rule 82 (empty -> .)
    RPAREN          reduce using rule 82 (empty -> .)
    ID              shift and go to state 98
    INTLIT          shift and go to state 105
    STRLIT          shift and go to state 106
    CODELIT         shift and go to state 107
    LBRACKET        shift and go to state 108

    arg_list                       shift and go to state 99
    positional_arg_list            shift and go to state 100
    keyword_arg_list               shift and go to state 101
    empty                          shift and go to state 102
    expr                           shift and go to state 103
    keyword_arg                    shift and go to state 104

state 83

    (64) inst -> ID DBLCOLON . ID LPAREN arg_list RPAREN

    ID              shift and go to state 109


state 84

    (45) keyword_param -> ID EQUALS . expr
    (74) expr -> . ID
    (75) expr -> . INTLIT
    (76) expr -> . STRLIT
    (77) expr -> . CODELIT
    (78) expr -> . LBRACKET list_expr RBRACKET

    ID              shift and go to state 110
    INTLIT          shift and go to state 105
    STRLIT          shift and go to state 106
    CODELIT         shift and go to state 107
    LBRACKET        shift and go to state 108

    expr                           shift and go to state 111

state 85

    (33) def_format -> DEF FORMAT ID LPAREN param_list RPAREN . CODELIT SEMI

    CODELIT         shift and go to state 112


state 86

    (34) param_list -> positional_param_list COMMA . nonpositional_param_list
    (39) positional_param_list -> positional_param_list COMMA . ID
    (40) nonpositional_param_list -> . keyword_param_list COMMA excess_args_param
    (41) nonpositional_param_list -> . keyword_param_list
    (42) nonpositional_param_list -> . excess_args_param
    (43) keyword_param_list -> . keyword_param
    (44) keyword_param_list -> . keyword_param_list COMMA keyword_param
    (46) excess_args_param -> . ASTERISK ID
    (45) keyword_param -> . ID EQUALS expr

    ID              shift and go to state 114
    ASTERISK        shift and go to state 69

    nonpositional_param_list       shift and go to state 113
    keyword_param_list             shift and go to state 66
    excess_args_param              shift and go to state 67
    keyword_param                  shift and go to state 68

state 87

    (40) nonpositional_param_list -> keyword_param_list COMMA . excess_args_param
    (44) keyword_param_list -> keyword_param_list COMMA . keyword_param
    (46) excess_args_param -> . ASTERISK ID
    (45) keyword_param -> . ID EQUALS expr

    ASTERISK        shift and go to state 69
    ID              shift and go to state 117

    excess_args_param              shift and go to state 115
    keyword_param                  shift and go to state 116

state 88

    (46) excess_args_param -> ASTERISK ID .

    RPAREN          reduce using rule 46 (excess_args_param -> ASTERISK ID .)


state 89

    (29) id_with_dot -> ID DOT . id_with_dot
    (28) id_with_dot -> . ID
    (29) id_with_dot -> . ID DOT id_with_dot

    ID              shift and go to state 70

    id_with_dot                    shift and go to state 118

state 90

    (25) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT . COLON INTLIT GREATER SEMI
    (26) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT . GREATER SEMI

    COLON           shift and go to state 119
    GREATER         shift and go to state 120


state 91

    (27) def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI .

    NAMESPACE       reduce using rule 27 (def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI .)
    DEF             reduce using rule 27 (def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI .)
    OUTPUT          reduce using rule 27 (def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI .)
    LET             reduce using rule 27 (def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI .)
    SPLIT           reduce using rule 27 (def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI .)
    DECODE          reduce using rule 27 (def_bitfield_struct -> DEF opt_signed BITFIELD ID id_with_dot SEMI .)


state 92

    (48) decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .

    $end            reduce using rule 48 (decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .)
    CPPDIRECTIVE    reduce using rule 48 (decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .)
    FORMAT          reduce using rule 48 (decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .)
    DEFAULT         reduce using rule 48 (decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .)
    INTLIT          reduce using rule 48 (decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .)
    STRLIT          reduce using rule 48 (decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .)
    RBRACE          reduce using rule 48 (decode_block -> DECODE ID opt_default LBRACE decode_stmt_list RBRACE .)


state 93

    (52) decode_stmt_list -> decode_stmt decode_stmt_list .

    RBRACE          reduce using rule 52 (decode_stmt_list -> decode_stmt decode_stmt_list .)


state 94

    (54) decode_stmt -> FORMAT push_format_id . LBRACE decode_stmt_list RBRACE

    LBRACE          shift and go to state 121


state 95

    (55) push_format_id -> ID .

    LBRACE          reduce using rule 55 (push_format_id -> ID .)


state 96

    (56) decode_stmt -> case_list COLON . decode_block
    (57) decode_stmt -> case_list COLON . inst SEMI
    (48) decode_block -> . DECODE ID opt_default LBRACE decode_stmt_list RBRACE
    (63) inst -> . ID LPAREN arg_list RPAREN
    (64) inst -> . ID DBLCOLON ID LPAREN arg_list RPAREN

    DECODE          shift and go to state 23
    ID              shift and go to state 60

    decode_block                   shift and go to state 122
    inst                           shift and go to state 123

state 97

    (61) case_list -> case_list COMMA . INTLIT
    (62) case_list -> case_list COMMA . STRLIT

    INTLIT          shift and go to state 124
    STRLIT          shift and go to state 125


state 98

    (74) expr -> ID .
    (73) keyword_arg -> ID . EQUALS expr

    COMMA           reduce using rule 74 (expr -> ID .)
    RPAREN          reduce using rule 74 (expr -> ID .)
    EQUALS          shift and go to state 126


state 99

    (63) inst -> ID LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 127


state 100

    (65) arg_list -> positional_arg_list . COMMA keyword_arg_list
    (66) arg_list -> positional_arg_list .
    (70) positional_arg_list -> positional_arg_list . COMMA expr

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 66 (arg_list -> positional_arg_list .)


state 101

    (67) arg_list -> keyword_arg_list .
    (72) keyword_arg_list -> keyword_arg_list . COMMA keyword_arg

    RPAREN          reduce using rule 67 (arg_list -> keyword_arg_list .)
    COMMA           shift and go to state 129


state 102

    (68) positional_arg_list -> empty .

    COMMA           reduce using rule 68 (positional_arg_list -> empty .)
    RPAREN          reduce using rule 68 (positional_arg_list -> empty .)


state 103

    (69) positional_arg_list -> expr .

    COMMA           reduce using rule 69 (positional_arg_list -> expr .)
    RPAREN          reduce using rule 69 (positional_arg_list -> expr .)


state 104

    (71) keyword_arg_list -> keyword_arg .

    COMMA           reduce using rule 71 (keyword_arg_list -> keyword_arg .)
    RPAREN          reduce using rule 71 (keyword_arg_list -> keyword_arg .)


state 105

    (75) expr -> INTLIT .

    COMMA           reduce using rule 75 (expr -> INTLIT .)
    RPAREN          reduce using rule 75 (expr -> INTLIT .)
    RBRACKET        reduce using rule 75 (expr -> INTLIT .)


state 106

    (76) expr -> STRLIT .

    COMMA           reduce using rule 76 (expr -> STRLIT .)
    RPAREN          reduce using rule 76 (expr -> STRLIT .)
    RBRACKET        reduce using rule 76 (expr -> STRLIT .)


state 107

    (77) expr -> CODELIT .

    COMMA           reduce using rule 77 (expr -> CODELIT .)
    RPAREN          reduce using rule 77 (expr -> CODELIT .)
    RBRACKET        reduce using rule 77 (expr -> CODELIT .)


state 108

    (78) expr -> LBRACKET . list_expr RBRACKET
    (79) list_expr -> . expr
    (80) list_expr -> . list_expr COMMA expr
    (81) list_expr -> . empty
    (74) expr -> . ID
    (75) expr -> . INTLIT
    (76) expr -> . STRLIT
    (77) expr -> . CODELIT
    (78) expr -> . LBRACKET list_expr RBRACKET
    (82) empty -> .

    ID              shift and go to state 110
    INTLIT          shift and go to state 105
    STRLIT          shift and go to state 106
    CODELIT         shift and go to state 107
    LBRACKET        shift and go to state 108
    RBRACKET        reduce using rule 82 (empty -> .)
    COMMA           reduce using rule 82 (empty -> .)

    list_expr                      shift and go to state 130
    expr                           shift and go to state 131
    empty                          shift and go to state 132

state 109

    (64) inst -> ID DBLCOLON ID . LPAREN arg_list RPAREN

    LPAREN          shift and go to state 133


state 110

    (74) expr -> ID .

    COMMA           reduce using rule 74 (expr -> ID .)
    RPAREN          reduce using rule 74 (expr -> ID .)
    RBRACKET        reduce using rule 74 (expr -> ID .)


state 111

    (45) keyword_param -> ID EQUALS expr .

    COMMA           reduce using rule 45 (keyword_param -> ID EQUALS expr .)
    RPAREN          reduce using rule 45 (keyword_param -> ID EQUALS expr .)


state 112

    (33) def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT . SEMI

    SEMI            shift and go to state 134


state 113

    (34) param_list -> positional_param_list COMMA nonpositional_param_list .

    RPAREN          reduce using rule 34 (param_list -> positional_param_list COMMA nonpositional_param_list .)


state 114

    (39) positional_param_list -> positional_param_list COMMA ID .
    (45) keyword_param -> ID . EQUALS expr

    COMMA           reduce using rule 39 (positional_param_list -> positional_param_list COMMA ID .)
    RPAREN          reduce using rule 39 (positional_param_list -> positional_param_list COMMA ID .)
    EQUALS          shift and go to state 84


state 115

    (40) nonpositional_param_list -> keyword_param_list COMMA excess_args_param .

    RPAREN          reduce using rule 40 (nonpositional_param_list -> keyword_param_list COMMA excess_args_param .)


state 116

    (44) keyword_param_list -> keyword_param_list COMMA keyword_param .

    COMMA           reduce using rule 44 (keyword_param_list -> keyword_param_list COMMA keyword_param .)
    RPAREN          reduce using rule 44 (keyword_param_list -> keyword_param_list COMMA keyword_param .)


state 117

    (45) keyword_param -> ID . EQUALS expr

    EQUALS          shift and go to state 84


state 118

    (29) id_with_dot -> ID DOT id_with_dot .

    SEMI            reduce using rule 29 (id_with_dot -> ID DOT id_with_dot .)


state 119

    (25) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON . INTLIT GREATER SEMI

    INTLIT          shift and go to state 135


state 120

    (26) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER . SEMI

    SEMI            shift and go to state 136


state 121

    (54) decode_stmt -> FORMAT push_format_id LBRACE . decode_stmt_list RBRACE
    (51) decode_stmt_list -> . decode_stmt
    (52) decode_stmt_list -> . decode_stmt decode_stmt_list
    (53) decode_stmt -> . CPPDIRECTIVE
    (54) decode_stmt -> . FORMAT push_format_id LBRACE decode_stmt_list RBRACE
    (56) decode_stmt -> . case_list COLON decode_block
    (57) decode_stmt -> . case_list COLON inst SEMI
    (58) case_list -> . DEFAULT
    (59) case_list -> . INTLIT
    (60) case_list -> . STRLIT
    (61) case_list -> . case_list COMMA INTLIT
    (62) case_list -> . case_list COMMA STRLIT

    CPPDIRECTIVE    shift and go to state 76
    FORMAT          shift and go to state 77
    DEFAULT         shift and go to state 79
    INTLIT          shift and go to state 80
    STRLIT          shift and go to state 81

    decode_stmt_list               shift and go to state 137
    decode_stmt                    shift and go to state 75
    case_list                      shift and go to state 78

state 122

    (56) decode_stmt -> case_list COLON decode_block .

    CPPDIRECTIVE    reduce using rule 56 (decode_stmt -> case_list COLON decode_block .)
    FORMAT          reduce using rule 56 (decode_stmt -> case_list COLON decode_block .)
    DEFAULT         reduce using rule 56 (decode_stmt -> case_list COLON decode_block .)
    INTLIT          reduce using rule 56 (decode_stmt -> case_list COLON decode_block .)
    STRLIT          reduce using rule 56 (decode_stmt -> case_list COLON decode_block .)
    RBRACE          reduce using rule 56 (decode_stmt -> case_list COLON decode_block .)


state 123

    (57) decode_stmt -> case_list COLON inst . SEMI

    SEMI            shift and go to state 138


state 124

    (61) case_list -> case_list COMMA INTLIT .

    COLON           reduce using rule 61 (case_list -> case_list COMMA INTLIT .)
    COMMA           reduce using rule 61 (case_list -> case_list COMMA INTLIT .)


state 125

    (62) case_list -> case_list COMMA STRLIT .

    COLON           reduce using rule 62 (case_list -> case_list COMMA STRLIT .)
    COMMA           reduce using rule 62 (case_list -> case_list COMMA STRLIT .)


state 126

    (73) keyword_arg -> ID EQUALS . expr
    (74) expr -> . ID
    (75) expr -> . INTLIT
    (76) expr -> . STRLIT
    (77) expr -> . CODELIT
    (78) expr -> . LBRACKET list_expr RBRACKET

    ID              shift and go to state 110
    INTLIT          shift and go to state 105
    STRLIT          shift and go to state 106
    CODELIT         shift and go to state 107
    LBRACKET        shift and go to state 108

    expr                           shift and go to state 139

state 127

    (63) inst -> ID LPAREN arg_list RPAREN .

    LBRACE          reduce using rule 63 (inst -> ID LPAREN arg_list RPAREN .)
    SEMI            reduce using rule 63 (inst -> ID LPAREN arg_list RPAREN .)


state 128

    (65) arg_list -> positional_arg_list COMMA . keyword_arg_list
    (70) positional_arg_list -> positional_arg_list COMMA . expr
    (71) keyword_arg_list -> . keyword_arg
    (72) keyword_arg_list -> . keyword_arg_list COMMA keyword_arg
    (74) expr -> . ID
    (75) expr -> . INTLIT
    (76) expr -> . STRLIT
    (77) expr -> . CODELIT
    (78) expr -> . LBRACKET list_expr RBRACKET
    (73) keyword_arg -> . ID EQUALS expr

    ID              shift and go to state 98
    INTLIT          shift and go to state 105
    STRLIT          shift and go to state 106
    CODELIT         shift and go to state 107
    LBRACKET        shift and go to state 108

    keyword_arg_list               shift and go to state 140
    expr                           shift and go to state 141
    keyword_arg                    shift and go to state 104

state 129

    (72) keyword_arg_list -> keyword_arg_list COMMA . keyword_arg
    (73) keyword_arg -> . ID EQUALS expr

    ID              shift and go to state 143

    keyword_arg                    shift and go to state 142

state 130

    (78) expr -> LBRACKET list_expr . RBRACKET
    (80) list_expr -> list_expr . COMMA expr

    RBRACKET        shift and go to state 144
    COMMA           shift and go to state 145


state 131

    (79) list_expr -> expr .

    RBRACKET        reduce using rule 79 (list_expr -> expr .)
    COMMA           reduce using rule 79 (list_expr -> expr .)


state 132

    (81) list_expr -> empty .

    RBRACKET        reduce using rule 81 (list_expr -> empty .)
    COMMA           reduce using rule 81 (list_expr -> empty .)


state 133

    (64) inst -> ID DBLCOLON ID LPAREN . arg_list RPAREN
    (65) arg_list -> . positional_arg_list COMMA keyword_arg_list
    (66) arg_list -> . positional_arg_list
    (67) arg_list -> . keyword_arg_list
    (68) positional_arg_list -> . empty
    (69) positional_arg_list -> . expr
    (70) positional_arg_list -> . positional_arg_list COMMA expr
    (71) keyword_arg_list -> . keyword_arg
    (72) keyword_arg_list -> . keyword_arg_list COMMA keyword_arg
    (82) empty -> .
    (74) expr -> . ID
    (75) expr -> . INTLIT
    (76) expr -> . STRLIT
    (77) expr -> . CODELIT
    (78) expr -> . LBRACKET list_expr RBRACKET
    (73) keyword_arg -> . ID EQUALS expr

    COMMA           reduce using rule 82 (empty -> .)
    RPAREN          reduce using rule 82 (empty -> .)
    ID              shift and go to state 98
    INTLIT          shift and go to state 105
    STRLIT          shift and go to state 106
    CODELIT         shift and go to state 107
    LBRACKET        shift and go to state 108

    arg_list                       shift and go to state 146
    positional_arg_list            shift and go to state 100
    keyword_arg_list               shift and go to state 101
    empty                          shift and go to state 102
    expr                           shift and go to state 103
    keyword_arg                    shift and go to state 104

state 134

    (33) def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI .

    NAMESPACE       reduce using rule 33 (def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI .)
    DEF             reduce using rule 33 (def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI .)
    OUTPUT          reduce using rule 33 (def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI .)
    LET             reduce using rule 33 (def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI .)
    SPLIT           reduce using rule 33 (def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI .)
    DECODE          reduce using rule 33 (def_format -> DEF FORMAT ID LPAREN param_list RPAREN CODELIT SEMI .)


state 135

    (25) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT . GREATER SEMI

    GREATER         shift and go to state 147


state 136

    (26) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI .

    NAMESPACE       reduce using rule 26 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI .)
    DEF             reduce using rule 26 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI .)
    OUTPUT          reduce using rule 26 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI .)
    LET             reduce using rule 26 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI .)
    SPLIT           reduce using rule 26 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI .)
    DECODE          reduce using rule 26 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT GREATER SEMI .)


state 137

    (54) decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list . RBRACE

    RBRACE          shift and go to state 148


state 138

    (57) decode_stmt -> case_list COLON inst SEMI .

    CPPDIRECTIVE    reduce using rule 57 (decode_stmt -> case_list COLON inst SEMI .)
    FORMAT          reduce using rule 57 (decode_stmt -> case_list COLON inst SEMI .)
    DEFAULT         reduce using rule 57 (decode_stmt -> case_list COLON inst SEMI .)
    INTLIT          reduce using rule 57 (decode_stmt -> case_list COLON inst SEMI .)
    STRLIT          reduce using rule 57 (decode_stmt -> case_list COLON inst SEMI .)
    RBRACE          reduce using rule 57 (decode_stmt -> case_list COLON inst SEMI .)


state 139

    (73) keyword_arg -> ID EQUALS expr .

    COMMA           reduce using rule 73 (keyword_arg -> ID EQUALS expr .)
    RPAREN          reduce using rule 73 (keyword_arg -> ID EQUALS expr .)


state 140

    (65) arg_list -> positional_arg_list COMMA keyword_arg_list .
    (72) keyword_arg_list -> keyword_arg_list . COMMA keyword_arg

    RPAREN          reduce using rule 65 (arg_list -> positional_arg_list COMMA keyword_arg_list .)
    COMMA           shift and go to state 129


state 141

    (70) positional_arg_list -> positional_arg_list COMMA expr .

    COMMA           reduce using rule 70 (positional_arg_list -> positional_arg_list COMMA expr .)
    RPAREN          reduce using rule 70 (positional_arg_list -> positional_arg_list COMMA expr .)


state 142

    (72) keyword_arg_list -> keyword_arg_list COMMA keyword_arg .

    COMMA           reduce using rule 72 (keyword_arg_list -> keyword_arg_list COMMA keyword_arg .)
    RPAREN          reduce using rule 72 (keyword_arg_list -> keyword_arg_list COMMA keyword_arg .)


state 143

    (73) keyword_arg -> ID . EQUALS expr

    EQUALS          shift and go to state 126


state 144

    (78) expr -> LBRACKET list_expr RBRACKET .

    COMMA           reduce using rule 78 (expr -> LBRACKET list_expr RBRACKET .)
    RPAREN          reduce using rule 78 (expr -> LBRACKET list_expr RBRACKET .)
    RBRACKET        reduce using rule 78 (expr -> LBRACKET list_expr RBRACKET .)


state 145

    (80) list_expr -> list_expr COMMA . expr
    (74) expr -> . ID
    (75) expr -> . INTLIT
    (76) expr -> . STRLIT
    (77) expr -> . CODELIT
    (78) expr -> . LBRACKET list_expr RBRACKET

    ID              shift and go to state 110
    INTLIT          shift and go to state 105
    STRLIT          shift and go to state 106
    CODELIT         shift and go to state 107
    LBRACKET        shift and go to state 108

    expr                           shift and go to state 149

state 146

    (64) inst -> ID DBLCOLON ID LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 150


state 147

    (25) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER . SEMI

    SEMI            shift and go to state 151


state 148

    (54) decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE .

    CPPDIRECTIVE    reduce using rule 54 (decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE .)
    FORMAT          reduce using rule 54 (decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE .)
    DEFAULT         reduce using rule 54 (decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE .)
    INTLIT          reduce using rule 54 (decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE .)
    STRLIT          reduce using rule 54 (decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE .)
    RBRACE          reduce using rule 54 (decode_stmt -> FORMAT push_format_id LBRACE decode_stmt_list RBRACE .)


state 149

    (80) list_expr -> list_expr COMMA expr .

    RBRACKET        reduce using rule 80 (list_expr -> list_expr COMMA expr .)
    COMMA           reduce using rule 80 (list_expr -> list_expr COMMA expr .)


state 150

    (64) inst -> ID DBLCOLON ID LPAREN arg_list RPAREN .

    LBRACE          reduce using rule 64 (inst -> ID DBLCOLON ID LPAREN arg_list RPAREN .)
    SEMI            reduce using rule 64 (inst -> ID DBLCOLON ID LPAREN arg_list RPAREN .)


state 151

    (25) def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI .

    NAMESPACE       reduce using rule 25 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI .)
    DEF             reduce using rule 25 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI .)
    OUTPUT          reduce using rule 25 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI .)
    LET             reduce using rule 25 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI .)
    SPLIT           reduce using rule 25 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI .)
    DECODE          reduce using rule 25 (def_bitfield -> DEF opt_signed BITFIELD ID LESS INTLIT COLON INTLIT GREATER SEMI .)

